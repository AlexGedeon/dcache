%{
//
%}


%class Companion
%package org.dcache.pool.p2p
%access package
%import diskCacheV111.vehicles.DoorTransferFinishedMessage
%import diskCacheV111.vehicles.HttpDoorUrlInfoMessage
%import static diskCacheV111.util.CacheException.*;
%import static org.dcache.util.CacheExceptionFactory.exceptionOf;

%start FSM::Init
%map FSM
%%
Init
{
        start
                [ !ctxt.hasRequiredAttributes() ]
                GettingFileAttributes
                {
                }
        start
                [ ctxt.hasRequiredAttributes() ]
                CreatingMover
                {
                }
}

GettingFileAttributes
Entry
{
        fetchFileAttributes();
}
{
        timeout
                Failed
                {
                        setError(exceptionOf(TIMEOUT, "Failed to get file attributes (timeout)"));
                }
        noroute
                Failed
                {
                        setError(exceptionOf(TIMEOUT, "Failed to get file attributes (no route to cell)"));
                }
        failure(rc: Integer, cause: Object)
                Failed
                {
                        setError(exceptionOf(rc, "Failed to get file attributes (" + cause + ")"));
                }
        success()
                CreatingMover
                {
                }
}

CreatingMover
Entry
{
        sendDeliveryRequest();
}
{
        success
                WaitingForURLInfoMessage
                {
                }
        messageArrived(message: HttpDoorUrlInfoMessage)
                Transferring
                {
                        beginTransfer(message.getUrl());
                }
        failure(rc: Integer, cause: Object)
                Failed
                {
                        setError(exceptionOf(rc, "Source pool failed (" + cause + ")"));
                }
        timeout
                Failed
                {
                        setError(exceptionOf(TIMEOUT, "Source pool failed (no response)"));
                }
        noroute
                Failed
                {
                        setError(exceptionOf(TIMEOUT, "Source pool failed (no route to cell)"));
                }
}

WaitingForURLInfoMessage
Entry
{
        startTimer(ctxt.getPingPeriod());
}
Exit
{
        stopTimer();
}
{
        timer
                nil
                {
                        ping();
                }
        success
                nil
                {
                        startTimer(ctxt.getPingPeriod());
                }
        timeout
                nil
                {
                        ping();
                }
        noroute
                Failed
                {
                        setError(exceptionOf(TIMEOUT, "Ping failed (no route to cell)"));
                }
        failure(rc: Integer, cause: Object)
                Failed
                {
                        setError(exceptionOf(rc, "Ping failed (" + cause + ")"));
                }
        messageArrived(message: HttpDoorUrlInfoMessage)
                Transferring
                {
                        beginTransfer(message.getUrl());
                }
}

Transferring
{
        messageArrived(message: DoorTransferFinishedMessage)
                [ message.getReturnCode() == 0]
                DoorFinished
                {
                }
        messageArrived(message: DoorTransferFinishedMessage)
                [ message.getReturnCode() != 0]
                Cancelling
                {
                        setError(exceptionOf(message));
                }
        transferEnded(error: Object)
                [ error == null ]
                Done
                {
                }
        cancel(error: Object)
                Cancelling
                {
                        setError(error);
                }
}

// Remote end of the transfer is closed
DoorFinished
{
        transferEnded(error: Object)
                [ error == null ]
                Done
                {
                }
        cancel(error: Object)
                Cancelling
                {
                        setError(error);
                }
}

Cancelling
Entry
{
        interrupt();
}
{
        messageArrived(message: DoorTransferFinishedMessage)
                nil
                {
                }
        transferEnded(error: Object)
                [ error == null ]
                Done
                {
                        clearError();
                }
        cancel(error: Object)
                Cancelling
                {
                }
}

Failed
Entry
{
        done();
}
{
}

Done
Entry
{
        done();
}
{
}

Default
{
        fileExists
                Failed
                {
                        setError(exceptionOf(FILE_IN_CACHE, "Replica already exists"));
                }
        createEntryFailed(rc: Integer, cause: Object)
                Failed
                {
                        setError(exceptionOf(rc, "Replica creation failed (" + cause + " [" + rc + "])"));
                }
        cancel(error: Object)
                Failed
                {
                        setError(error);
                }
        messageArrived(message: DoorTransferFinishedMessage)
                [ message.getReturnCode() != 0]
                Failed
                {
                        setError(exceptionOf(message));
                }
        transferEnded(error: Object)
                [ error != null ]
                Failed
                {
                        setError(error);
                }
        Default
                nil
                {
                        // A number of events are irrelevant
                        // at various points. To keep the rest
                        // of the state machine simple we simply
                        // ignore them here.
                }
}

%%
