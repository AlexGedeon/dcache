%{
//
%}

%class Task
%package org.dcache.pool.migration
%access package
%import diskCacheV111.vehicles.*
%import static diskCacheV111.util.CacheException.*;

%start TASK::Queued
%map TASK
%%
Queued
{
        run
                GettingLocations
                {
                }
}

GettingLocations
Entry
{
        queryLocations();
}
{
        query_timeout
                Failed
                {
                        fail("PnfsManager failed (no response)");
                }
        query_noroute
                Failed
                {
                        fail("PnfsManager failed (no route to cell)");
                }
        query_failure(rc: int, cause: Object)
                Failed
                {
                        fail("PnfsManager failed (" + cause + ")");
                }
        cancel
                Cancelled
                {
                }
        query_success
                [ ctxt.hasMoreLocations() ]
                UpdatingExistingFile
                {
                        updateExistingReplica();
                }
        query_success
                InitiatingCopy
                {
                }
}

// We got existing copies. Try to update one of them. Keep
// trying until we succeed or we tried them all.
UpdatingExistingFile
{
        update_timeout
                [ ctxt.hasMoreLocations() ]
                nil
                {
                        updateExistingReplica();
                }
        update_timeout
                [ ctxt.isEager() ]
                InitiatingCopy
                {
                }
        update_timeout
                Failed
                {
                        fail("Remote pool failed (no response)");
                }
        update_noroute
                [ ctxt.hasMoreLocations() ]
                nil
                {
                        updateExistingReplica();
                }
        update_noroute
                [ ctxt.isEager() ]
                InitiatingCopy
                {
                }
        update_noroute
                Failed
                {
                        fail("Remote pool failed (no route to cell)");
                }
        update_failure(rc: int, cause: Object)
                [ rc == LOCKED ]
                Failed
                {
                        fail("Replica is locked on target pool");
                }
        update_failure(rc: int, cause: Object)
                [ ctxt.hasMoreLocations() ]
                nil
                {
                        updateExistingReplica();
                }
        update_failure(rc: int, cause: Object)
                InitiatingCopy
                {
                }
        update_success
                [ ctxt.getMustMovePins() ]
                MovingPin
                {
                }
        update_success
                Done
                {
                }
        cancel
                CancellingUpdate
                {
                }
}

// Update got cancelled. We simply wait for the previous update
// operation to finish and then go to either Cancelled, Done or
// Failed.
CancellingUpdate
{
        update_timeout
                Cancelled
                {
                }
        update_noroute
                Cancelled
                {
                }
        update_failure(rc: int, cause: Object)
                Cancelled
                {
                }
        update_success
                [ ctxt.getMustMovePins() ]
                Failed
                {
                        fail("Failed to cancel task");
                }
        update_success
                Done
                {
                }
        cancel
                nil
                {
                }
}

// Ask pool to copy the file.
InitiatingCopy
Entry
{
        initiateCopy();
}
{
        copy_success
                Copying
                {
                }
        copy_nopools
                Failed
                {
                        fail(String.format("No targets"));
                }
        copy_noroute
                Failed
                {
                        fail(String.format("Pool %s failed (no route to cell)",
                                           ctxt.getTarget()));
                }
        copy_failure(rc: int, cause: Object)
                Failed
                {
                        fail(String.format("Pool %s failed (%s)",
                                           ctxt.getTarget(), cause));
                }
        copy_timeout
                Waiting
                {
                        // No reply, but message could have been
                        // received anyway, so try to cancel it.
                        cancelCopy();
                }
        cancel
                Cancelling
                {
                }
        messageArrived(message: PoolMigrationCopyFinishedMessage)
                [ message.getReturnCode() != 0 ]
                Failed
                {
                        fail(String.format("Transfer to %s failed (%s)",
                                           ctxt.getTarget(),
                                           message.getErrorObject()));
                }
        messageArrived(message: PoolMigrationCopyFinishedMessage)
                [ message.getReturnCode() == 0 && ctxt.getMustMovePins() ]
                MovingPin
                {
                }
        messageArrived(message: PoolMigrationCopyFinishedMessage)
                [ message.getReturnCode() == 0 ]
                Done
                {
                }
}

// Pool accepted the task. Wait for it to finish and
// periodically send a ping to verify it is alive.
Copying
Entry
{
        startTimer(ctxt.getPingPeriod());
}
Exit
{
        stopTimer();
}
{
        timer
                Pinging
                {
                }
        messageArrived(message: PoolMigrationCopyFinishedMessage)
                [ message.getReturnCode() != 0 ]
                Failed
                {
                        fail(String.format("Transfer to %s failed (%s)",
                                           ctxt.getTarget(),
                                           message.getErrorObject()));
                }
        messageArrived(message: PoolMigrationCopyFinishedMessage)
                [ message.getReturnCode() == 0 && ctxt.getMustMovePins() ]
                MovingPin
                {
                }
        messageArrived(message: PoolMigrationCopyFinishedMessage)
                [ message.getReturnCode() == 0 ]
                Done
                {
                }
        cancel
                Cancelling
                {
                }
}

// Send a ping.
Pinging
Entry
{
        ping();
}
{
        ping_success
                Copying
                {
                        // Task is alive
                }
        ping_failure(rc: int, cause: Object)
                Waiting
                {
                        // Task is gone
                }
        ping_noroute
                NoResponse
                {
                        // We cannot talk to the pool
                }
        ping_timeout
                NoResponse
                {
                        // Pool does not respond.
                }
        messageArrived(message: PoolMigrationCopyFinishedMessage)
                [ message.getReturnCode() != 0 ]
                Failed
                {
                        fail(String.format("Transfer to %s failed (%s)",
                                           ctxt.getTarget(),
                                           message.getErrorObject()));
                }
        messageArrived(message: PoolMigrationCopyFinishedMessage)
                [ message.getReturnCode() == 0 && ctxt.getMustMovePins() ]
                MovingPin
                {
                }
        messageArrived(message: PoolMigrationCopyFinishedMessage)
                [ message.getReturnCode() == 0 ]
                Done
                {
                }
        cancel
                Cancelling
                {
                }
}

// Pool did not reply to ping. Let's give it some time
// and ping it again.
NoResponse
Entry
{
        startTimer(ctxt.getNoResponseTimeout());
}
Exit
{
        stopTimer();
}
{
        timer
                nil
                {
                        ping();
                }
        ping_success
                Copying
                {
                        // Task is alive
                }
        ping_failure(rc: int, cause: Object)
                Waiting
                {
                        // Task is gone
                }
        ping_noroute
                Failed
                {
                        // We still cannot talk to the pool
                        fail(String.format("Pool %s failed (no route to cell)",
                                           ctxt.getTarget()));
                }
        ping_timeout
                Failed
                {
                        // Message timed out again
                        fail(String.format("Pool %s failed (no response)",
                                           ctxt.getTarget()));
                }
        messageArrived(message: PoolMigrationCopyFinishedMessage)
                [ message.getReturnCode() != 0 ]
                Failed
                {
                        fail(String.format("Transfer to %s failed (%s)",
                                           ctxt.getTarget(),
                                           message.getErrorObject()));
                }
        messageArrived(message: PoolMigrationCopyFinishedMessage)
                [ message.getReturnCode() == 0 && ctxt.getMustMovePins() ]
                MovingPin
                {
                }
        messageArrived(message: PoolMigrationCopyFinishedMessage)
                [ message.getReturnCode() == 0 ]
                Done
                {
                }
        cancel
                Cancelling
                {
                }
}

// Target pool no longer has the task. Let's wait for
// the CopyFinished message.
Waiting
Entry
{
        startTimer(ctxt.getTaskDeadTimeout());
}
Entry
{
        stopTimer();
}
{
        timer
                Failed
                {
                        fail(String.format("Pool %s failed (no response)",
                                           ctxt.getTarget()));
                }
        messageArrived(message: PoolMigrationCopyFinishedMessage)
                [ message.getReturnCode() != 0 ]
                Failed
                {
                        fail(String.format("Transfer to %s failed (%s)",
                                           ctxt.getTarget(),
                                           message.getErrorObject()));
                }
        messageArrived(message: PoolMigrationCopyFinishedMessage)
                [ message.getReturnCode() == 0 && ctxt.getMustMovePins() ]
                MovingPin
                {
                }
        messageArrived(message: PoolMigrationCopyFinishedMessage)
                [ message.getReturnCode() == 0 ]
                Done
                {
                }
}

MovingPin
Entry
{
        movePin();
}
{
        move_success
                Done
                {
                }
        move_failure(rc: int, cause: Object)
                Failed
                {
                        fail("Pin manager failed (" + cause + ")");
                }
        move_noroute
                Failed
                {
                        fail("Pin manager failed (no route to cell)");
                }
        move_timeout
                Failed
                {
                        fail("Pin manager failed (timeout)");
                }
        cancel
                Failed
                {
                        fail("Failed to cancel task");
                }
}

// User requested to abort the task, but we already asked
// a pool to copy the file. Let's try to cancel the copy
// and wait for CopyFinished.
Cancelling
Entry
{
        cancelCopy();
        startTimer(ctxt.getTaskDeadTimeout());
}
Exit
{
        stopTimer();
}
{
        timer
                Failed
                {
                        fail(String.format("Pool %s failed (no response)",
                                           ctxt.getTarget()));
                }
        messageArrived(message: PoolMigrationCopyFinishedMessage)
                [ message.getReturnCode() != 0 ]
                Cancelled
                {
                }
        messageArrived(message: PoolMigrationCopyFinishedMessage)
                [ message.getReturnCode() == 0 && ctxt.getMustMovePins() ]
                Failed
                {
                        fail("Failed to cancel task");
                }
        messageArrived(message: PoolMigrationCopyFinishedMessage)
                [ message.getReturnCode() == 0 ]
                Done
                {
                }
        cancel_success
                nil
                {
                }
        cancel_failure(rc: int, cause: Object)
                nil
                {
                }
        cancel_noroute
                Failed
                {
                        fail("Failed to cancel task (no route)");
                }
        cancel_timeout
                nil
                {
                }
}

// Successfully cancelled task. We got confirmation that the
// transfer did not go through
Cancelled
Entry
{
        notifyCancelled();
}
{
}

// Something went wrong. In some cases the transfer could have
// succeeded, but we don't know.
Failed
{
}

// Transfer completed.
Done
Entry
{
        notifyCompleted();
}
{
}

// This will cause the state machine to always be input enabled
Default
{
        Default
                nil
                {
                }
}

%%
