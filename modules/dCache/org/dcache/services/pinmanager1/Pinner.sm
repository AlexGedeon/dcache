%{
// Pinner task for the pin manager
%}


%class Pinner
%package org.dcache.services.pinmanager1
%access package
%import diskCacheV111.vehicles.*

%start PinnerFSM::Init
%map PinnerFSM
%%
Init
{
        go
                [ ctxt.getStorageInfo() == null]
                GettingStorageInfo
                {
                }
        go
                FindingReadPool
                {
                }
}

GettingStorageInfo
Entry
{
        retrieveStorageInfo();
}
{
        timeout
                nil
                {
                        retrieveStorageInfo();
                }

        answerArrived(message: PnfsGetStorageInfoMessage)
                [ message.getReturnCode() == 0 ]
                FindingReadPool    
                {
                        setStorageInfo(message.getStorageInfo());
                }  

        answerArrived(message: PnfsGetStorageInfoMessage)
                Done
                {
                        fail("could not get storage info: "+
                         message.getErrorObject());    
                }
}


FindingReadPool
Entry
{
        findReadPool();
}
{
        timeout
                nil
                {
                        findReadPool();
                }
        answerArrived(message: PoolMgrSelectReadPoolMsg)
                [ message.getReturnCode() == 0 && message.getPoolName() != null ]
                MarkingSticky
                {
                        setReadPool(message.getPoolName());
                }
        answerArrived(message: PoolMgrSelectReadPoolMsg)
                Done
                {
                        fail("finding read pool failed");
                }
}

MarkingSticky
Entry
{
        markSticky();
}
{
        timeout
                FindingReadPool
                {
                }
        answerArrived(message: PoolSetStickyMessage)
                [ message.getReturnCode() == 0 ]
                Done
                {
                        succeed();
                }
        answerArrived(message: PoolSetStickyMessage)
                Done
                {
                        fail(message.getErrorObject()); 
                }
}

Done
{
}

Default
{
        answerArrived(message: Message)
                [ message.getReturnCode() != 0 ]
                Done
                {
                        fail(message.getErrorObject());    
                }
        answerArrived(message: Message)
                Done
                {
                        fail("Unexpected answer received in state " 
                             + context.getState().getName()
                             + ": " + context.getTransition());
                }
        answerArrived(message: PnfsGetStorageInfoMessage)
                [ message.getReturnCode() != 0 ]
                Done
                {
                        fail(message.getErrorObject());    
                }
        answerArrived(message: PnfsGetStorageInfoMessage)
                Done
                {
                        fail("Unexpected answer received in state " 
                             + context.getState().getName()
                             + ": " + context.getTransition());
                }
        answerArrived(message: PoolMgrSelectReadPoolMsg)
                [ message.getReturnCode() != 0 ]
                Done
                {
                        fail(message.getErrorObject());    
                }
        answerArrived(message: PoolMgrSelectReadPoolMsg)
                Done
                {
                        fail("Unexpected answer received in state " 
                             + context.getState().getName()
                             + ": " + context.getTransition());
                }
        answerArrived(message: PoolSetStickyMessage)
                [ message.getReturnCode() != 0 ]
                Done
                {
                        fail(message.getErrorObject());    
                }
        answerArrived(message: PoolSetStickyMessage)
                Done
                {
                        fail("Unexpected answer received in state " 
                             + context.getState().getName()
                             + ": " + context.getTransition());
                }
        exceptionArrived(exception: Exception)
                Done
                {
                        fail(exception);
                }
}


%%