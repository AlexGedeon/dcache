%{
// Pinner task for the pin manager
%}


%class Pinner
%package org.dcache.services.pinmanager1
%access package
%import diskCacheV111.vehicles.*
%import org.dcache.vehicles.PnfsGetFileAttributes
%import static diskCacheV111.util.CacheException.*

%start PinnerFSM::Init
%map PinnerFSM
%%
Init
{
        go
                [ ctxt.getFileAttributes() == null]
                GettingFileAttributes
                {
                }
        go
                FindingReadPool
                {
                }
}

GettingFileAttributes
Entry
{
        retrieveFileAttributes();
}
{
        timeout
                nil
                {
                        retrieveFileAttributes();
                }

        success(message: PnfsGetFileAttributes)
                [ message.getReturnCode() == 0 ]
                FindingReadPool
                {
                        setFileAttributes(message.getFileAttributes());
                }

        failure(rc: Integer, error: Object)
                Done
                {
                        fail("Could not get file attributes: " + error);
                }
        noroute
                Done
                {
                        fail("No route to PnfsManager");
                }
}


FindingReadPool
Entry
{
        findReadPool();
}
{
        timeout
                nil
                {
                        findReadPool();
                }
        success(message: PoolMgrSelectReadPoolMsg)
                [ message.getPoolName() != null ]
                MarkingSticky
                {
                        setReadPool(message.getPoolName());
                }
        failure(rc: Integer, error: Object)
                Done
                {
                        fail("finding read pool failed");
                }
        noroute
                Done
                {
                        fail("No route to PoolManager");
                }
}

MarkingSticky
Entry
{
        markSticky();
}
{
        timeout
                FindingReadPool
                {
                }
        noroute
                FindingReadPool
                {
                }
        success(message: PoolSetStickyMessage)
                Done
                {
                        succeed();
                }
        failure(rc: Integer, error: Object)
                [ rc == POOL_DISABLED ||
                  rc == FILE_NOT_IN_REPOSITORY ]
                FindingReadPool
                {
                }
        failure(rc: Integer, error: Object)
                Done
                {
                        fail(error);
                }
}

Done
{
}

Default
{
        failure(rc: Integer, error: Object)
                Done
                {
                        fail(error);
                }
        noroute
                Done
                {
                        fail("Communication failure");
                }
        timeout
                Done
                {
                        fail("Communication timeout");
                }
        success(message: PnfsGetFileAttributes)
                Done
                {
                        fail("Unexpected answer received in state "
                             + context.getState().getName()
                             + ": " + context.getTransition());
                }
        success(message: PoolMgrSelectReadPoolMsg)
                Done
                {
                        fail("Unexpected answer received in state "
                             + context.getState().getName()
                             + ": " + context.getTransition());
                }
        success(message: PoolSetStickyMessage)
                Done
                {
                        fail("Unexpected answer received in state "
                             + context.getState().getName()
                             + ": " + context.getTransition());
                }
}


%%