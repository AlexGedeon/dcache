%{

%}


%class Unpinner
%package org.dcache.services.pinmanager1
%access package
%import diskCacheV111.util.CacheException
%import diskCacheV111.vehicles.Message
%import diskCacheV111.vehicles.PnfsFlagMessage
%import diskCacheV111.vehicles.PnfsGetCacheLocationsMessage
%import diskCacheV111.vehicles.PoolSetStickyMessage
%import org.dcache.vehicles.PnfsGetFileAttributes

%start UnpinnerFSM::Init
%map UnpinnerFSM
%%
Init
{
        go
                [ ctxt.isOldStylePin() ]
                DeletingPnfsFlags
                {
                }
        go
                [ ctxt.isRetry() ]
                CheckingThatFileExists
                {
                }
        go
                UnsettingStickyFlags
                {
                }
}
DeletingPnfsFlags
Entry
{
        deletePnfsFlags();
}
{
        timeout
                nil
                {
                        deletePnfsFlags();
                }

        success(message: PnfsFlagMessage)
                FindingCacheLocations
                {
                }

        failure(rc: int, error: Object)
               [ ctxt.isRetry() ]
               CheckingThatFileExists
               {
               }

        failure(rc: int, error: Object)
               Done
               {
                        fail(error);
               }
        noroute
                Done
                {
                        fail("No route to pool");
                }
}

CheckingThatFileExists
Entry
{
        checkThatFileExists();
}
{
        timeout
                nil
                {
                        checkThatFileExists();
                }
        failure(rc: int, error: Object)
                [ rc == CacheException.NOT_IN_TRASH ||
                  rc == CacheException.FILE_NOT_FOUND]
                Done
                {
                        fileRemoved();
                }
        failure(rc: int, error: Object)
                Done
                {
                        fail(error);
                }
        noroute
                Done
                {
                        fail("No route to PnfsManager");
                }
        success(message: PnfsGetFileAttributes)
                UnsettingStickyFlags
                {
                }
}


FindingCacheLocations
Entry
{
        findCacheLocations();
}
{
        timeout
                nil
                {
                        findCacheLocations();
                }
        success(message: PnfsGetCacheLocationsMessage)
                UnsettingStickyFlags
                {
                        setLocations(message.getCacheLocations());
                }
        failure(rc: int, error: Object)
                Done
                {
                        fail(error);
                }
        noroute
                Done
                {
                        fail("No route to PnfsManager");
                }
}

UnsettingStickyFlags
Entry
{
        unsetStickyFlags();
}
{
        unsetStickyFlagMessagesSent
                Done
                {
                   succeed();
                }

        timeout
                nil
                {
                        unsetStickyFlags();
                }

        success(message: PoolSetStickyMessage)
                Done
                {
                        succeed();
                }

        failure(rc: int, error: Object)
                [ rc == CacheException.FILE_NOT_IN_REPOSITORY ]
                Done
                {
                        succeed();
                }

        failure(rc: int, error: Object)
                Done
                {
                        fail(error);
                }
        noroute
                Done
                {
                        fail("No route to pool");
                }
}

Done
{
}

Default
{
        failure(rc: int, error: Object)
                Done
                {
                        fail(error);
                }
        noroute
                Done
                {
                        fail("Communication failure");
                }
        timeout
                Done
                {
                        fail("Communication timeout");
                }
        success(message: PnfsFlagMessage)
                Done
                {
                        fail("Unexpected answer received in state "
                             + context.getState().getName()
                             + ": " + context.getTransition());
                }
        success(message: PnfsGetFileAttributes)
                Done
                {
                        fail("Unexpected answer received in state "
                             + context.getState().getName()
                             + ": " + context.getTransition());
                }
        success(message: PnfsGetCacheLocationsMessage)
                Done
                {
                        fail("Unexpected answer received in state "
                             + context.getState().getName()
                             + ": " + context.getTransition());
                }
        success(message: PoolSetStickyMessage)
                Done
                {
                        fail("Unexpected answer received in state "
                             + context.getState().getName()
                             + ": " + context.getTransition());
                }
}


%%