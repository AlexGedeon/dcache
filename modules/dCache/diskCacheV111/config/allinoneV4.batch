set printout default 2
set printout CellGlue none 
#
onerror shutdown
#
#
check -strong setupFile
#
copy file:${setupFile} context:setupContext
#
#  import the variables into our $context.
#  don't overwrite already existing variables.
#
import context -c setupContext 
#
check -strong config
check -strong dCapPort sshPort
#
check -strong serviceLocatorPort serviceLocatorHost
#
create dmg.cells.services.RoutingManager  RoutingMgr
#
#   The LocationManager Part
#
create dmg.cells.services.LocationManager lm \
       "${serviceLocatorPort} -strict=no -setup=${ourHomeDir}/config/lm.config"

#
#
#    P o o l   M a n a g e r
#
create diskCacheV111.poolManager.PoolManagerV5 PoolManager \
   "${config}/PoolManager.conf  \
         -replyObject   \
         -poolStatusRelay=broadcast \
         -threadPool=diskCacheV111.util.ThreadPoolNG \
         -costModule=diskCacheV111.poolManager.CostModuleV1"
#
#     P n f s    M a n a g e r
#


# real  pnfs manager
create diskCacheV111.namespace.PnfsManagerV3 PnfsManager \
        "org.dcache.chimera.namespace.ChimeraOsmStorageInfoExtractor -threads=4 -default=${defaultPnfsServer} -pnfs=${pnfs} \
        -chimeraConfig=${config}/chimera-config.xml \
        -namespace-provider=org.dcache.chimera.namespace.ChimeraNameSpaceProviderFactory \
        -storageinfo-provider=org.dcache.chimera.namespace.ChimeraNameSpaceProviderFactory \
        -cachelocation-provider=org.dcache.chimera.namespace.ChimeraNameSpaceProviderFactory \
#        -cachelocation-provider=diskCacheV111.namespace.provider.SQLCacheLocationProviderFactory \
#        -cachelocation-provider-dbURL=jdbc:postgresql://lxlab18/companion \
#        -cachelocation-provider-jdbcDrv=org.postgresql.Driver \
#        -cachelocation-provider-dbUser=postgres \
#        -cachelocation-provider-dbPass= \
"

#
# Cleaner
#

onerror continue
set context -c cleanerRefresh              120
set context -c cleanerRecover              240
set context -c cleanerPoolTimeout          100
set context -c cleanerProcessFilesPerRun   500
onerror shutdown

# onerror continue
create org.dcache.chimera.namespace.ChimeraCleaner cleaner \
        "-export \
         -refresh=${cleanerRefresh} \
         -recover=${cleanerRecover} \
         -reportRemove=broadcast \
         -poolTimeout=${cleanerPoolTimeout}   \
         -processFilesPerRun=${cleanerProcessFilesPerRun} \
         -chimeraConfig=${config}/chimera-config.xml \
    "

#
# dirDomain
#

create org.dcache.chimera.namespace.DirectoryLookUpPool dirLookupPool \
	"-chimeraConfig=${config}/chimera-config.xml"
#
# Billing
#
check -strong billingDb
#
create diskCacheV111.cells.BillingCell billing "${billingDb} -printMode=2"

#
#    dCap    D o o r
#
create dmg.cells.services.login.LoginManager DCap \
            "${dCapPort} \
             diskCacheV111.doors.DCapDoor \
             -prot=telnet -localOk    \
             -interpreter=diskCacheV111.doors.DCapDoorInterpreterV3 \
             -maxLogin=1024           \
             -clientVersion=0.0       \
             -brokerUpdateTime=30     \
             -protocolFamily=dcap     \
             -protocolVersion=3.1     \
             -poolProxy=PoolManager   \
             "

# NFSv4.1 door
#create org.dcache.himera.nfsv4.door.NFSv41Door NFSv41 \
#           "-himeraConfig=${himeraHome}/config.xml"

#
#
#    T h e  SSH D o o r
#
#   the rest is the ssh control path.
#   The current setup allows localhost login
#   without password. The 'server_key' and the
#   'host_key' are assumed to be in the .../jobs'
#   directory .
#
#    ssh-keygen -t ras1 -b  768 -f ./server_key -N ""
#    ssh-keygen -t ras1 -b 1024 -f ./host_key   -N ""
#
#    server_key :  768 bits
#    host_key   : 1024 bits
#
set context serverKeyFile     ${keyBase}/server_key
set context hostKeyFile       ${keyBase}/host_key
#
#  security cell could be acm as well for simple
#  password checks. For pam authentication one
#  needs to specify the 'pam' cell here'
#  
set env     AccessControlCell acm
set context userPasswordFile  cell:${AccessControlCell}
#
#
create dmg.cells.services.login.SshKeyManager    skm

#
create dmg.cells.services.login.LoginManager alm \
      "${adminPort}  \
       dmg.cells.services.login.StreamObjectCell \
       -prot=ssh -auth=dmg.cells.services.login.SshSAuth_A \
       diskCacheV111.admin.UserAdminShell"

create dmg.cells.services.login.user.AclCell ${AccessControlCell} \
       "${keyBase}/users -egpassword=${config}/passwd"

#
# Monitor Cell
#
#create org.dcache.monitor.TestMonitor Monitor

#
# Httpd cell
#

create dmg.cells.network.TopoCell topo "none -update=100 -export"
create dmg.cells.services.login.LoginBroker LoginBroker "default -export"
create dmg.cells.services.login.LoginBroker srm-LoginBroker "default -export"
#
define context TransferObserverSetup endDefine
  table define large 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16
  table define small 6,8,4,5,9,10,11,15
endDefine
create diskCacheV111.cells.TransferObserverV1 TransferObserver \
              "default \
               -loginBroker=LoginBroker \
               -update=60 \
               -fieldMap=diskCacheV111.util.MapInfoFields \
               -mapFile=/etc/passwd "

#
#   The web server part
#
set context -c styles ${ourHomeDir}/docs/styles
define context httpdSetup endDefine
   set alias homeerror context home.html
   set alias <home> file ${config}/../docs/skins/home-skin-basic.html -onError=homeerror
   set alias docs directory ${config}/../docs
   set alias images directory ${images}
   set alias styles directory ${styles}
   set alias offline context offline.html
   set alias context context *
   set alias <default> context home.html
   set alias cellInfo  context cellInfoTable.html  -onError=offline
   set alias usageInfo context poolUsageTable.html -onError=offline
   set alias queueInfo context poolQueueTable.html -onError=offline
   set alias poolInfo class diskCacheV111.poolManager.HttpPoolMgrEngineV3
   set alias billing  class diskCacheV111.cells.HttpBillingEngine
   set alias flushManager class diskCacheV111.hsmControl.flush.HttpHsmFlushMgrEngineV1 mgr=hfc css=default
   set alias pools class diskCacheV111.services.web.PoolInfoObserverEngineV2 css=default
   set alias statistics directory ${statisticsLocation}
   set update 60
endDefine

#  set alias system   class dmg.cells.services.HttpSystemService

define context home.html endDefine
<html>
<head><title>Online dCache Home</title></head>
<body background="/images/bg.jpg" text="#000000" link="#000000" vlink="#000000" alink="#000000">

<br><br><br>

<center>
<table border="1" width="40%">
<tr>
<td align="center" valign="middle" >
<br><br>
<img src="/images/eagle-main.gif"><br><br>

<table>
<tr>
<td>
<a href="/cellInfo"><h1>Cell Services</h1></a>
<a href="/usageInfo"><h1>Pool (Space) Usage</h1></a>
<a href="/queueInfo"><h1>Pool Request Queues</h1></a>
<a href="/poolInfo"><h1>Pools</h1></a>
<a href="/billing/"><h1>Actions Log</h1></a>
<a href="/poolInfo/restoreHandler/*"><h1>Restore Queue</h1></a>
<a href="/poolInfo/restoreHandler/lazy"><h1>Lazy Restore Queue</h1></a>
</td></tr>
</table>
<br>

</td></tr>
</table>

</center>
<br><br><br>
<hr>
<!--
<address><a href="/system/">system</a></address>
-->
</body>
</html>
endDefine

define context offline.html endDefine

<html>
<head><title>dCache OFFLINE</title></head>
<body background="/images/bg.jpg">
<center><img src="/images/eagle-main.gif"></center>
<p>
<center>
<table border=0 width="80%">
<tr>
<td align=right width="50%"><img src="/images/trudey.gif"></td>
<td align=left width="50%"><img src="/images/sorry.gif"></td>
</tr>
</table>
</center>
</body>
</html>
endDefine

define context online.html endDefine
<html>
<head><title>dCache OFFLINE</title></head>
<body bgcolor=blue >
<center><img src="/images/eagle_logo.gif"></center>
<p>
<center>
<table border=0 width="90%" cellspacing=0 cellpadding=6>
<tr>
<td bgcolor=yellow align=left width="50%">Pool : poolA</td>
<td bgcolor=yellow align=right width="50%">4/5/2001</td>
</tr>
</table>
</center>
</body>
</html>
endDefine

create dmg.cells.services.HttpServiceCell  httpd  ${httpdPort}

create diskCacheV111.cells.WebCollectorV3 collector \
    "PnfsManager \
     PoolManager \
     -loginBroker=LoginBroker,srm-LoginBroker \
     -replyObject"


sleep 10     
onerror shutdown 

#
#
copy file:${setupFile} context:setupContext
#
#  import the variables into our $context.
#  don't overwrite already existing variables.
#
import context -c setupContext 
#
#   Make sure we got what we need.
#

copy file:${pool} context:poolList

#

define context MoverMap endDefine
   movermap define DCap-3  diskCacheV111.movers.DCapProtocol_3_nio
endDefine

define context startPools endDefine
  create diskCacheV111.pools.MultiProtocolPoolV3 ${0} \
  "!MoverMap \
  ${1} \
  -recover-control=yes \
  -version=4 \
  -sticky=allowed \
  -sendHitInfoMessages=yes \
  -io-queues=dcapq,xrootdq,nfsq \
  -${2} -${3} -${4} -${5} -${6} -${7} -${8} \
"
endDefine
#
# oh weia
#
exec -loop=poolList context startPools


