set printout default 2
set printout CellGlue none
onerror shutdown
#
check -strong setupFile
#
copy file:${setupFile} context:setupContext
#
#  import the variables into our $context.
#  don't overwrite already existing variables.
#
import context -c setupContext
#
#   Make sure we got what we need.
#
check -strong serviceLocatorPort serviceLocatorHost

#
create dmg.cells.services.RoutingManager  RoutingMgr
#
#   The LocationManager Part
#
create dmg.cells.services.LocationManager lm \
       "${serviceLocatorHost} ${serviceLocatorPort}"
#
#   The PnfsManager Part
#
# The following cryptic lines will do this logic:
#
#  if  cacheInfo=companion
#            ==>  cacheInfoProvider=diskCacheV111.namespace.provider.SQLCacheLocationProviderFactory
#
#  else if    cacheInfo=<other> or missing
#            ==>  cacheInfoProvider=diskCacheV111.namespace.provider.BasicNameSpaceProviderFactory
#  -p.
#
onerror continue
set env cacheInfoProvider diskCacheV111.namespace.provider.BasicNameSpaceProviderFactory
define context setcontext.exe endDefine
  set env cacheInfoProvider diskCacheV111.namespace.provider.SQLCacheLocationProviderFactory
endDefine
eval ${cacheInfo} companion ==
exec context setcontext.exe -run -ifok=rc
onerror shutdown
#
# If companionDatabaseHost and defaultPnfsServer are not set in dCacheSetup, use localhost, for pnfs use /pnfs/fs:
#
onerror continue
set context -c companionDatabaseHost localhost
set context -c defaultPnfsServer localhost
set context -c pnfs /pnfs/fs
set context -c pnfsInfoExtractor diskCacheV111.util.OsmInfoExtractor
set context -c pnfsNumberOfThreads 4
set context -c namespaceProvider diskCacheV111.namespace.provider.BasicNameSpaceProviderFactory
set context -c pnfsDbUser        srmdcache
set context -c pnfsDbPassword    srmdcache
set context -c pnfsPasswordFile  ""
onerror shutdown
#
create diskCacheV111.namespace.PnfsManagerV3 PnfsManager \
       "${pnfsInfoExtractor} \
        -enableLargeFileSimulation \
        -storeFilesize  \
        -cmRelay=broadcast \
        -threads=${pnfsNumberOfThreads} \
        -default=${defaultPnfsServer} \
        -pnfs=${pnfs} \
        -namespace-provider=${namespaceProvider} \
        -cachelocation-provider=${cacheInfoProvider} \
        -cachelocation-provider-dbURL=jdbc:postgresql://${companionDatabaseHost}/companion \
        -cachelocation-provider-jdbcDrv=org.postgresql.Driver \
        -cachelocation-provider-dbUser=${pnfsDbUser} \
        -cachelocation-provider-dbPass=${pnfsDbPassword} \
        -cachelocation-provider-pgPass=${pnfsPasswordFile}  \
       "
#
#   The 'remove' handler (informs the dCache about pfns removes)
#
# Default value to be backwards compatible:
onerror continue
set context -c trash ""
set context -c cleanerDB /opt/pnfsdb/pnfs/trash/2
set context -c cleanerRefresh              120
set context -c cleanerRecover              240
set context -c cleanerPoolTimeout          100
set context -c cleanerProcessFilesPerRun   500
set context -c cleanerArchive             none
onerror shutdown

onerror continue
create diskCacheV111.cells.CleanerV2 cleaner \
        "default \
         -export \
         -trash=${trash} \
	 -refresh=${cleanerRefresh} \
         -recover=${cleanerRecover} \
	 -db=${cleanerDB} \
         -reportRemove=broadcast \
         -poolTimeout=${cleanerPoolTimeout}   \
         -processFilesPerRun=${cleanerProcessFilesPerRun} \
         -archive=${cleanerArchive} \
	"
#
