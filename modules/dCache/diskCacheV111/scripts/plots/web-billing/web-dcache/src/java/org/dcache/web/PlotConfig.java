/*
COPYRIGHT STATUS:
  Dec 1st 2001, Fermi National Accelerator Laboratory (FNAL) documents and
  software are sponsored by the U.S. Department of Energy under Contract No.
  DE-AC02-76CH03000. Therefore, the U.S. Government retains a  world-wide
  non-exclusive, royalty-free license to publish or reproduce these documents
  and software for U.S. Government purposes.  All documents and software
  available from this server are protected under the U.S. and Foreign
  Copyright Laws, and FNAL reserves all rights.


 Distribution of the software available from this server is free of
 charge subject to the user following the terms of the Fermitools
 Software Legal Information.

 Redistribution and/or modification of the software shall be accompanied
 by the Fermitools Software Legal Information  (including the copyright
 notice).

 The user is asked to feed back problems, benefits, and/or suggestions
 about the software to the Fermilab Software Providers.


 Neither the name of Fermilab, the  URA, nor the names of the contributors
 may be used to endorse or promote products derived from this software
 without specific prior written permission.



  DISCLAIMER OF LIABILITY (BSD):

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  "AS IS" AND ANY EXPRESS OR IMPLIED  WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED  WARRANTIES OF MERCHANTABILITY AND FITNESS
  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL FERMILAB,
  OR THE URA, OR THE U.S. DEPARTMENT of ENERGY, OR CONTRIBUTORS BE LIABLE
  FOR  ANY  DIRECT, INDIRECT,  INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
  OF SUBSTITUTE  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY  OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE  POSSIBILITY OF SUCH DAMAGE.


  Liabilities of the Government:

  This software is provided by URA, independent from its Prime Contract
  with the U.S. Department of Energy. URA is acting independently from
  the Government and in its own private capacity and is not acting on
  behalf of the U.S. Government, nor as its contractor nor its agent.
  Correspondingly, it is understood and agreed that the U.S. Government
  has no connection to this software and in no manner whatsoever shall
  be liable for nor assume any responsibility or obligation for any claim,
  cost, or damages arising out of or resulting from the use of the software
  available from this server.


  Export Control:

  All documents and software available from this server are subject to U.S.
  export control laws.  Anyone downloading information from this server is
  obligated to secure any necessary Government licenses before exporting
  documents or software obtained from this server.
 */
/**
 *
 */
package org.dcache.web;

import java.io.*;
import java.net.*;

import org.mozilla.javascript.*;
import org.apache.xmlbeans.*;


/*
 evaluateReader

public final java.lang.Object evaluateReader(Scriptable scope,
                                             java.io.Reader in,
                                             java.lang.String sourceName,
                                             int lineno,
                                             java.lang.Object securityDomain)
                                      throws java.io.IOException

    Evaluate a reader as JavaScript source. All characters of the reader are consumed.

    Parameters:
        scope - the scope to execute in
        in - the Reader to get JavaScript source from
        sourceName - a string describing the source, such as a filename
        lineno - the starting line number
        securityDomain - an arbitrary object that specifies security information about the origin or owner of the script.
        For implementations that don't care about security, this value may be null.
    Returns:
        the result of evaluating the source
    Throws:
        java.io.IOException - if an IOException was generated by the Reader


*/

/**
 * @author podstvkv
 *
 */
public class PlotConfig
{
    Scriptable scope;
    Function processFunction;
    Function getIdsFunction;
    Function getPlotTitleFunction;
    Function getPlotDataSourceFunction;
    Function getGnuSetupFunction;
    Function getGnuDataSetFunction;

    /**
     * Processes the configuration file
     * @param scriptName
     * @throws Exception
     */
    public PlotConfig(String scriptName)
        throws Exception
    {
        // Create and enter a Context.
        // A Context stores information about the execution environment of a script.
        Context cx = Context.enter();
        try {
            // Initialize the standard objects (Object, Function, etc.)
            // This must be done before scripts can be executed.
            // The null parameter tells initStandardObjects to create and return
            // a scope object that we use in later calls.
            scope = cx.initStandardObjects();
            //
            // Add a global variable "out" that is a JavaScript reflection of System.out
            //
            Object jsOut = Context.javaToJS(System.out, scope);
            ScriptableObject.putProperty(scope, "out", jsOut);
            //
            // Evaluating a script
            //
            Object result = cx.evaluateReader(scope, new FileReader(scriptName), scriptName, 1, null);
            System.err.println("cx.toString(result)="+Context.toString(result));

            processFunction           = getFunction(scope,"process");
            getIdsFunction            = getFunction(scope,"getIds");
            getPlotTitleFunction      = getFunction(scope,"getPlotTitle");
            getPlotDataSourceFunction = getFunction(scope,"getPlotDataSource");
            getGnuSetupFunction       = getFunction(scope,"getGnuSetup");
            getGnuDataSetFunction     = getFunction(scope,"getGnuDataSet");
        } finally {
            // Exit the Context
            Context.exit();
        }
    }


    /**
     * Builds XML object from the specified URL
     * @param name
     * @return
     * @throws IOException
     * @throws XmlException
     */
    public XmlObject getUrl(String name)
        throws IOException,XmlException
    {
        URL url;
        try {
            url = new URL(name);
        }
        catch (MalformedURLException mue) {
            System.out.println("Error: Bad URL generation:" + mue);
            return null;
        }
        XmlObject doc = XmlObject.Factory.parse(url);
        return doc;
    }


    /**
     * Builds XML object from the specified file
     * @param name
     * @return
     * @throws IOException
     * @throws XmlException
     */
    public XmlObject getXmlDoc(String name)
        throws IOException,XmlException
    {
        XmlObject doc = XmlObject.Factory.parse(new File(name));
        return doc;
    }


    /*
     * Gets the function from the script by name
     */
    private Function getFunction(Scriptable scope, String fcn)
        throws Exception
    {
        Object o=scope.get(fcn, scope);

        if (!(o instanceof Function))
            {
                throw new Exception("Error in script: No function "+fcn+" defined");
            }
        return (Function)o;
    }


    /**
     * Gets the array of the plot IDs
     * @return
     */
    public String[] getIds()
    {
        Context ctx = Context.enter();
        NativeArray result=(NativeArray)getIdsFunction.call(ctx,scope,scope,null);
        String [] ids = new String[(int)result.getLength()];
        for (int i = 0; i < result.getLength(); i++) {
            ids[i]=(result.get(i,scope)).toString();
        }
        Context.exit();
        return ids;
    }


    /**
     * Gets the plot datasource array by the plot ID
     * @param id
     * @return
     */
    public String[][] getPlotDataSource(String id)
    {
        Context ctx = Context.enter();
        NativeArray result=(NativeArray)getPlotDataSourceFunction.call(ctx, scope, scope, new Object[]{ id });
//        String [] ids = new String[(int)result.getLength()];
//        for (int i = 0; i < result.getLength(); i++) {
//            ids[i]=(result.get(i,scope)).toString();
//        }
        String[][] ids = new String[(int)result.getLength()][];    // Declare and create array of arrays of Java Strings
        for (int i = 0; i < result.getLength(); i++) {             // Loop through array of arrays
            NativeArray ri = (NativeArray)result.get(i,scope);     // Declare and get an element - JS native array
            ids[i] = new String[(int)ri.getLength()];              // Create an array of Java Strings
            for (int j = 0; j < ri.getLength(); j++) {             // Loop through array of JS objects
                ids[i][j] =(ri.get(j,scope)).toString();           // Get an element of JS native array, convert to String and store the reference in Java array
            }
        }
        Context.exit();
        return ids;
    }


    /**
     * Gets the gnuplot setup commands by the plot ID
     * @param id
     * @return
     */
    public String[] getGnuSetup(String id)
    {
        Context ctx = Context.enter();
        NativeArray result=(NativeArray)getGnuSetupFunction.call(ctx, scope, scope, new Object[]{ id });
        String [] ids = new String[(int)result.getLength()];
        for (int i = 0; i < result.getLength(); i++) {
            ids[i]=(result.get(i,scope)).toString();
        }
        Context.exit();
        return ids;
    }


    /**
     * Gets the gnuplot datasets by the plot ID
     * @param id
     * @return
     */
//    public String[] getGnuDataSet(String id)
//    {
//        Context ctx = Context.enter();
//        NativeArray result=(NativeArray)getGnuDataSetFunction.call(ctx, scope, scope, new Object[]{ id });
//        String [] ids = new String[(int)result.getLength()];
//        for (int i = 0; i < result.getLength(); i++) {
//            ids[i]=(result.get(i,scope)).toString();
//        }
//        Context.exit();
//        return ids;
//    }
    public String[][] getGnuDataSet(String id)
    {
        Context ctx = Context.enter();
        NativeArray result = (NativeArray)getGnuDataSetFunction.call(ctx, scope, scope, new Object[]{ id }); // Declare and get an array of JS native arrays
        String[][] ids = new String[(int)result.getLength()][];    // Declare and create array of arrays of Java Strings
        for (int i = 0; i < result.getLength(); i++) {             // Loop through array of arrays
            NativeArray ri = (NativeArray)result.get(i,scope);     // Declare and get an element - JS native array
            ids[i] = new String[(int)ri.getLength()];              // Create an array of Java Strings
            for (int j = 0; j < ri.getLength(); j++) {             // Loop through array of JS objects
                ids[i][j] =(ri.get(j,scope)).toString();           // Get an element of JS native array, convert to String and store the reference in Java array
            }
        }
        Context.exit();
        return ids;
    }


    /**
     * Gets the plot title by the plot ID
     * @param id
     * @return
     */
    public String getPlotTitle(String id)
    {
        Context ctx = Context.enter();
        Object result = (Object)getPlotTitleFunction.call(ctx, scope, scope, new Object[]{ id });
        Context.exit();
        return Context.toString(result);
    }


    /**
     * Processes the XML configuration file
     * Does not do any modifications at the moment
     * Potentially can do some preprocessing
     * @param document
     */
    public void processXml(XmlObject document)
    {
        Context ctx = Context.enter();
        Object result = processFunction.call(ctx,scope,scope,new Object[]{ document });
        Context.exit();
    }




    /**
     * Test program for the class
     * @param args
     */
    public static void main(String[] args) {

//        String sname = args[0];
//        String xname = args[1];
//        File cdir = new File(".");
//        String[] flist = cdir.list();
//        for (String n : flist) {
//            System.err.println("Found: "+n);
//        }

        String sname = "WebContent/plotConfig.js";
        String xname = "WebContent/plotConfig.xml";

        try {
            PlotConfig tst = new PlotConfig(sname);  // Requires JavaScript script name
            XmlObject xo = tst.getXmlDoc(xname);        // Requires XML configuration file name

            tst.processXml(xo);

            // Get IDs
            String[] ids = tst.getIds();

            for (String id : ids) {
                System.out.println("Getting '" + id + "'");
                // Get Plot Title
                String tt = tst.getPlotTitle(id);
                System.out.println("Getting '" + tt + "'");

                // Get datasources
                String[][] dss = tst.getPlotDataSource(id);

                for (String[] ds : dss) {
                    System.out.print("Getting ");
                    for (String dd : ds) {
                        System.out.printf("'%s' ", dd);
                    }
                    System.out.println();
                }
                // Get Gnuplot setup
                String[] cmd = tst.getGnuSetup(id);

                for (String cc : cmd) {
                    System.out.println("Getting '" + cc + "'");
                }
                // Get datasets
                String[][] dds = tst.getGnuDataSet(id);

                for (String[] da : dds) {
                    System.out.print("Getting ");
                    for (String dd : da) {
                        System.out.printf("'%s' ", dd);
                    }
                    System.out.println();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
