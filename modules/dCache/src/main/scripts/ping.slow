#!/bin/sh
if [ "${1:-}" = "-x" ] ; then set -xv; shift; fi

node=`uname -n| sed -e 's/\([^\.]\)\..*/\1/'`

if [ -r /usr/local/bin/ENSTORE_HOME ]; then
   . /usr/local/bin/ENSTORE_HOME
else
   echo `date` ERROR: Can NOT determine E_H.  Add /usr/local/bin/ENSTORE_HOME link
   exit 1
fi

set +u
. $E_H/dcache-deploy/scripts/setup-enstore
. $E_H/dcache-deploy/config/dCacheSetup
. $E_H/dcache-deploy/dcache-fermi-config/mail_people
set -u  

today=`date +'%j'`
export today
node=`uname -n| sed -e 's/\([^\.]\)\..*/\1/'`

raise_alarm() {
    msg=$1
    E=$ENSTORE_CONFIG_HOST
    ENSTORE_CONFIG_HOST=$DCACHE_E_CONFIG_HOST
    P=$ENSTORE_CONFIG_PORT
    ENSTORE_CONFIG_PORT=$DCACHE_E_CONFIG_PORT
    enstore alarm --raise --severity "A" --root-error "$msg"
    ENSTORE_CONFIG_HOST=$E
    ENSTORE_CONFIG_PORT=$P
}


#====  Check if anything is slow (pings greater than $slowness)

output=~enstore/tomcat/latest/webapps/ROOT/pingslow.html
toutput=/tmp/pingslow.html
soutput=/tmp/ping.slow.`date +'%s'`
echo `date` >$soutput
echo >> $soutput
size0=`stat  $soutput|grep Size |awk '{print $2 }'`

badfnt=\"#FF0000\"  #red
goodfnt=\"#006600\" #green 
fnt=\"#000066\"     #blue

slowness=10000

cmd="exit
set dest collector@httpdDomain
dump info $slowness
exit
exit"
echo  collector@httpdDomain ssh -c blowfish -p $sshPort $serviceLocatorHost
echo "$cmd" | ssh -c blowfish -p $sshPort $serviceLocatorHost 2>/dev/null |tr -d "\r"|grep Domain | egrep -v 'set dest|dump info|exit' >> $soutput 2>&1
size=`stat  $soutput|grep Size |awk '{print $2 }'`
if [ $size -eq  $size0 ]; then
   rm $soutput
else
   echo >> $soutput
   echo >> $soutput
fi

rm -f $toutput
echo "<html><head><title>dCache Slow Pings</title></head>" >> $toutput
echo '<body text=$fnt bgcolor="#ffffff" link="#0000ef" vlink="#55188a" alink="#ff0000">' >> $toutput
echo "<h1> dCache pings longer than $slowness ms.   <p><p><p> </h1>" >> $toutput
echo "<h2> Last checked  at   `date` <p><p><p> </h2> <pre>" >> $toutput
echo >> $toutput
echo >> $toutput
cat /tmp/ping.slow.* >> $toutput 2>/dev/null
echo '</pre></body></html>' >> $toutput
cp $toutput $output


#====  Now check if everything is alive

ALIVE=/tmp/ping.notalive
mkdir -p $ALIVE 2>/dev/null
bump() { if [ ! -r $ALIVE/$1 ]; then echo '0'>$ALIVE/$1; fi
         count=`cat $ALIVE/$1`
         count=`expr $count + 1`
         echo $count >|$ALIVE/$1
       }
zero() { echo 0 >$ALIVE/$1; }
getc() { if [ ! -r $ALIVE/$1 ]; then zero $1; fi
         cat $ALIVE/$1
       }
rmc()  { rm -f $ALIVE/$1 2>/dev/null ; }

dmail()    { touch $ALIVE/$1.down.$today; }
ckmail()   { if [ -r $ALIVE/$1.down.$today ]; then echo yes; else echo no; fi ; }
rmdmail()  { rm -f $ALIVE/$1.down.* 2>/dev/null ; }


restart() {
         echo `date` ============================================================= >> $aoutput
         echo `date` Corrective action for $1 in $serviceLocatorHost dcache
         echo `date` Corrective action for $1 in $serviceLocatorHost dcache >> $aoutput
         for cmd in "/usr/local/bin/dgang -$2 stop  fifo $1" "/usr/local/bin/dgang -$2 start fifo $1"; do
             echo `date` $cmd  >> $aoutput
             #exec $cmd >> $aoutput
         done
         echo `date` End corrective action for $domainbase >> $aoutput
         echo `date` ============================================================= >> $aoutput
	 if [ `ckmail ${domainbase}Domain` = "no" ]; then
	    dmail ${domainbase}Domain
	    touch $mailit
         fi
       }

soutput=$ALIVE/`date +'%s'`
aoutput=$ALIVE/alarm.`date +'%s'`
mailit=$ALIVE/alarm.mailit
rm -f $soutput $aoutput $mailit 2>/dev/null

size0=0
cmd="exit
set dest collector@httpdDomain
dump info
exit
exit"
echo  collector@httpdDomain ssh -c blowfish -p $sshPort $serviceLocatorHost
echo "$cmd" | ssh -c blowfish -p $sshPort $serviceLocatorHost 2>/dev/null |tr -d "\r"|grep Domain | egrep -v 'set dest|dump info|exit' >> $soutput 2>&1
size=`stat  $soutput|grep Size |awk '{print $2 }'`
if [ $size -ne  $size0 ]; then
#                            domain cell state pending threads revision class pingtime
   cat $soutput | while read domain cell rest; do 
     pingtime=`echo $rest | awk '{print $NF}'`
     expr $pingtime + 1  >/dev/null 2>&1 
     if [ $? -ne 0 ]; then 
       echo `date` PARSE ERROR \"$domain $cell $rest\" gives  \"pingtime=$pingtime\"  resetting to pingtime=\"\"
       pingtime=""
     fi
     echo $domain $cell pingtime=$pingtime
#     #######HACK FOR SRM1 NOT WORKING
#     if [ `echo $domain | grep -c 'srm1'` -ne 0 ]; then pingtime=9999;fi
#     #######ENDHACK FOR SRM1 NOT WORKING
     if [ -z "${pingtime:-}" ];then 
	msg="$domain $cell OFFLINE"
	raise_alarm "$msg"
	bump $domain
        echo `date` $msg  Count=`getc $domain`  in $serviceLocatorHost dcache
        echo `date` $msg  Count=`getc $domain`  in $serviceLocatorHost dcache >> $aoutput
     else 
        rmc $domain
	rmdmail $domain
     fi
   done
fi

down=`ls -l $ALIVE/*Domain 2>/dev/null | wc | awk '{print $1}'`
echo `date` There are $down domains that are offline in $serviceLocatorHost dcache

MAXDOWN=1000
if   [ $down -gt $MAXDOWN ];then
       echo `date` TOO MANY \($down\) DOMAINS DOWN. Not attempting auto restart of anything

elif [ $down -gt 0 ];then

   # try restarting the admin domain
   # dangerous

   # try restarting the dCache domain
   # dangerous
 
   # try restarting the http domain
   # dangerous
  
   # try restarting the skmslmDomain
   # dangerous

   # try restarting the dcap domain
   MINDOWN=3
   for f in $ALIVE/door*Domain; do 
       if [ `echo $f | grep -c '*Domain'` -ne 0 ]; then
          echo `date` All DCap domains pinging online in $serviceLocatorHost dcache
          continue
       fi
       domain=`basename $f`
       count=`getc $domain`
       domainbase=`echo $domain | sed -e 's/Domain//'`
       if [ $count -ge $MINDOWN ]; then
          restart $domainbase admin
          rmc $domain
       fi
   done

# try restarting the ftp doors
   MINDOWN=3
   for f in $ALIVE/*ftp*Domain; do 
       if [ `echo $f | grep -c '*Domain'` -ne 0 ]; then
          echo `date` All FTP domains pinging online
          continue
       fi
       domain=`basename $f`
       count=`getc $domain`
       domainbase=`echo $domain | sed -e 's/Domain//'`
       if [ $count -ge $MINDOWN ]; then
          restart $domainbase admin
          rmc $domain
       fi
   done

# try restarting the srm domains
   MINDOWN=3
   for f in $ALIVE/srm*Domain; do 
       if [ `echo $f | grep -c '*Domain'` -ne 0 ]; then
          echo `date` All SRM domains pinging online
          continue
       fi
       domain=`basename $f`
       count=`getc $domain`
       domainbase=`echo $domain | sed -e 's/Domain//'`
       if [ $count -ge $MINDOWN ]; then
          restart $domainbase admin
          rmc $domain
       fi
   done

   # try restarting pnfs
   MINDOWN=3
   for f in $ALIVE/srm*Domain; do 
       if [ `echo $f | grep -c '*Domain'` -ne 0 ]; then
          echo `date` All PNFS domains pinging online
          continue
       fi
       domain=`basename $f`
       count=`getc $domain`
       domainbase=`echo $domain | sed -e 's/Domain//'`
       if [ $count -ge $MINDOWN ]; then
          restart $domainbase $domain
          rmc $domain
       fi
   done

fi

if [ -r $aoutput -a -r $mailit ]; then 
     echo 
     echo `date` Sening mail -s "$serviceLocatorHost DOMAINS OFFLINE!" to $mail_people
     cat $aoutput
     echo `date` End of mail
     echo 

fi
rm -f $soutput $aoutput $mailit 2>/dev/null
