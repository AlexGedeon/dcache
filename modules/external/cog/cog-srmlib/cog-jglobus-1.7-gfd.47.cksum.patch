diff -Naur --exclude=CVS jglobus-old/src/org/globus/ftp/FeatureList.java jglobus-1.7.0/src/org/globus/ftp/FeatureList.java
--- jglobus-old/src/org/globus/ftp/FeatureList.java	2010-02-19 16:40:48.000000000 -0600
+++ jglobus-1.7.0/src/org/globus/ftp/FeatureList.java	2010-02-23 11:17:19.000000000 -0600
@@ -15,7 +15,8 @@
  */
 package org.globus.ftp;
 
-import java.util.Vector;
+import java.util.List;
+import java.util.ArrayList;
 import java.util.StringTokenizer;
 
 /**
@@ -32,6 +33,62 @@
 
 public class FeatureList {
 
+    /**
+     * RFC 2389 specified the following syntax for FEAT responce
+     * <pre>
+     * feat-response   = error-response / no-features / feature-listing
+     *  no-features     = "211" SP *TCHAR CRLF
+     *  feature-listing = "211-" *TCHAR CRLF
+     *                    1*( SP feature CRLF )
+     *                    "211 End" CRLF
+     *  feature         = feature-label [ SP feature-parms ]
+     *  feature-label   = 1*VCHAR
+     *  feature-parms   = 1*TCHAR
+     * </pre>
+     *  Feature class represence each individual feature and contain two fields
+     *  required label and optional parms
+     *
+     */
+    public static final class Feature {
+
+        private final String label;
+
+        private final String parms;
+
+        private Feature (String label) {
+
+        this.label = label;
+        this.parms = null;
+
+        }
+
+        private Feature (String label, String parms) {
+
+        this.label = label;
+        this.parms = parms;
+
+        }
+
+        /**
+         * @return the name
+         */
+        public String getLabel() {
+
+        return label;
+
+        }
+
+        /**
+         * @return the qualifiers, null if no qualifiers
+         */
+        public String getParms() {
+
+        return parms;
+
+        }
+    }
+
+    // well known labels
     public static final String SIZE = "SIZE";
     public static final String MDTM = "MDTM";
     public static final String PARALLEL = "PARALLEL";
@@ -43,15 +100,14 @@
     public static final String PIPE = "PIPE";
     public static final String MODEX = "MODEX";
     public static final String GETPUT = "GETPUT";
+    public static final String CKSUM =  "CKSUM";
 
-    protected Vector featVector;
+    protected final List<Feature> features = new ArrayList();
 
     public FeatureList(String featReplyMsg) {
 
-	featVector = new Vector();
-
 	StringTokenizer responseTokenizer
-	    = new StringTokenizer(featReplyMsg, 
+	    = new StringTokenizer(featReplyMsg,
 				  System.getProperty("line.separator"));
 
 	// ignore the first part of the message
@@ -60,18 +116,64 @@
 	}
 
 	while ( responseTokenizer.hasMoreElements() ) {
+
 	    String line = (String) responseTokenizer.nextElement();
 	    line = line.trim().toUpperCase();
-	    if ( !line.startsWith( "211 END" ) ) {
-		featVector.add( line );
-	    }
+	    if ( line.startsWith( "211 END" ) ) {
+            break;
+        }
+        String[] splitFeature = line.split(" ");
+
+        if( splitFeature.length ==2) {
+            features.add(new Feature(splitFeature[0], splitFeature[1]));
+        } else {
+            features.add(new Feature(line));
+        }
+
 	}
     }
 
-    public boolean contains(String feature) {
-	if (feature == null) {
-	    throw new IllegalArgumentException();
+    public boolean contains(String label) {
+
+	if (label == null) {
+	    throw new IllegalArgumentException("feature label is null");
 	}
-	return featVector.contains(feature.toUpperCase());
-    }    
+
+    label = label.toUpperCase();
+
+    for( Feature feature:features ) {
+        if(feature.getLabel().equals(label)) {
+            return true;
+        }
+    }
+
+    return false;
+
+    }
+
+    /**
+     * Get all features that have label equal to the argument
+     * Note that  RFC 2389 does not require a feature with a
+     * given label to appear only once
+     * @param label
+     * @return List of found features with given label in the same order
+     * as they were given to us by the server
+     */
+    public List<Feature> getFeature(String label) {
+
+	if (label == null) {
+	    throw new IllegalArgumentException("feature label is null");
+	}
+
+    label = label.toUpperCase();
+    List<Feature> foundFeatures = new ArrayList();
+    for( Feature feature:features ) {
+        if(feature.getLabel().equals(label)) {
+            foundFeatures.add(feature);
+        }
+    }
+
+    return foundFeatures;
+
+    }
 }
diff -Naur --exclude=CVS jglobus-old/src/org/globus/ftp/FTPClient.java jglobus-1.7.0/src/org/globus/ftp/FTPClient.java
--- jglobus-old/src/org/globus/ftp/FTPClient.java	2010-02-19 16:40:48.000000000 -0600
+++ jglobus-1.7.0/src/org/globus/ftp/FTPClient.java	2010-02-23 11:16:54.000000000 -0600
@@ -25,6 +25,9 @@
 import java.util.Date;
 import java.util.StringTokenizer;
 import java.util.Vector;
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Collections;
 import java.util.TimeZone;
 import java.util.regex.Pattern;
 import java.util.regex.Matcher;
@@ -78,6 +81,12 @@
      */
     protected boolean useAllo;
 
+    /**
+     * List of the checksum algorithms supported by the server as described in
+     * {@link http://www.ogf.org/documents/GFD.47.pdf [GridFTP v2 Protocol Description]}
+     */
+    protected List<String> algorithms;
+
     /* for subclasses */
     protected FTPClient() {
     }
@@ -2048,5 +2057,179 @@
     public boolean getUseAllo() {
         return this.useAllo;
     }
-    
+
+
+    /**
+     *  According to
+     * {@link http://www.ogf.org/documents/GFD.47.pdf [GridFTP v2 Protocol Description]}
+     * checksum feature has the following syntax:
+     * <pre>
+     * CKSUM <algorithm>[, …]
+     * </pre>
+     * getSupportedCksumAlgorithms parses checsum feauture parms and form a
+     * list of checksum algorithms supported by the server
+     * @return a list of checksum algorithms supported by the server in the order
+     * specified by the server
+     * @throws org.globus.ftp.exception.ClientException
+     * @throws org.globus.ftp.exception.ServerException
+     * @throws java.io.IOException
+     */
+    public List<String> getSupportedCksumAlgorithms()
+            throws ClientException, ServerException, IOException {
+
+        if(algorithms != null) {
+            return algorithms;
+        }
+
+        // check if the CKSUM algorithm is supported by the server
+        List<FeatureList.Feature> cksumFeature =
+                getFeatureList().getFeature(FeatureList.CKSUM);
+        if(cksumFeature == null) {
+            algorithms = Collections.emptyList();
+            return algorithms;
+        }
+
+        algorithms = new ArrayList();
+        for(FeatureList.Feature feature:cksumFeature) {
+            String[] parms = feature.getParms().split(",");
+            for (String parm: parms) {
+                algorithms.add(parm);
+            }
+        }
+        return algorithms;
+    }
+
+    public boolean isCksumAlgorithmSupported(String algorithm)
+            throws ClientException, ServerException, IOException {
+        return getSupportedCksumAlgorithms().contains(algorithm.toUpperCase());
+    }
+
+    private void checkCksumSupport(String algorithm)
+            throws ClientException, ServerException, IOException {
+
+        // check if the CKSUM is supported by the server
+        if (! isFeatureSupported(FeatureList.CKSUM) ) {
+            throw new ClientException(
+                                ClientException.OTHER,
+                                FeatureList.CKSUM+" is not supported by server");
+        }
+
+        // check if the CKSUM algorithm is supported by the server
+        if(! isCksumAlgorithmSupported(algorithm) ) {
+            throw new ClientException(
+                                ClientException.OTHER,
+                                FeatureList.CKSUM+" algorithm "+algorithm+
+                                " is not supported by server");
+        }
+
+    }
+
+    /**
+     * implement GridFTP v2 CKSM command from
+     * {@link http://www.ogf.org/documents/GFD.47.pdf [GridFTP v2 Protocol Description]}
+     * <pre>
+     * 5.1 CKSM
+     * This command is used by the client to request checksum calculation over a portion or
+     * whole file existing on the server. The syntax is:
+     * CKSM <algorithm> <offset> <length> <path> CRLF
+     * Server executes this command by calculating specified type of checksum over
+     * portion of the file starting at the offset and of the specified length. If length is –1,
+     * the checksum will be calculated through the end of the file. On success, the server
+     * replies with
+     * 2xx <checksum value>
+     * Actual format of checksum value depends on the algorithm used, but generally,
+     * hexadecimal representation should be used.
+     * </pre>
+     *
+     * @param algorithm ckeckum alorithm
+     * @param offset
+     * @param length
+     * @param path
+     * @return ckecksum value returned by the server
+     * @throws org.globus.ftp.exception.ClientException
+     * @throws org.globus.ftp.exception.ServerException
+     * @throws java.io.IOException
+     */
+    public String getChecksum(String algorithm,
+                              long offset,
+                              long length,
+                              String path)
+    throws ClientException, ServerException, IOException {
+
+        // check if we the cksum commands and specific algorithm are supported
+        checkCksumSupport(algorithm);
+
+        // form CKSM command
+        String parameters = String.format("%s %d %d %s",algorithm, offset,length,path);
+        Command cmd = new Command("CKSM", parameters);
+
+        // transfer command, obtain reply
+        Reply cksumReply = doCommand(cmd);
+
+        // check for error
+        if( !Reply.isPositiveCompletion(cksumReply) ) {
+            throw new ServerException(ServerException.SERVER_REFUSED,
+                    cksumReply.getMessage());
+        }
+
+        return cksumReply.getMessage();
+    }
+
+    /**
+     * GridFTP v2 CKSM command for the whole file
+     * @param  algorithm ckeckum alorithm
+     * @param  path
+     * @return ckecksum value returned by the server
+     * @throws org.globus.ftp.exception.ClientException
+     * @throws org.globus.ftp.exception.ServerException
+     * @throws java.io.IOException
+     */
+    public String getChecksum(String algorithm,
+                              String path)
+    throws ClientException, ServerException, IOException {
+        return getChecksum(algorithm,0,-1,path);
+    }
+
+    /**
+     * implement GridFTP v2 SCKS command as described in
+     * {@link http://www.ogf.org/documents/GFD.47.pdf [GridFTP v2 Protocol Description]}
+     * <pre>
+     * 5.2 SCKS
+     * This command is sent prior to upload command such as STOR, ESTO, PUT. It is used
+     * to convey to the server that the checksum value for the file which is about to be
+     * uploaded. At the end of transfer, server will calculate checksum for the received file,
+     * and if it does not match, will consider the transfer to have failed. Syntax of the
+     * command is:
+     * SCKS <algorithm> <value> CRLF
+     * Actual format of checksum value depends on the algorithm used, but generally,
+     * hexadecimal representation should be used.
+     * </pre>
+     * @param algorithm
+     * @param value
+     * @throws org.globus.ftp.exception.ClientException
+     * @throws org.globus.ftp.exception.ServerException
+     * @throws java.io.IOException
+     */
+    public void setChecksum(String algorithm, String value)
+    throws ClientException, ServerException, IOException {
+
+        // check if we the cksum commands and specific algorithm are supported
+        checkCksumSupport(algorithm);
+
+        // form CKSM command
+        String parameters = String.format("%s %s",algorithm, value);
+        Command cmd = new Command("SCKS", parameters);
+
+        // transfer command, obtain reply
+        Reply cksumReply = doCommand(cmd);
+
+        // check for error
+        if( !Reply.isPositiveCompletion(cksumReply) ) {
+            throw new ServerException(ServerException.SERVER_REFUSED,
+                    cksumReply.getMessage());
+        }
+
+        return;
+    }
+
 } //FTPClient
