Only in cog-jglobus-1.4/src/org/globus/ftp/extended: GridFTPInputStream.java~
diff -ur /tmp/cog-jglobus-1.4/src/org/globus/ftp/FeatureList.java cog-jglobus-1.4/src/org/globus/ftp/FeatureList.java
--- /tmp/cog-jglobus-1.4/src/org/globus/ftp/FeatureList.java	2006-01-20 21:21:20.000000000 +0100
+++ cog-jglobus-1.4/src/org/globus/ftp/FeatureList.java	2007-05-20 14:41:57.096493163 +0200
@@ -41,6 +41,8 @@
     public static final String ABUF = "ABUF";
     public static final String DCAU = "DCAU";
     public static final String PIPE = "PIPE";
+    public static final String MODEX = "MODEX";
+    public static final String GETPUT = "GETPUT";
 
     protected Vector featVector;
 
Only in cog-jglobus-1.4/src/org/globus/ftp: FeatureList.java~
diff -ur /tmp/cog-jglobus-1.4/src/org/globus/ftp/FTPClient.java cog-jglobus-1.4/src/org/globus/ftp/FTPClient.java
--- /tmp/cog-jglobus-1.4/src/org/globus/ftp/FTPClient.java	2006-04-09 07:50:13.000000000 +0200
+++ cog-jglobus-1.4/src/org/globus/ftp/FTPClient.java	2007-05-22 11:31:26.833818007 +0200
@@ -26,6 +26,8 @@
 import java.util.StringTokenizer;
 import java.util.Vector;
 import java.util.TimeZone;
+import java.util.regex.Pattern;
+import java.util.regex.Matcher;
 import java.text.SimpleDateFormat;
 import java.text.ParseException;
 
@@ -803,26 +805,25 @@
         this.session.transferType = type;
     }
 
+    protected String getModeStr(int mode)
+    {
+        switch (mode) {
+        case Session.MODE_STREAM: 
+            return "S"; 
+        case Session.MODE_BLOCK: 
+            return "B";
+        default: 
+            throw new IllegalArgumentException("Bad mode: " + mode); 
+        }
+    }
+
     /**
      * Sets transfer mode.
      * @param mode should be {@link Session#MODE_STREAM MODE_STREAM}, 
      *                       {@link Session#MODE_BLOCK MODE_BLOCK}
      **/
-    public void setMode(int mode) throws IOException, ServerException {
-        
-        String modeStr = null;
-        switch (mode) {
-        case Session.MODE_STREAM :
-            modeStr = "S";
-            break;
-        case Session.MODE_BLOCK :
-            modeStr = "B";
-            break;
-        default :
-            throw new IllegalArgumentException("Bad mode: " + mode);
-        }
-        
-        actualSetMode(mode, modeStr);
+    public void setMode(int mode) throws IOException, ServerException {        
+        actualSetMode(mode, getModeStr(mode));
     }
 
     protected void actualSetMode(int mode, String modeStr)
@@ -1569,5 +1570,438 @@
     public boolean isActiveMode() {
         return (this.session.serverMode == Session.SERVER_ACTIVE);
     }
+
+
+    //////////////////////////////////////////////////////////////////////
+    // Implementation of GFD.47 compliant GETPUT support. The reason
+    // why this is implemented in FTPClient rather than GridFTPClient
+    // is, that GFD.47 support is detected via feature strings and is
+    // thus independent of GSI authentication.
+
+
+    /**
+     * Throws ServerException if GFD.47 GETPUT is not supported or
+     * cannot be used.
+     */
+    protected void checkGETPUTSupport() 
+        throws ServerException, IOException
+    {
+        if (!isFeatureSupported(FeatureList.GETPUT)) {
+            throw new ServerException(ServerException.UNSUPPORTED_FEATURE);
+        }
+        
+        if (controlChannel.isIPv6()) {
+            throw new ServerException(ServerException.UNSUPPORTED_FEATURE,
+                                      "Cannot use GridFTP2 with IP 6");
+        }
+    }
+
+    /**
+     * Regular expression for matching the port information of a
+     * GFD.47 127 reply.
+     */
+    public static final Pattern portPattern =
+        Pattern.compile("\\d+,\\d+,\\d+,\\d+,\\d+,\\d+");
+
+    /**
+     * Reads a GFD.47 compliant 127 reply and extracts the port
+     * information from it.
+     */
+    protected HostPort get127Reply()
+        throws ServerException, IOException, FTPReplyParseException
+    {
+        Reply reply = controlChannel.read();
+            
+        if (Reply.isTransientNegativeCompletion(reply)
+            || Reply.isPermanentNegativeCompletion(reply)) {
+            throw new ServerException(ServerException.SERVER_REFUSED,
+                                      reply.getMessage());
+        }
+            
+        if (reply.getCode() != 127) {
+            throw new ServerException(ServerException.WRONG_PROTOCOL,
+                                      reply.getMessage());
+        }
+            
+        Matcher matcher = portPattern.matcher(reply.getMessage());
+        if (!matcher.find()) {
+            throw new ServerException(ServerException.WRONG_PROTOCOL,
+                                      "Cannot parse 127 reply: " 
+                                      + reply.getMessage());
+        }
+
+        return new HostPort(matcher.group());
+    }    
+
+    /**
+     * Writes a GFD.47 compliant GET or PUT command to the control
+     * channel.
+     *
+     * @param command Either "GET" or "PUT", depending on the command to issue
+     * @param passive True if the "pasv" parameter should be used
+     * @param port If passive is false, this is the port for 
+     *             the "port" parameter
+     * @param mode The value for the "mode" parameter, or 0 if the 
+     *             parameter should not be specified
+     * @param path The value for the "path" parameter
+     */
+    private void issueGETPUT(String command, 
+                             boolean passive,
+                             HostPort port,
+                             int mode,
+                             String path)
+        throws IOException
+    {
+        Command cmd =
+            new Command(command, 
+                        (passive
+                         ? "pasv" 
+                         : ("port=" + port.toFtpCmdArgument())
+                         ) + ";" +
+                        "path=" + path + ";" +
+                        (mode > 0 
+                         ? "mode=" + getModeStr(mode) + ";"
+                         : ""));
+        controlChannel.write(cmd);
+    }
+
+    /**
+     * Retrieves a file using the GFD.47 (a.k.a GridFTP2) GET command.
+     *
+     * Notice that as a side effect this method may change the local
+     * server facade passive/active mode setting. The caller should
+     * not rely on this setting after call to get2.
+     *
+     * Even though the active/passive status of the current session is
+     * ignored for the actual transfer, it still has to be in a
+     * consistent state prior to calling gridftp2Get.
+     *
+     * @param remoteFileName file to retrieve
+     * @param passive whether to configure the server to be passive 
+     * @param sink data sink to store the file
+     * @param mListener marker listener
+     **/
+    public void get2(String remoteFileName,
+                     boolean passive,
+                     DataSink sink,
+                     MarkerListener mListener)
+        throws IOException,
+               ClientException,
+               ServerException 
+    {
+        int serverMode = session.serverMode;
+        HostPort serverAddress = session.serverAddress;
+
+        try {
+            // Can we use GETPUT?
+            checkGETPUTSupport();
+
+            // Check sanity of arguments
+            if (session.transferMode == GridFTPSession.MODE_EBLOCK && passive) {
+                throw new IllegalArgumentException("Sender must be active in extended block mode");
+            }
+
+            // All parameters set correctly (or still unset)?
+            Session localSession = localServer.getSession();
+            session.matches(localSession);
+
+            // Connection setup depends a lot on whether we use
+            // passive or active mode. The passive party needs to be
+            // configured before the active party.
+            if (passive) {
+                issueGETPUT("GET", true, null, 0, remoteFileName);
+                session.serverMode = Session.SERVER_PASSIVE; 
+                session.serverAddress = get127Reply();
+                setLocalActive();
+                localServer.store(sink);
+            } else {
+                HostPort hp = setLocalPassive();
+                localServer.store(sink);
+                issueGETPUT("GET", false, hp, 0, remoteFileName);
+                session.serverMode = Session.SERVER_ACTIVE;
+            }
+            
+            transferRunSingleThread(localServer.getControlChannel(),
+                                    mListener);
+            
+        } catch (FTPReplyParseException rpe) {
+            throw ServerException.embedFTPReplyParseException(rpe);
+        } finally {
+            session.serverMode = serverMode;
+            session.serverAddress = serverAddress;
+        }
+    }
+
+
+    /**
+     * Retrieves a file asynchronously using the GFD.47 (a.k.a
+     * GridFTP2) GET command.
+     *
+     * Notice that as a side effect this method may change the local
+     * server facade passive/active mode setting. The caller should
+     * not rely on this setting after call to gridftp2Get.
+     *
+     * Even though the active/passive status of the current session is
+     * ignored for the actual transfer, it still has to be in a
+     * consistent state prior to calling gridftp2Get.
+     *
+     * @param remoteFileName file to retrieve
+     * @param passive whether to configure the server to be passive 
+     * @param sink data sink to store the file
+     * @param mListener marker listener
+     **/
+    public TransferState asynchGet2(String remoteFileName,
+                                    boolean passive,
+                                    DataSink sink,
+                                    MarkerListener mListener)
+        throws IOException,
+               ClientException,
+               ServerException 
+    {
+        int serverMode = session.serverMode;
+        HostPort serverAddress = session.serverAddress;
+
+        try {
+        
+            // Can we use GETPUT?
+            checkGETPUTSupport();
+
+            // Check sanity of arguments
+            if (session.transferMode == GridFTPSession.MODE_EBLOCK && passive) {
+                throw new IllegalArgumentException("Sender must be active in extended block mode");
+            }
+
+            // All parameters set correctly (or still unset)?
+            Session localSession = localServer.getSession();
+            session.matches(localSession);
+
+            // Connection setup depends a lot on whether we use
+            // passive or active mode. The passive party needs to be
+            // configured before the active party.
+            if (passive) {
+                issueGETPUT("GET", true, null, 0, remoteFileName);
+                session.serverMode = Session.SERVER_PASSIVE; 
+                session.serverAddress = get127Reply();
+                setLocalActive();
+                localServer.store(sink);
+            } else {
+                HostPort hp = setLocalPassive();
+                localServer.store(sink);
+                issueGETPUT("GET", false, hp, 0, remoteFileName);
+                session.serverMode = Session.SERVER_ACTIVE;
+            }
+
+            return transferStart(localServer.getControlChannel(), mListener);
+            
+        } catch (FTPReplyParseException rpe) {
+            throw ServerException.embedFTPReplyParseException(rpe);
+        } finally {
+            // This might not be the most elegant or correct
+            // solution. On the other hand, these parameters do not
+            // seem to be used after transferStart() and it is much
+            // easier to restore the old values now rather than when
+            // the transfer completes.
+            session.serverMode = serverMode;
+            session.serverAddress = serverAddress;
+        }
+    }
+
+    /**
+     * Stores a file at the remote server using the GFD.47 (a.k.a
+     * GridFTP2) PUT command.
+     *
+     * Notice that as a side effect this method may change the local
+     * server facade passive/active mode setting. The caller should
+     * not rely on this setting after call to gridftp2Get.
+     *
+     * Even though the active/passive status of the current session is
+     * ignored for the actual transfer, it still has to be in a
+     * consistent state prior to calling gridftp2Get.
+     *
+     * @param remoteFileName file to retrieve
+     * @param passive whether to configure the server to be passive 
+     * @param source data will be read from here
+     * @param mListener marker listener
+     **/
+    public void put2(String remoteFileName,
+                     boolean passive,
+                     DataSource source,
+                     MarkerListener mListener)
+        throws IOException,
+               ClientException,
+               ServerException 
+    {
+
+        int serverMode = session.serverMode;
+        HostPort serverAddress = session.serverAddress;
+
+        try {
+            // Can we use GETPUT?
+            checkGETPUTSupport();
+
+            // Check sanity of arguments
+            if (session.transferMode == GridFTPSession.MODE_EBLOCK && !passive) {
+                throw new IllegalArgumentException("Sender must be active in extended block mode");
+            }
+
+            // All parameters set correctly (or still unset)?
+            Session localSession = localServer.getSession();
+            session.matches(localSession);
+
+            // Connection setup depends a lot on whether we use
+            // passive or active mode. The passive party needs to be
+            // configured before the active party.
+            if (passive) {
+                issueGETPUT("PUT", true, null, 0, remoteFileName);
+                session.serverMode = Session.SERVER_PASSIVE; 
+                session.serverAddress = get127Reply();
+                setLocalActive();
+                localServer.retrieve(source);
+            } else {
+                HostPort hp = setLocalPassive();
+                localServer.retrieve(source);
+                issueGETPUT("PUT", false, hp, 0, remoteFileName);
+                session.serverMode = Session.SERVER_ACTIVE;
+            }
+            
+            transferRunSingleThread(localServer.getControlChannel(),
+                                    mListener);
+            
+        } catch (FTPReplyParseException rpe) {
+            throw ServerException.embedFTPReplyParseException(rpe);
+        } finally {
+            session.serverMode = serverMode;
+            session.serverAddress = serverAddress;
+        }
+    }
+
+
+    /**
+     * Stores a file at the remote server using the GFD.47 (a.k.a
+     * GridFTP2) PUT command.
+     *
+     * Notice that as a side effect this method may change the local
+     * server facade passive/active mode setting. The caller should
+     * not rely on this setting after call to gridftp2Get.
+     *
+     * Even though the active/passive status of the current session is
+     * ignored for the actual transfer, it still has to be in a
+     * consistent state prior to calling gridftp2Get.
+     *
+     * @param remoteFileName file to retrieve
+     * @param passive whether to configure the server to be passive 
+     * @param source data will be read from here
+     * @param mListener marker listener
+     **/
+    public TransferState asynchPut2(String remoteFileName,
+                                    boolean passive,
+                                    DataSource source,
+                                    MarkerListener mListener)
+        throws IOException,
+               ClientException,
+               ServerException 
+    {
+        int serverMode = session.serverMode;
+        HostPort serverAddress = session.serverAddress;
+
+        try {
+        
+            // Can we use GETPUT?
+            checkGETPUTSupport();
+
+            // Check sanity of arguments
+            if (session.transferMode == GridFTPSession.MODE_EBLOCK && !passive) {
+                throw new IllegalArgumentException("Sender must be active in extended block mode");
+            }
+
+            // All parameters set correctly (or still unset)?
+            Session localSession = localServer.getSession();
+            session.matches(localSession);
+
+            // Connection setup depends a lot on whether we use
+            // passive or active mode. The passive party needs to be
+            // configured before the active party.
+            if (passive) {
+                issueGETPUT("PUT", true, null, 0, remoteFileName);
+                session.serverMode = Session.SERVER_PASSIVE; 
+                session.serverAddress = get127Reply();
+                setLocalActive();
+                localServer.retrieve(source);
+            } else {
+                HostPort hp = setLocalPassive();
+                localServer.retrieve(source);
+                issueGETPUT("PUT", false, hp, 0, remoteFileName);
+                session.serverMode = Session.SERVER_ACTIVE;
+            }
+
+            return transferStart(localServer.getControlChannel(), mListener);
+        } catch (FTPReplyParseException rpe) {
+            throw ServerException.embedFTPReplyParseException(rpe);
+        } finally {
+            // This might not be the most elegant or correct
+            // solution. On the other hand, these parameters do not
+            // seem to be used after transferStart() and it is much
+            // easier to restore the old values now rather than when
+            // the transfer completes.
+            session.serverMode = serverMode;
+            session.serverAddress = serverAddress;
+        }
+    }
+
+    /**
+     * Performs third-party transfer between two servers. If possibly,
+     * GFD.47 (a.k.a GridFTP2) GET and PUT commands are used.
+     *
+     * @param destination   client connected to source server
+     * @param remoteSrcFile source filename
+     * @param destination   client connected to destination server
+     * @param remoteDstFile destination filename
+     * @param mode data channel mode or 0 to use the current mode
+     * @param mListener     marker listener.
+     *                      Can be set to null.
+     */
+    static public void transfer(FTPClient source,
+                                String remoteSrcFile,
+                                FTPClient destination,
+                                String remoteDstFile,
+                                int mode,
+                                MarkerListener mListener)
+        throws IOException, ServerException, ClientException 
+    {
+        try {
+            // Although neither mode nor passive setting from in the
+            // session is used, we still perform this check, since
+            // other things may be checked as well.
+            source.session.matches(destination.session);
+
+            HostPort hp;
+            if (destination.isFeatureSupported(FeatureList.GETPUT)) {
+                destination.issueGETPUT("PUT", true, null, 
+                                        mode, remoteDstFile);
+                hp = ((GridFTPClient)destination).get127Reply();
+            } else {
+                if (mode > 0) {
+                    destination.setMode(mode);
+                }
+                hp = destination.setPassive();
+                destination.controlChannel.write(new Command("STOR", remoteDstFile));
+            }
+            
+            if (source.isFeatureSupported(FeatureList.GETPUT)) {
+                source.issueGETPUT("GET", false, hp, mode, remoteSrcFile);
+            } else {
+                if (mode > 0) {
+                    source.setMode(mode);
+                }
+                source.setActive(hp);
+                source.controlChannel.write(new Command("RETR", remoteSrcFile));
+            }
+        
+            source.transferRunSingleThread(destination.controlChannel, mListener);
+        } catch (FTPReplyParseException rpe) {
+            throw ServerException.embedFTPReplyParseException(rpe);
+        }
+    }
+
     
 } //FTPClient
Only in cog-jglobus-1.4/src/org/globus/ftp: FTPClient.java~
diff -ur /tmp/cog-jglobus-1.4/src/org/globus/ftp/GridFTPClient.java cog-jglobus-1.4/src/org/globus/ftp/GridFTPClient.java
--- /tmp/cog-jglobus-1.4/src/org/globus/ftp/GridFTPClient.java	2006-04-09 07:50:13.000000000 +0200
+++ cog-jglobus-1.4/src/org/globus/ftp/GridFTPClient.java	2007-05-22 11:26:57.662478807 +0200
@@ -27,6 +27,8 @@
 import org.globus.ftp.exception.UnexpectedReplyCodeException;
 import org.globus.ftp.vanilla.Command;
 import org.globus.ftp.vanilla.Reply;
+import org.globus.ftp.vanilla.TransferState;
+import org.globus.ftp.vanilla.FTPControlChannel;
 import org.globus.ftp.extended.GridFTPServerFacade;
 import org.globus.ftp.extended.GridFTPControlChannel;
 import org.globus.gsi.gssapi.auth.Authorization;
@@ -185,30 +187,18 @@
 	}
     }
 
-    /**
-     * Sets transfer mode.
-     * @param mode should be {@link Session#MODE_STREAM MODE_STREAM}, 
-     *                       {@link Session#MODE_BLOCK MODE_BLOCK}, or 
-     *                       {@link GridFTPSession#MODE_EBLOCK MODE_EBLOCK}
-     **/
-    public void setMode(int mode) 
-        throws IOException, ServerException { 
-        String modeStr = null;
+    protected String getModeStr(int mode)
+    {
         switch (mode) {
         case Session.MODE_STREAM: 
-            modeStr = "S"; 
-            break;
+            return "S"; 
         case Session.MODE_BLOCK: 
-            modeStr = "B";
-            break;
+            return "B";
         case GridFTPSession.MODE_EBLOCK: 
-            modeStr = "E";
-            break;
+            return "E";
         default: 
             throw new IllegalArgumentException("Bad mode: " + mode); 
         }
-        
-        actualSetMode(mode, modeStr);
     }
 
     /**
@@ -821,5 +811,4 @@
             throw ServerException.embedFTPReplyParseException(rpe);
         }
     }
-    
 }
Only in cog-jglobus-1.4/src/org/globus/ftp: GridFTPClient.java~
Only in cog-jglobus-1.4/src/org/globus/ftp: Session.java~
diff -ur /tmp/cog-jglobus-1.4/src/org/globus/io/streams/FTPInputStream.java cog-jglobus-1.4/src/org/globus/io/streams/FTPInputStream.java
--- /tmp/cog-jglobus-1.4/src/org/globus/io/streams/FTPInputStream.java	2006-01-20 21:21:29.000000000 +0100
+++ cog-jglobus-1.4/src/org/globus/io/streams/FTPInputStream.java	2007-05-22 10:25:16.439558133 +0200
@@ -21,6 +21,7 @@
 import org.globus.ftp.FTPClient;
 import org.globus.ftp.Session;
 import org.globus.ftp.InputStreamDataSink;
+import org.globus.ftp.FeatureList;
 import org.globus.ftp.vanilla.TransferState;
 import org.globus.ftp.exception.FTPException;
 import org.globus.common.ChainedIOException;
@@ -30,6 +31,7 @@
     protected InputStream input;
     protected FTPClient ftp;
     protected TransferState state;
+    protected boolean useGFD47;
 
     protected FTPInputStream() {
     }
@@ -52,11 +54,25 @@
 			  boolean passive,
 			  int type) 
 	throws IOException, FTPException {
+        this(host, port, user, pwd, file, passive, type, true);
+    }
+
+    public FTPInputStream(String host, 
+			  int port, 
+			  String user, 
+			  String pwd, 
+			  String file,
+			  boolean passive,
+			  int type,
+                          boolean useGFD47) 
+	throws IOException, FTPException {
 	this.ftp = new FTPClient(host, port);
 	this.ftp.authorize(user, pwd);
+        this.useGFD47 = 
+            (useGFD47 && this.ftp.isFeatureSupported(FeatureList.GETPUT));
 	get(passive, type, file);
     }
-    
+
     protected void get(boolean passive,
 		       int type,
 		       String remoteFile)
@@ -67,21 +83,28 @@
 	try {
 	    this.ftp.setType(type);
 
-	    if (passive) {
-		this.ftp.setPassive();
-		this.ftp.setLocalActive();
-	    } else {
-		this.ftp.setLocalPassive();
-		this.ftp.setActive();
-	    }
-	    
 	    sink = new InputStreamDataSink();
-
 	    this.input = sink.getInputStream();
 
-	    this.state = this.ftp.asynchGet(remoteFile,
-					    sink,
-					    null);
+            if (useGFD47) {
+                this.state = 
+                    this.ftp.asynchGet2(remoteFile,
+                                        passive,
+                                        sink,
+                                        null);
+            } else {
+                if (passive) {
+                    this.ftp.setPassive();
+                    this.ftp.setLocalActive();
+                } else {
+                    this.ftp.setLocalPassive();
+                    this.ftp.setActive();
+                }
+
+                this.state = this.ftp.asynchGet(remoteFile,
+                                                sink,
+                                                null);
+            }
 	
 	    this.state.waitForStart();
 
Only in cog-jglobus-1.4/src/org/globus/io/streams: FTPInputStream.java~
diff -ur /tmp/cog-jglobus-1.4/src/org/globus/io/streams/FTPOutputStream.java cog-jglobus-1.4/src/org/globus/io/streams/FTPOutputStream.java
--- /tmp/cog-jglobus-1.4/src/org/globus/io/streams/FTPOutputStream.java	2006-01-20 21:21:29.000000000 +0100
+++ cog-jglobus-1.4/src/org/globus/io/streams/FTPOutputStream.java	2007-05-22 10:26:17.819055951 +0200
@@ -21,6 +21,7 @@
 import org.globus.ftp.FTPClient;
 import org.globus.ftp.Session;
 import org.globus.ftp.OutputStreamDataSource;
+import org.globus.ftp.FeatureList;
 import org.globus.ftp.vanilla.TransferState;
 import org.globus.ftp.exception.FTPException;
 import org.globus.common.ChainedIOException;
@@ -30,6 +31,7 @@
     protected OutputStream output;
     protected FTPClient ftp;
     protected TransferState state;
+    protected boolean useGFD47;
 
     protected FTPOutputStream() {
     }
@@ -54,8 +56,23 @@
 			   boolean passive,
 			   int type) 
 	throws IOException, FTPException {
+        this(host, port, user, pwd, file, append, passive, type, true);
+    }
+
+    public FTPOutputStream(String host, 
+			   int port, 
+			   String user, 
+			   String pwd,
+			   String file,
+			   boolean append,
+			   boolean passive,
+			   int type,
+                           boolean useGFD47) 
+	throws IOException, FTPException {
 	this.ftp = new FTPClient(host, port);
 	this.ftp.authorize(user, pwd);
+        this.useGFD47 = 
+            (useGFD47 && this.ftp.isFeatureSupported(FeatureList.GETPUT));
 	put(passive, type, file, append);
     }
 
@@ -107,20 +124,27 @@
 	try {
 	    this.ftp.setType(type);
 
-	    if (passive) {
-		this.ftp.setPassive();
-		this.ftp.setLocalActive();
-	    } else {
-		this.ftp.setLocalPassive();
-		this.ftp.setActive();
-	    }
-	    
 	    source = new OutputStreamDataSource(2048);
-	    
-	    this.state = this.ftp.asynchPut(remoteFile,
-					    source,
-					    null,
-					    append);
+
+            if (useGFD47) {
+                this.state = 
+                    this.ftp.asynchPut2(remoteFile,
+                                        passive,
+                                        source,
+                                        null);
+            } else {
+                if (passive) {
+                    this.ftp.setPassive();
+                    this.ftp.setLocalActive();
+                } else {
+                    this.ftp.setLocalPassive();
+                    this.ftp.setActive();
+                }
+                this.state = this.ftp.asynchPut(remoteFile,
+                                                source,
+                                                null,
+                                                append);
+            }
 	    
 	    this.state.waitForStart();
 
Only in cog-jglobus-1.4/src/org/globus/io/streams: FTPOutputStream.java~
diff -ur /tmp/cog-jglobus-1.4/src/org/globus/io/streams/GridFTPInputStream.java cog-jglobus-1.4/src/org/globus/io/streams/GridFTPInputStream.java
--- /tmp/cog-jglobus-1.4/src/org/globus/io/streams/GridFTPInputStream.java	2006-01-20 21:21:29.000000000 +0100
+++ cog-jglobus-1.4/src/org/globus/io/streams/GridFTPInputStream.java	2007-05-22 10:25:32.160454015 +0200
@@ -20,6 +20,7 @@
 import org.globus.ftp.GridFTPClient;
 import org.globus.ftp.Session;
 import org.globus.ftp.DataChannelAuthentication;
+import org.globus.ftp.FeatureList;
 import org.globus.ftp.exception.FTPException;
 import org.globus.gsi.gssapi.auth.Authorization;
 import org.globus.gsi.gssapi.auth.HostAuthorization;
@@ -28,6 +29,7 @@
 
 public class GridFTPInputStream extends FTPInputStream {
 
+
     public GridFTPInputStream(GSSCredential cred,
 			      String host, 
 			      int port, 
@@ -35,7 +37,7 @@
 	throws IOException, FTPException {
 	this(cred, HostAuthorization.getInstance(),
 	     host, port, 
-	     file, true, Session.TYPE_IMAGE, true);
+	     file, true, Session.TYPE_IMAGE, true, true);
     }
 
     public GridFTPInputStream(GSSCredential cred,
@@ -46,7 +48,19 @@
 			      boolean reqDCAU) 
 	throws IOException, FTPException {
 	this(cred, auth, host, port, 
-	     file, true, Session.TYPE_IMAGE, reqDCAU);
+	     file, true, Session.TYPE_IMAGE, reqDCAU, true);
+    }
+
+    public GridFTPInputStream(GSSCredential cred,
+			      Authorization auth,
+			      String host, 
+			      int port, 
+			      String file,
+			      boolean reqDCAU,
+                              boolean useGFD47) 
+	throws IOException, FTPException {
+	this(cred, auth, host, port, 
+	     file, true, Session.TYPE_IMAGE, reqDCAU, useGFD47);
     }
 
     public GridFTPInputStream(GSSCredential cred,
@@ -56,11 +70,15 @@
 			      String file,
 			      boolean passive,
 			      int type,
-			      boolean reqDCAU) 
+			      boolean reqDCAU,
+                              boolean useGFD47) 
 	throws IOException, FTPException {
 	GridFTPClient gridFtp = new GridFTPClient(host, port);
 	gridFtp.setAuthorization(auth);
 	gridFtp.authenticate(cred);
+
+        this.useGFD47 = 
+            (useGFD47 && gridFtp.isFeatureSupported(FeatureList.GETPUT));
 	
 	if (gridFtp.isFeatureSupported("DCAU")) {
 	    if (!reqDCAU) {
@@ -74,5 +92,4 @@
 	
 	get(passive, type, file);
     }
-
 }
Only in cog-jglobus-1.4/src/org/globus/io/streams: GridFTPInputStream.java~
diff -ur /tmp/cog-jglobus-1.4/src/org/globus/io/streams/GridFTPOutputStream.java cog-jglobus-1.4/src/org/globus/io/streams/GridFTPOutputStream.java
--- /tmp/cog-jglobus-1.4/src/org/globus/io/streams/GridFTPOutputStream.java	2006-01-20 21:21:29.000000000 +0100
+++ cog-jglobus-1.4/src/org/globus/io/streams/GridFTPOutputStream.java	2007-05-22 10:25:35.680654620 +0200
@@ -20,6 +20,7 @@
 import org.globus.ftp.GridFTPClient;
 import org.globus.ftp.Session;
 import org.globus.ftp.DataChannelAuthentication;
+import org.globus.ftp.FeatureList;
 import org.globus.ftp.exception.FTPException;
 import org.globus.gsi.gssapi.auth.Authorization;
 import org.globus.gsi.gssapi.auth.HostAuthorization;
@@ -27,7 +28,7 @@
 import org.ietf.jgss.GSSCredential;
 
 public class GridFTPOutputStream extends FTPOutputStream {
-  
+
     public GridFTPOutputStream(GSSCredential cred, 
 			       String host,
 			       int port,
@@ -36,7 +37,7 @@
 	throws IOException, FTPException {
 	this(cred, HostAuthorization.getInstance(),
 	     host, port, file, append,
-	     true, Session.TYPE_IMAGE, true);
+	     true, Session.TYPE_IMAGE, true, true);
     }
 
     public GridFTPOutputStream(GSSCredential cred, 
@@ -49,7 +50,21 @@
 	throws IOException, FTPException {
 	this(cred, auth, 
 	     host, port, file, append,
-	     true, Session.TYPE_IMAGE, reqDCAU);
+	     true, Session.TYPE_IMAGE, reqDCAU, true);
+    }
+
+    public GridFTPOutputStream(GSSCredential cred, 
+			       Authorization auth,
+			       String host,
+			       int port,
+			       String file,
+			       boolean append,
+			       boolean reqDCAU,
+                               boolean useGFD47)
+	throws IOException, FTPException {
+	this(cred, auth, 
+	     host, port, file, append,
+	     true, Session.TYPE_IMAGE, reqDCAU, useGFD47);
     }
 
     public GridFTPOutputStream(GSSCredential cred, 
@@ -60,11 +75,15 @@
 			       boolean append,
 			       boolean passive,
 			       int type,
-			       boolean reqDCAU)
+			       boolean reqDCAU,
+                               boolean useGFD47)
 	throws IOException, FTPException {
 	GridFTPClient gridFtp = new GridFTPClient(host, port);
 	gridFtp.setAuthorization(auth);
 	gridFtp.authenticate(cred);
+
+        this.useGFD47 = 
+            (useGFD47 && gridFtp.isFeatureSupported(FeatureList.GETPUT));
 	
 	if (gridFtp.isFeatureSupported("DCAU")) {
 	    if (!reqDCAU) {
@@ -78,5 +97,4 @@
 	
 	put(passive, type, file, append);
     }
-    
 }
Only in cog-jglobus-1.4/src/org/globus/io/streams: GridFTPOutputStream.java~
diff -ur /tmp/cog-jglobus-1.4/src/org/globus/io/urlcopy/UrlCopy.java cog-jglobus-1.4/src/org/globus/io/urlcopy/UrlCopy.java
--- /tmp/cog-jglobus-1.4/src/org/globus/io/urlcopy/UrlCopy.java	2006-07-31 19:35:14.000000000 +0200
+++ cog-jglobus-1.4/src/org/globus/io/urlcopy/UrlCopy.java	2007-05-22 11:36:26.870916147 +0200
@@ -76,6 +76,7 @@
     protected GlobusURL dstUrl         = null;
     protected boolean canceled         = false;
     protected boolean thirdParty       = true;
+    protected boolean gridftp2         = true;
     protected List listeners           = null;
     
     protected long sourceOffset      = 0;
@@ -394,6 +395,26 @@
     }
 
     /**
+     * Enables/disables usage of GridFTP2 (as specified in GFD.47) if
+     * supported by the server.
+     *
+     * @param gridftp2 if true enable, false disable
+     */
+    public void setGridFTP2(boolean gridftp2) {
+        this.gridftp2 = gridftp2;
+    }
+
+    /**
+     * Returns whether GridFTP2 (as specified in GFD.47) is to be used
+     * when supported by the server.
+     *
+     * @return true if enabled, false if disabled
+     */
+    public boolean getGridFTP2() {
+        return gridftp2;
+    }
+
+    /**
      * Cancels the transfer in progress. If no transfer
      * is in progress it is ignored.
      */
@@ -528,7 +549,8 @@
                                         srcUrl.getHost(),
                                         srcUrl.getPort(),
                                         fromFile,
-                                        getDCAU());
+                                        getDCAU(),
+                                        getGridFTP2());
             
         } else if (fromP.equalsIgnoreCase("https")) {
             Authorization auth = getSourceAuthorization();
@@ -586,7 +608,8 @@
                                           dstUrl.getPort(),
                                           toFile,
                                           appendMode,
-                                          getDCAU());
+                                          getDCAU(),
+                                          getGridFTP2());
         } else if (toP.equalsIgnoreCase("https")) {
             Authorization auth = getDestinationAuthorization();
             if (auth == null) {
@@ -699,15 +722,22 @@
             if (this.sourceOffset == 0 && 
                 this.destinationOffset == 0 && 
                 this.sourceLength == Long.MAX_VALUE) {
-                
-                srcFTP.setMode(Session.MODE_STREAM);
-                dstFTP.setMode(Session.MODE_STREAM);
-                   
-                srcFTP.transfer(srcUrl.getPath(), 
-                                dstFTP, 
-                                dstUrl.getPath(), 
-                                false, 
-                                null);
+            
+                if (gridftp2) {                    
+                    FTPClient.transfer(srcFTP, srcUrl.getPath(), 
+                                       dstFTP, dstUrl.getPath(), 
+                                       GridFTPSession.MODE_STREAM,
+                                       null);
+                } else {
+                    srcFTP.setMode(Session.MODE_STREAM);
+                    dstFTP.setMode(Session.MODE_STREAM);
+                    
+                    srcFTP.transfer(srcUrl.getPath(), 
+                                    dstFTP, 
+                                    dstUrl.getPath(), 
+                                    false, 
+                                    null);
+                }
             } else if (srcFTP instanceof GridFTPClient && 
                        dstFTP instanceof GridFTPClient) {
                 
Only in cog-jglobus-1.4/src/org/globus/io/urlcopy: UrlCopy.java~
diff -ur /tmp/cog-jglobus-1.4/src/org/globus/tools/GlobusUrlCopy.java cog-jglobus-1.4/src/org/globus/tools/GlobusUrlCopy.java
--- /tmp/cog-jglobus-1.4/src/org/globus/tools/GlobusUrlCopy.java	2006-07-31 19:35:14.000000000 +0200
+++ cog-jglobus-1.4/src/org/globus/tools/GlobusUrlCopy.java	2007-05-21 13:38:14.756263612 +0200
@@ -41,6 +41,8 @@
         "\t-nodcau | -no-data-channel-authentication\n" +
         "\t      Turn off data channel authentication for ftp transfers\n" +
         "\t      Applies to FTP protocols only.\n" + 
+        "\t-nogridftp2 | -no-gridftp2\n" +
+        "\t      Turn use of GridFTP2 off (on by default)\n" +
         "\t-tcp-bs <size> | -tcp-buffer-size <size>\n" +
         "\t      Specifies the size (in bytes) of the TCP buffer to be\n" +
         "\t      used by the underlying FTP data channels.\n" +
@@ -60,6 +62,7 @@
 
         boolean thirdPartyTransfer = true;
         boolean dcau = true;
+        boolean gridftp2 = true;
         int tcpBufferSize = 0;
         
         int argv = args.length-2;
@@ -72,6 +75,9 @@
             } else if (args[i].equalsIgnoreCase("-nodcau") ||
                        args[i].equalsIgnoreCase("-no-data-channel-authentication")) {
                 dcau = false;
+            } else if (args[i].equalsIgnoreCase("-nogridftp2") ||
+                       args[i].equalsIgnoreCase("-no-gridftp2")) {
+                gridftp2 = false;
             } else if (args[i].equalsIgnoreCase("-debug")) {
                 debug = true;
             } else if (args[i].equalsIgnoreCase("-ss")) {
@@ -164,6 +170,7 @@
             uc.setDestinationUrl(to);
             uc.setUseThirdPartyCopy(thirdPartyTransfer);
             uc.setDCAU(dcau);
+            uc.setGridFTP2(gridftp2);
             uc.setSourceAuthorization(srcAuth);
             uc.setDestinationAuthorization(dstAuth);
             if (tcpBufferSize != 0) {
Only in cog-jglobus-1.4/src/org/globus/tools: GlobusUrlCopy.java~
