<!-- $Id: dcache-core-build.xml,v 1.45 2008-10-05 09:22:38 behrmann Exp $ -->

<project name="Core" basedir=".">

    <property name="dcache.build.dir" location="${buildDir}/dcache" />
    <!--
          Properties  -  the following properties, paths, and selectors
                         define the locations and files for dCache
    -->

    <!-- Output Files
       For each of these jar files there are targets below -->

    <property name="dcache.jar" location="${classesDir}/dcache.jar" />

	<target name="-isUptodate.dcache.jar" depends="-isUptodate.dcache.jar-classes,-isUptodate.dcache.jar-confs">
		<condition property="dcache.jar.upToDate">
			<and>
				<isset property="dcache.jar.upToDate-classes" />
				<isset property="dcache.jar.upToDate-confs" />
			</and>
		</condition>
	</target>

    <target name="-isUptodate.dcache.jar-classes">
        <condition property="dcache.jar.upToDate-classes">
            <and>
                <available file="${dcache.jar}" type="file" />
                <uptodate targetfile="${dcache.jar}">
                    <srcfiles dir="${dcache.src}">
                        <include name="**/*.java" />
                    </srcfiles>
                </uptodate>
            </and>
        </condition>
    </target>

	<target name="-isUptodate.dcache.jar-confs">
        <condition property="dcache.jar.upToDate-confs">
            <and>
                <available file="${dcache.jar}" type="file" />
                <uptodate targetfile="${dcache.jar}">
                    <srcfiles dir="${dcache.src}">
                        <include name="**/*.xml" />
                        <include name="**/*.jdo" />
                    </srcfiles>
                </uptodate>
            </and>
        </condition>
    </target>

    <target name="-isDependPresent">
        <whichresource class="org.apache.tools.ant.taskdefs.optional.jdepend.JDependTask" property="depend.present" />
    </target>

    <!-- Classpath for dcache.jar -->

    <path id="chimera.classpath">
        <pathelement location="${libDir}/Chimera/oncrpc.jar" />
        <pathelement location="${libDir}/Chimera/portmap.jar" />
    </path>

    <path id="dcache.external.classpath">
        <fileset dir="${libDir}/wicket/" includes="*.jar" />
        <pathelement location="${libDir}/smc/statemap.jar" />
        <fileset dir="${libDir}/cog" includes="**/*.jar" excludes="**/commons-logging-*.jar"/>
        <fileset dir="${libDir}/security" includes="**/*.jar" />
        <fileset dir="${libDir}/terapaths" includes="*.jar" />
        <pathelement location="${libDir}/jdom/jdom.jar" />
        <pathelement location="${libDir}/Chimera/commons-cli-1.0.jar" />
        <path refid="dependency.classpath" />
        <path refid="chimera.classpath" />
    	<!-- new add -->
    	<pathelement location="${libDir}/gplazma/anam.jar" />
    	<pathelement location="${libDir}/gplazma/privilege-1.0.1.5.jar" />
    	<pathelement location="${libDir}/gplazma/privilege-xacml-2.2.5.jar" />
    	<pathelement location="${libDir}/jing/jing-20091111.jar" />
    	<pathelement location="${libDir}/jline/jline-1.0.jar" />
    	<pathelement location="${libDir}/rrd4j/rrd4j-2.0.5.jar" />
    	<pathelement location="${libDir}/findbugs/lib/annotations.jar"/>
    	<pathelement location="${web-dcache.lib}/xbean.jar"/>
    	<pathelement location="${web-dcache.lib}/commons-digester-1.6.jar"/>
    </path>

    <path id="dcache.classpath">
        <path refid="cells.classpath" />
        <path refid="authz.classpath" />
        <path refid="dcache.external.classpath" />
        <pathelement location="${classesDir}/dcache-common.jar" />
        <pathelement location="${classesDir}/cells.jar" />
        <pathelement location="${classesDir}/srm.jar" />
        <pathelement location="${classesDir}/gplazma.jar" />
        <pathelement location="${classesDir}/dcache.jar" />
    </path>



    <!-- Classpath for gplazma.jar. -->

    <path id="authz.classpath">
        <pathelement location="${classesDir}/gplazma.jar" />
        <fileset dir="${libDir}/gplazma" includes="**/*.jar" />
        <pathelement location="${libDir}/security/bcprov-jdk15-143.jar" />
        <fileset dir="${libDir}/cog" includes="**/*.jar" />
    </path>

    <!-- Classpath for enhancement -->

    <path id="dcache-srm-enhance.classpath">
        <pathelement location="${classesDir}/cells.jar" />
        <pathelement path="${dcache.build.dir}" />
        <path refid="dependency.classpath" />
    </path>


    <!--
        Targets for dcache.jar
    -->

    <!-- Depend -->

    <target name="-dcache.depend" depends="-isDependPresent" if="depend.present">
        <depend srcdir="${dcache.src}" destdir="${dcache.build.dir}" />
    </target>

    <!-- The SMC invocation part. Without the ant-contrib tasks, we
             need to add each .sm file one by one below. -->
    <!--
        Compile state machines using SMC
    -->
    <target name="-dcache.smc">
        <mkdir dir="${dcache.build.dir}/org/dcache/pool/migration" />
        <smc target="java"
            smfile="${dcache.src}/org/dcache/pool/migration/Task.sm"
            destdir="${dcache.build.dir}/org/dcache/pool/migration/"
            smcjar="${smc.jar}"
        />

        <mkdir dir="${dcache.build.dir}/org/dcache/pool/p2p" />
        <smc target="java"
            smfile="${dcache.src}/org/dcache/pool/p2p/Companion.sm"
            destdir="${dcache.build.dir}/org/dcache/pool/p2p/"
            smcjar="${smc.jar}"
        />
    </target>

    <!--
        compile dcache code
    -->

    <target name="-dcache.compile" depends="-dcache.smc,-dcache.depend" unless="dcache.jar.upToDate-classes">

        <mkdir dir="${dcache.build.dir}" />

        <javac destdir="${dcache.build.dir}" source="${javac.source}" target="${javac.target}" debug="${javac.debug}" verbose="${javac.verbose}" encoding="${javac.encoding}">

            <src path="${dcache.src}" />
            <src path="${dcache.build.dir}" />

            <classpath refid="dcache.classpath" />
            <classpath refid="authz.classpath" />

            <include name="diskCacheV111/**" />
            <include name="diskCacheV111/services/authorization/**" />
            <include name="org/**" />
            <exclude name="diskCacheV111/scripts/**" />
            <exclude name="diskCacheV111/tomcat/**" />
            <exclude name="org/dcache/services/plots/**/*.java" />
        </javac>

    </target>

    <path id="dcache-auth-enhance.classpath">
        <pathelement location="${classesDir}/gplazma.jar" />
        <pathelement location="${dcache.build.dir}" />
        <path refid="dependency.classpath" />
    </path>

    <target name="-dcache-auth.check.enhanced">
        <condition property="dcache-auth.is.enhanced">
            <and>
                <available file="${dcache.build.dir}/META-INF/persistence.xml" type="file" />
            </and>
        </condition>
    </target>

    <!--
        Enhance auth record
        generate JPA Persistency code
    -->
    <target name="-dcache-auth.enhance" depends="-dcache.compile,-dcache-auth.check.enhanced" unless="dcache-auth.is.enhanced">

        <mkdir dir="${dcache.build.dir}/META-INF" />
        <copy file="${dcache.src}/diskCacheV111/config/persistence.xml" todir="${dcache.build.dir}/META-INF" />
        <copy file="${dcache.src}/org/dcache/auth/AuthRecordORM.xml" todir="${dcache.build.dir}/org/dcache/auth/" />
        <!-- define the task enhancer -->

        <taskdef name="enhance" classpathref="dcache-auth-enhance.classpath"
                 classname="org.datanucleus.enhancer.tools.EnhancerTask" />

        <!-- enhance -->
        <enhance classpathref="dcache-auth-enhance.classpath"
                 dir="${dcache.build.dir}"
                 api="JPA" persistenceUnit="AuthRecordPersistenceUnit">
          <sysproperty key="logback.configurationFile"
                       value="file:modules-builds/logback.xml"/>
        </enhance>
    </target>

    <!--
        build dcache.jar, compile if reqiered
    -->
    <target name="-dcache.jar" depends="-isUptodate.dcache.jar,-dcache.enhance" unless="dcache.jar.upToDate">

        <mkdir dir="${dcache.build.dir}/META-INF" />
        <copy file="${dcache.src}/diskCacheV111/config/persistence.xml" todir="${dcache.build.dir}/META-INF" />
        <copy file="${dcache.src}/org/dcache/auth/AuthRecordORM.xml" todir="${dcache.build.dir}/org/dcache/auth/" />
        <copy file="${dcache.src}/diskCacheV111/config/aop.xml" todir="${dcache.build.dir}/META-INF" />
        <copy file="${dcache.src}/diskCacheV111/config/gplazma-plugins.xml" todir="${dcache.build.dir}/META-INF"/>
        <jar jarfile="${dcache.jar}">
            <fileset dir="${dcache.src}" includes="**/*.xml,**/*.jdo,**/*.stg" excludes="diskCacheV111/config/*,**/WEB-INF/*.xml" />
            <fileset dir="${dcache.build.dir}" includes="**/*.class,META-INF/*.xml" />
            <manifest>
                <section name="Shared">
                    <attribute name="Title" value="dCache Core" />
                    <attribute name="Vendor" value="${vendor}" />
                    <attribute name="Date" value="${jar.timestamp}" />
                </section>
                <section name="Copyright">
                    <attribute name="Copy" value="${copyright}" />
                </section>
                <attribute name="Main-Class" value="diskCacheV111.util.Version" />
                <attribute name="Class-Path" value="cells.jar" />
                <attribute name="Specification-Version" value="${release.name}" />
                <attribute name="Specification-Vendor" value="${vendor}" />
                <attribute name="Package-Title" value="dmg.util" />
                <attribute name="Package-Version" value="${release.name}" />
                <attribute name="Package-Vendor" value="${vendor}" />
                <attribute name="Build-Time" value="${jar.timestamp}" />
            </manifest>
        </jar>

    </target>

    <!-- Enhance -->

    <!--
        generate JDO persistency backend
    -->
    <target name="-dcache.enhance" depends="-dcache.compile">

      <taskdef name="enhance" classpathref="dcache-srm-enhance.classpath"
               classname="org.datanucleus.enhancer.tools.EnhancerTask" />

      <enhance classpathref="dcache-srm-enhance.classpath"
               dir="${dcache.build.dir}">
        <fileset dir="${dcache.src}/" includes="**/package.jdo"/>
        <sysproperty key="logback.configurationFile"
                     value="file:modules-builds/logback.xml"/>
      </enhance>
    </target>


    <!-- directory layout :

      <dCache home>-|
            |-classes
            |-etc-|
                               |-users-|
                                       |-acls
                                       |-meta
                                       |-relations
    -->


    <target name="-dcache.bin" depends="-dcache.jar">

        <mkdir dir="${server.bin.dir}/classes" />
        <mkdir dir="${server.bin.dir}/jobs" />
        <mkdir dir="${server.bin.dir}/config" />
        <mkdir dir="${server.bin.dir}/etc" />
        <mkdir dir="${server.bin.dir}/etc/users" />
        <mkdir dir="${server.bin.dir}/etc/users/acls" />
        <mkdir dir="${server.bin.dir}/etc/users/relations" />
        <mkdir dir="${server.bin.dir}/etc/users/meta" />

        <!-- jar file  -->
        <copy file="${classesDir}/dcache.jar" todir="${server.bin.dir}/classes" />

        <!-- HSM flush scripts -->
        <copy file="${dcache.src}/diskCacheV111/jobs/encp.sh" todir="${server.bin.dir}/jobs" />
        <copy file="${dcache.src}/diskCacheV111/jobs/hsmcp.sh" todir="${server.bin.dir}/jobs" />
        <copy file="${dcache.src}/diskCacheV111/jobs/hsmcpV4.sh" todir="${server.bin.dir}/jobs" />
        <copy file="${dcache.src}/diskCacheV111/jobs/hsmcp.rb" todir="${server.bin.dir}/jobs" />

        <chmod dir="${server.bin.dir}/jobs" includes="**/*" perm="ugo+rx" />

        <!-- Chimera -->
        <mkdir dir="${server.bin.dir}/classes/chimera" />
        <copy file="${libDir}/Chimera/oncrpc.jar" todir="${server.bin.dir}/classes/chimera" />
        <copy file="${libDir}/Chimera/portmap.jar" todir="${server.bin.dir}/classes/chimera" />
        <copy file="${libDir}/Chimera/commons-cli-1.0.jar" todir="${server.bin.dir}/classes/chimera" />
        <copy todir="${server.bin.dir}/libexec/chimera/sql">
            <fileset dir="${libDir}/Chimera/sql" />
        </copy>

        <!-- ACL -->
        <!--<copy file="${buildTop}/common/acl.properties" todir="${server.bin.dir}/config" /> -->

        <!-- Wicket -->
        <mkdir dir="${server.bin.dir}/classes/wicket" />
	<copy todir="${server.bin.dir}/classes/wicket">
            <fileset dir="${libDir}/wicket">
		<include name="*.jar" />
            </fileset>
	</copy>

        <!-- SMC -->
        <mkdir dir="${server.bin.dir}/classes/smc/" />
        <copy file="${libDir}/smc/statemap.jar" todir="${server.bin.dir}/classes/smc/" />

        <!-- opensaml -->
        <mkdir dir="${server.bin.dir}/classes/opensaml" />
        <copy file="${libDir}/opensaml/commons-collections-3.1.jar" todir="${server.bin.dir}/classes/opensaml" />
        <copy file="${libDir}/opensaml/commons-lang-2.1.jar" todir="${server.bin.dir}/classes/opensaml" />
        <copy file="${libDir}/opensaml/joda-time-1.5.2.jar" todir="${server.bin.dir}/classes/opensaml" />
        <copy file="${libDir}/opensaml/opensaml-1.0.1.jar" todir="${server.bin.dir}/classes/opensaml" />
        <copy file="${libDir}/opensaml/opensaml-2.2.0.jar" todir="${server.bin.dir}/classes/opensaml" />
        <copy file="${libDir}/opensaml/openws-1.1.0.jar" todir="${server.bin.dir}/classes/opensaml" />
        <copy file="${libDir}/opensaml/velocity-1.5.jar" todir="${server.bin.dir}/classes/opensaml" />
        <copy file="${libDir}/opensaml/xalan-2.6.0.jar" todir="${server.bin.dir}/classes/opensaml" />
        <copy file="${libDir}/opensaml/xml-security-1.4.1.jar" todir="${server.bin.dir}/classes/opensaml" />
        <copy file="${libDir}/opensaml/xmltooling-1.0.1.jar" todir="${server.bin.dir}/classes/opensaml" />

        <!-- endorsed -->
        <mkdir dir="${server.bin.dir}/classes/endorsed" />
        <copy file="${libDir}/endorsed/xml-apis-2.9.1.jar" todir="${server.bin.dir}/classes/endorsed" />
        <copy file="${libDir}/endorsed/xercesImpl-2.9.1.jar" todir="${server.bin.dir}/classes/endorsed" />

        <!-- jar file  -->
        <copy file="${classesDir}/srm.jar" todir="${server.bin.dir}/classes" />
        <copy file="${classesDir}/cells-protocols.jar" todir="${server.bin.dir}/classes" />

        <!-- most of this stuff have nothing to do with dCache, but I can't find beter place -->

        <!-- external jars -->

        <!-- cog -->
        <mkdir dir="${server.bin.dir}/classes/cog" />
        <property name="cogVersion" value="cog-srmlib" />
        <copy todir="${server.bin.dir}/classes/cog">
            <fileset dir="${libDir}/cog/${cogVersion}">
                <include name="*.jar" />
                <exclude name="commons-logging-*.jar"/>
            </fileset>
        </copy>

        <!-- jdom -->
        <mkdir dir="${server.bin.dir}/classes/jdom" />
        <copy file="${libDir}/jdom/jdom.jar" todir="${server.bin.dir}/classes/jdom" />

        <!-- gplazma -->
        <mkdir dir="${server.bin.dir}/classes/gplazma" />
        <copy todir="${server.bin.dir}/classes/gplazma">
            <fileset dir="${libDir}/gplazma">
                <include name="*.jar" />
            </fileset>
        </copy>

        <!-- bouncy castle -->
        <mkdir dir="${server.bin.dir}/classes/security" />
        <copy todir="${server.bin.dir}/classes/security">
            <fileset dir="${libDir}/security">
                <include name="bcprov-jdk15-143.jar" />
            </fileset>
        </copy>

        <!-- terapaths -->
        <mkdir dir="${server.bin.dir}/classes/terapaths" />
        <copy todir="${server.bin.dir}/classes/terapaths">
            <fileset dir="${libDir}/terapaths">
                <include name="*.jar" />
            </fileset>
        </copy>

         <!-- rrd4j -->
        <mkdir dir="${server.bin.dir}/classes/rrd4j" />
        <copy todir="${server.bin.dir}/classes/rrd4j">
            <fileset dir="${libDir}/rrd4j">
                <include name="*.jar" />
            </fileset>
        </copy>

	<!-- Saxon (needed as XSLT for Xylophone) -->
	<mkdir dir="${server.bin.dir}/classes/saxon" />
	<copy todir="${server.bin.dir}/classes/saxon">
	  <fileset dir="${libDir}/saxon">
	    <include name="*.jar" />
	  </fileset>
	</copy>

        <!-- external libraries -->
        <mkdir dir="${server.bin.dir}/classes/lib" />
        <copy todir="${server.bin.dir}/classes/lib">
            <fileset refid="dependency.fileset" />
            <!-- This mapper strips off all leading directory information -->
            <mapper type="flatten" />
         </copy>

    </target>


    <property name="batik.home" location="${libDir}/batik-1.7" />
    <property name="output.image" value="${server.bin.dir}/share/httpd/static/images/bg.jpg" />
    <property name="input.svg" value="dCache-web-bg-logo.svg" />

    <target name="-is.batik.present" >
        <condition property="batik.present">
            <and>
                <available file="${batik.home}" type="dir" />
                <!--The openjdk available at macports does not come with a sun proprietary api required by batik. Please remove this once this shortcomming has been addressed. -->
                <not><os name="Darwin" /></not>
            </and>
        </condition>

    </target>

    <!--
        generate dcache home page background images with version number
    -->
    <target name="-gen.bg.image" depends="-is.batik.present" if="batik.present" >

        <mkdir dir="${buildDir}/batik" />
        <taskdef name="rasterize" classname="org.apache.tools.ant.taskdefs.optional.RasterizerTask">
            <classpath>
                <pathelement location="${batik.home}/batik-rasterizer.jar" />
                <pathelement location="${batik.home}/RasterizerTask.jar" />
            </classpath>
        </taskdef>

        <copy todir="${buildDir}/batik" file="${skelDir}/share/httpd/static/images/${input.svg}"
            overwrite="true">
            <filterset>
                <filter token="VERSION" value="${version}-${patch}"/>
            </filterset>
        </copy>

        <echo message="Generating version specific backgroud image" />
        <rasterize result="image/jpeg" src="${buildDir}/batik/${input.svg}"
            dest="${output.image}"
        />

    </target>

</project>

