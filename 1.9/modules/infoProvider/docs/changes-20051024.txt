            Map of changes 
 
   Adding the InfoCollector in dCache
  
 
C: created (new file or directory) 
M: modified      
R: removed
  

-------------------------------------------------------------------------------------------
    24/10/2005

   ~~~~ infoCollector ~~~~

M - diskCacheV111/InfoCollector/InfoCollector.java
    - Added new messages sendig and arriving for protocols info:
 "ls -binary" to LoginBroker cell
 "ls -binary" to srm-LoginBroker cell

M - diskCacheV111/InfoCollector/InfoBase.java
    - Added informations about protocols:
 LoginBrokerInfo[] protocols
 LoginBrokerInfo[] srm
    - Added protocols section in show() 

M - diskCacheV111/InfoCollector/GlueSchemaV1_2
    - Unified LocalID attributes name. No more LocalId

   ~~~~ infoDynamicSE ~~~~

  PACKAGE "dynamicInfoProviderSE" IS RENAMED IN "infoDynamicSE" 
  to avoid terms confusion inside GIP (it doesn't behaviour ever as a provider). 
  It has been modified to work with new version of GIP 1.0.22 
  (which follows requirements provided from us). 

M - infoDynamicSE/infoProvider
    - Supported new arguments:
       1)  mode=plugin/provider 
 First mode follows strictly ldif file, second mode can add and remove dynamically
  the dn: nodes. 
     In GIP plugin_dir the infoDynamicSE will work in plugin mode while in provider_dir 
        it will work in provider mode.  
       2)  qry=<dpm-qryconf_path> 
        infoDynamicSE now works also with DPM in plugin mode, but it able to extract only 
        capacity and free space information by parsing /opt/lcg/bin/dpm-qryconf command output.
 It calulates used space and replaies these information in every StorageArea. 

M - infoDynamicSE/infoImporter
    - Supported GIP 1.0.22. Added abstract methods executePlugin() and executeProvider().
      Modified createLDIF() method.

M - infoDynamicSE/infoImporter_dcache
    - Added support for protocols publication in provider mode

M - infoDynamicSE/infoImporter_dpm 
    - Implemented plugin mode to retrive global space information. These information are
      replicated for each VO. Glue Schema 1.2 conventions are followed for units. 

-------------------------------------------------------------------------------------------
    13/10/2005

M - diskCacheV111/InfoCollector/InfoCollector.java
 
      - In the code (source code) the comparision was done
   with  '==' and not with id.equals(id2) which would be
   the right way.
 - Message sending is synchronized in the run method: 
   1) to use the wait.
   2) to avoid the interleaving between sending and 
      receiving of messages that is done in different 
      threads (the CPU time among the threads is partitioned
      in Round-Robin way).
   The run() method can't be whole synchronized because is always
   active. If it would be synchronized, once it's start, any other
   method could not be called in that object, if it is synchronized
   as well. 
          The problem of interleaving is also present in the messageArrived()
   method, in particular for message type _id2 code part, from where 
   an array of messages are sent (_id3).
          Since the messageArrived() method is not continuos as like as the run(),
   it can be whole synchronized, and that solve the problem.

-------------------------------------------------------------------------------------------
    03/10/2005 (2)

M - diskCacheV111/InfoCollector/GlueSchemaV1_2Filler.java
 modified fillSchema()

 To comply with Glue Schema v1.2 specifications:
  - StorageElement.SizeTotal and StorageElement.SizeFree are exported in Gbytes
  - StorageArea.State.UsedSpace and StorageArea.State.AvailableSpace are exported
    in Kbytes
-------------------------------------------------------------------------------------------
    03/10/2005

M - diskCacheV111/InfoCollector/InfoBase.java
 modified getGroupSpace()

Bug fix:
 When you create at dCache console a pool that not exists phisically and join it in
 a group the show() methods fails due to getGroupSpace method. This try to obtain a 
 PoolCostInfo reference for each pool name in the pool table, but if a pool doesn't
 exist, that reference will be a null pointer!
 The fix consists in a check on PoolCostInfo reference. If it'is null, that pool is
 not considered in the space calculation.

-------------------------------------------------------------------------------------------
    01/10/2005

M - diskCacheV111/InfoCollector/InfoExporter.java
 added cleanUp()
 modified finalize()

M - diskCacheV111/InfoCollector/InfoCollector.java
 added _exporter pointer
 modified cleanUp()

Test steps:
 1) Before to replace these files in dCache:
  1.1) At dCache console in System cell: kill sysinfo
  1.2) At shell: netstat -pl    
  1.3) You will see that port 22111 is still open 
       => you can't create a new well-working InfoCollector object (BUG!)
 2) Replace this classes and repeat the above steps: BUG FIXED. 

-------------------------------------------------------------------------------------------
    23/09/2005 - Patrick 


1) I changed the vehicles name to more precisely
   decribe what is does:

M - diskCacheV111/vehicles/CostModuleInfoPoolTable.java  <-  InfoPoolTable.java

2) The vehicle is no longer extending Hashtable for 
   reasons we learned from a java pattern book
   from one of the java developers
   (i can provide the author and title if you like)
    a) you don't want to expose all the Hashtable functions
       to the user of the message, but only those which 
       make sense to this message.
    b) This new version is runtime class cast save
       which you can't do if you extend Hashtable.
3) I added the CostModuleV1 from the cvs head to this e-mail.
   I hope this works fine with the 1.6.5 you have (do you ?)
   It differs a little bit from 1.6.5 Let me know if it
   doesn't compile.
4) I would like to checkin/commit the CostModuleV1.java and the
   new vehicle into the head of cvs. Is this ok ?

5) I added the possiblilty to start the InfoCollector
   cell which options (schema,interval,portnumber)
   The full syntax would be :
    create diskCacheV111.infoCollector.InfoCollector sysinfo \
           "default   \
            -scheme=<className> \
            -interval=<timeInSeconds> \
            -listenPort=<portNumber>"
   The options are real options, so you may just
   not specify them and the dafaults are taken.
6) I changed  printStackTrace into esay( Exception)
   so that the general output system is used instead
   of system.err. We may sooner or later move to j2log
   which only works if we standardize the way we do output.
7) I added the 'pin feature' to the 'say/esay' methods
   so that you can use the 'show pinboard' to have a look
   into what the cells did recently.
8) I made a very easy example on how to use 'getInfo' which
   is called if the user issues a 'info' in the cell
   command line.


NOTE: This version of CostModuleV1 requires 1.6.6 production version of
      dCache, that becomes the version used from now on.



-------------------------------------------------------------------------------------------
    23/09/2005


M - diskCacheV111/InfoCollector/InfoCollector.java

M - diskCacheV111/InfoCollector/InfoBase.java

C - diskCacheV111/InfoCollector/Schema.java

C - diskCacheV111/InfoCollector/SchemaFiller.java

C - diskCacheV111/InfoCollector/GlueSchemaV1_2.java

C - diskCacheV111/InfoCollector/GlueSchemaV1_2Filler.java

C - diskCacheV111/InfoCollector/InfoExporter.java



Test steps on dCache:
  1) add diskCacheV111/InfoCollector package and the files inside
  2) run dCache and create an InfoCollector cell (i.e. 'infosys')
  3) try: "telnet <dcache_host> 22111"
  4) execute test class: "ImportationTest.java". 
     (This class need to see in its path diskCacheV111/InfoCollector/GlueSchemaV1_2) 



-------------------------------------------------------------------------------------------
          21/09/2005


M - diskCacheV111/PoolManager/CostModuleV1.java:
 M)  String hh_xcm_ls
 M)  Object ac_xcm_ls_$_0_2(Args ars) <- Object ac_xcm_ls_$_1_2(Args ars)

C - diskCacheV111/vehicles/InfoPoolTable.java

C - diskCacheV111/InfoCollector

C - diskCacheV111/InfoCollector/InfoCollector.java

C - diskCacheV111/InfoCollector/InfoBase.java



Test steps on dCache:
  1) replace diskCacheV111/PoolManager/CostModuleV1.java with this version
  2) add diskCacheV111/vehicles/InfoPoolTable.java files
  3) add diskCacheV111/InfoCollector package and the files inside
  4) run dCache and create an InfoCollector cell (i.e. 'infosys')
  5) send to InfoCollector cell the command 'report'
