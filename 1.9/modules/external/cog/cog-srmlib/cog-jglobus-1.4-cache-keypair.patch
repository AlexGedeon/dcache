--- ../x/cog-jglobus-1.4/./src/org/globus/gsi/gssapi/KeyPairCache.java	1970-01-01 01:00:00.000000000 +0100
+++ ./src/org/globus/gsi/gssapi/KeyPairCache.java	2008-05-05 13:33:49.000000000 +0200
@@ -0,0 +1,108 @@
+package org.globus.gsi.gssapi;
+
+import java.util.Map;
+import java.util.Hashtable;
+
+import java.security.KeyPair;
+import java.security.KeyPairGenerator;
+import java.security.NoSuchAlgorithmException;
+import java.security.NoSuchProviderException;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+/**
+ * Simple cache for key pairs. The cache is used to avoid excessive
+ * CPU consumption from key pair generation. In particular for
+ * purposes of delegation, reusing a key pair is safe.
+ */
+public class KeyPairCache
+{
+    static class KeyPairCacheEntry
+    {
+        private long created_at;
+        private KeyPair keys;
+
+        public KeyPairCacheEntry(KeyPair keys, long created_at)
+        {
+            this.keys = keys;
+            this.created_at = created_at;
+        }
+
+        public long getCreatedAt()
+        {
+            return created_at;
+        }
+
+        public KeyPair getKeyPair()
+        {
+            return keys;
+        }
+    }
+
+    private static Log logger = 
+        LogFactory.getLog(GlobusGSSContextImpl.class.getName());
+
+    private final String algorithm;
+    private final String provider;
+    private final long lifetime;
+
+    /** 
+     * Hash table of cache entries. The use of <code>Hashtable</code>
+     * is significant, since we rely on access to the table being
+     * synchronized.
+     */
+    private final Map entries = new Hashtable();
+
+    /**
+     * Creates a KeyPairCache object for the specified algorithm, as
+     * supplied from the specified provider.
+     *
+     * @param algorithm the standard string name of the algorithm. See
+     * Appendix A in the Java Cryptography Architecture API
+     * Specification &amp; Reference for information about standard
+     * algorithm names.
+     * @param provider the string name of the provider. 
+     * @param lifetime the lifetime of the cache in milliseconds.
+     */
+    public KeyPairCache(String algorithm, String provider, long lifetime)
+    {
+        this.algorithm = algorithm;
+        this.provider = provider;
+        this.lifetime = lifetime;
+    }
+
+    /**
+     * Returns a key pair of size <code>bits</code>. The same key pair
+     * may be returned several times within a period of the cache
+     * lifetime.
+     *
+     * @param bits the keysize. This is an algorithm-specific metric,
+     * such as modulus length, specified in number of bits.
+     * @throws NoSuchAlgorithmException if the algorithm is not
+     * available in the environment.
+     * @throws NoSuchProviderException if the provider is not
+     * available in the environment.
+     */
+    public KeyPair getKeyPair(int bits)
+        throws NoSuchAlgorithmException,
+               NoSuchProviderException
+    {
+        long st = System.currentTimeMillis();
+        Integer keysize = new Integer(bits);
+        KeyPairCacheEntry entry = (KeyPairCacheEntry)entries.get(keysize);
+        if (entry == null || st - entry.getCreatedAt() >= lifetime) {
+            logger.debug("Creating " + bits + " bits keypair");
+
+            KeyPairGenerator generator = 
+                KeyPairGenerator.getInstance(algorithm, provider);
+            generator.initialize(bits);
+            logger.debug("Time to generate key pair: " + 
+                         (System.currentTimeMillis() - st));
+            
+            entry = new KeyPairCacheEntry(generator.generateKeyPair(), st);
+            entries.put(keysize, entry);
+        }
+        return entry.getKeyPair();
+    }
+}
\ No newline at end of file
--- ../x/cog-jglobus-1.4/./src/org/globus/gsi/gssapi/GlobusGSSContextImpl.java	2008-05-06 13:36:44.000000000 +0200
+++ ./src/org/globus/gsi/gssapi/GlobusGSSContextImpl.java	2008-05-05 13:33:41.000000000 +0200
@@ -100,6 +100,14 @@
     private static Log sslLogger = 
         LogFactory.getLog(SSLDebug.class.getName());
 
+
+    /** Cache of  
+     *
+     */
+    private static KeyPairCache keyPairCache = 
+        new KeyPairCache("RSA", "BC", 30000);
+
+
     /** Used to distinguish between a token created by 
      * <code>wrap</code> with {@link GSSConstants#GSI_BIG
      * GSSConstants.GSI_BIG}
@@ -188,7 +196,7 @@
     protected TokenInputStream in;
     protected ByteArrayOutputStream out;
     protected BouncyCastleCertProcessingFactory certFactory;
-    
+
     /** Used during delegation */
     protected KeyPair keyPair;
 
@@ -349,6 +357,7 @@
                                                  "noClientCert");
                 }
 
+
                 X509Certificate tmpCert = 
                     PureTLSUtil.convertCert((X509Cert)chain.lastElement());
                 byte [] req = generateCertRequest(tmpCert);
@@ -1250,22 +1259,11 @@
 
     protected byte[] generateCertRequest(X509Certificate cert) 
         throws GeneralSecurityException {
-        
-        // generate key pair
-        KeyPairGenerator generator = null;
-        generator = KeyPairGenerator.getInstance("RSA", "BC");
 
         int bits = 
             ((RSAPublicKey)cert.getPublicKey()).getModulus().bitLength();
-                
-        logger.debug("Creating " + bits + " bits keypair");
-
-        generator.initialize(bits);
 
-        long st = System.currentTimeMillis();
-        this.keyPair = generator.generateKeyPair();
-        logger.debug("Time to generate key pair: " + 
-                     (System.currentTimeMillis() - st));
+        this.keyPair = keyPairCache.getKeyPair(bits);
         
         return this.certFactory.createCertificateRequest(cert, this.keyPair);
     }
