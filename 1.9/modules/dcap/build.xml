<!-- $Id: build.xml,v 1.6 2006-03-24 15:15:02 deriese Exp $ -->

<project name="dCap" default="help" basedir=".">


  <!-- import the common part -->

  <import file="common/common.xml"/>

  <!--
          Properties  -  the following properties, paths, and selectors
                         define the locations and files for dCap
  -->

  <!-- Output Files 
       For each of these jar files there are targets below -->

  <property name="javatunnel.jar" location="${classesDir}/javatunnel.jar" />

  <!-- this should be in 'common.xml' but that didnt work -->
  <target name="cleanall" depends="clean,libs.clean" description="Remove everything produced by me." >
    <delete file="${javatunnel.jar}" />
  </target>

  <!-- Java sources
       These have been derived from packageSets/core.pl and packageSets/protocols.pl -->

  <property name="javatunnel.sourceDir" location="security_plugins" />

  <!-- Packages for javatunnel.jar -->

  <selector id="javatunnel.selector">
    <or>
      <filename name="javatunnel/**" />
    </or>
  </selector>

  <!-- Classpath for javatunnel.jar -->

  <selector id="javatunnel.classpath.selector">
    <or>
      <filename name="**/cog-jglobus.jar"/>
      <filename name="**/cells.jar"/>
    </or>      
  </selector>

  <path id="javatunnel.classpath">
    <fileset dir="${classesDir}" >
      <selector refid="javatunnel.classpath.selector" />
    </fileset>
    <fileset dir="${libDir}" >
      <selector refid="javatunnel.classpath.selector" />
    </fileset>
  </path>

  <!--       =======
             TARGETS
             =======          -->


  <!--
          Copy external libraries to ${internalLibDir} with CVS
  -->

  <target name="libs.cvs" description="Fetch external libs from CVS">

    <!-- One cvs checkout for each dependency -->
    <cvs command="checkout" cvsroot="${cvs.cvsroot}" cvsrsh="ssh" dest="${internalLibDir}"
      package="external/globus" />
    
    <cvs command="checkout" cvsroot="${cvs.cvsroot}" cvsrsh="ssh" dest="${internalLibDir}"
      package="external/cog" />
    
    <move file="${internalLibDir}/external/globus" todir="${internalLibDir}" />
    <move file="${internalLibDir}/external/cog" todir="${internalLibDir}" />
    <delete dir="${internalLibDir}/external" />
    
  </target>

  <!--
          Untar COG and globus C libraries
  -->

  <property name="cog.libDir" value="${libDir}/cog" />
  <property name="cog.tarName" value="cog-srmlib.tgz" />                               <!-- A pattern uniquely identifying one tar file -->
  <property name="cog.untaredTo" value="${cog.libDir}/cog-srmlib" />                   <!-- This is the dir the tar will create -->

  <uptodate property="lib.cog.uptodate" targetfile="${cog.untaredTo}" >
    <srcfiles dir="${cog.libDir}" includes="${cog.tarName}" />
  </uptodate>

  <target name="lib.cog.untar" unless="lib.cog.uptodate" >

    <echo>Unpacking to ${cog.untaredTo}</echo>

    <apply dir="${cog.libDir}" executable="tar" verbose="true" >
      <arg value="xzf" />
      <fileset dir="${cog.libDir}" >
	<filename name="${cog.tarName}"/>
      </fileset>
    </apply>

  </target>

  <!-- globus C libs for gsi tunnel -->

  <property name="globus.libDir" value="${libDir}/globus" />
  <property name="globus.tarName" value="globus-24-dcache-devil1.tgz" />               <!-- A pattern uniquely identifying one tar file -->
  <property name="globus.untaredTo" value="${globus.libDir}/globus-24" />              <!-- This is the dir the tar will create -->

  <uptodate property="lib.globus.uptodate" targetfile="${globus.untaredTo}" >
    <srcfiles dir="${globus.libDir}" includes="${globus.tarName}" />
  </uptodate>

  <target name="lib.globus.untar" unless="lib.globus.uptodate" >

    <echo>Unpacking to ${globus.untaredTo}</echo>

    <apply dir="${globus.libDir}" executable="tar" verbose="true" >
      <arg value="xzf" />
      <fileset dir="${globus.libDir}" >
	<filename name="${globus.tarName}"/>
      </fileset>
    </apply>

    <!--
    <echo>Unpacking to ${globus.libDir}/globus-all-sdk</echo>

    <mkdir dir="${globus.libDir}/globus-all-sdk" />
    <apply dir="${globus.libDir}/globus-all-sdk" executable="tar" verbose="true" >
      <arg value="xzf" />
      <fileset dir="${globus.libDir}" >
	<filename name="**/globus-all-sdk*.tar.gz"/>
      </fileset>
    </apply>

    <echo>Unpacking to ${globus.libDir}/globus-gsi</echo>
    
    <mkdir dir="${globus.libDir}/globus-gsi" />
    <apply dir="${globus.libDir}/globus-gsi" executable="tar" verbose="true" parallel="false">
      <arg value="xzf" />
      <fileset dir="${globus.libDir}/globus-all-sdk" >
	<or>
	  <filename name="*config*gcc32dbg-dev.tar.gz" />
	  <filename name="*gsi*gcc32dbg-dev.tar.gz" />
	  <filename name="*openssl*gcc32dbg-dev.tar.gz" />
	  <filename name="*common*gcc32dbg-dev.tar.gz" />
	</or>
      </fileset>
    </apply>
    -->

  </target>

  <target name="libs.clean" description="Remove the local copy of external libs and unpacked tars" >

    <delete dir="${internalLibDir}" />

    <delete dir="${globus.untaredTo}" />
    <delete dir="${cog.untaredTo}" />
    
  </target>


  <!-- 
             Targets for javatunnel.jar
  -->

  <!-- Depend -->

  <target name="javatunnel.depend" depends="lib.cog.untar" description="Check dependencies for javatunnel.compile" >

    <property name="javatunnel.classpath.value" refid="javatunnel.classpath"/>

    <!-- Debug/Info only -->
    <echo>Classpath of javatunnel: ${javatunnel.classpath.value} </echo>
    
    <!-- This is a list of classes which are needed from external libs -->
    <checkclass classname="org.apache.log4j.Logger" classpath="${javatunnel.classpath.value}" />
    <checkclass classname="org.globus.gsi.GlobusCredential" classpath="${javatunnel.classpath.value}" />

    <checkclassfail>.
        The following classes are missing in the classpath.
        They might be fetchted from CVS with 'ant libs.cvs'.
    </checkclassfail>
   
  </target>

  <!-- Compile -->


  <target name="javatunnel.compile" depends="prepare,javatunnel.depend" description="Compile Java code for javatunnel.jar" >

    <javac destdir="${buildDir}" 
           classpath="${javatunnel.classpath.value}" 
           source="${javac.source}" 
           target="${javac.target}" 
           debug="${javac.debug}" 
           verbose="${javac.verbose}">
      <src path="${javatunnel.sourceDir}" />
      <and>
	<selector refid="javatunnel.selector" />
	<filename name="**/*.java" />
      </and>
    </javac>

  </target>

  <target name="javatunnel.jar" depends="javatunnel.compile" description="Create javatunnel.jar" >

    <jar jarfile="${javatunnel.jar}">
      <fileset dir="${buildDir}" >
	<and>
	  <selector refid="javatunnel.selector" />
	  <filename name="**/*.class" />
	</and>
      </fileset>
    </jar>

  </target>

  <!-- 
             Targets for dcap libraries
  -->

  <!-- Compile -->
 
  <target name="dcap.compile" depends="prepare,lib.globus.untar" description="Compile dCap client libraries" >
  
    <property name="dcap.distDir" location="${distDir}/dcap" />

    <echo>make clean</echo>
    <exec executable="make" failonerror="true" output="${buildDir}/dcap.log" append="true">
      <arg value="clean" />
    </exec>

    <echo>make all</echo>
    <exec executable="make" failonerror="true" output="${buildDir}/dcap.log" append="true" >
      <arg value="all" />
    </exec>

    <echo>make install BIN_PATH=${dcap.distDir}</echo>
    <exec executable="make" failonerror="true" output="${buildDir}/dcap.log" append="true" >
      <arg value="install" />
      <arg value="BIN_PATH=${dcap.distDir}" />
    </exec>

    <echo>cd security_plugins/gssapi
make -f Makefile.gsi clean</echo>
    <exec executable="make" dir="security_plugins/gssapi" failonerror="true" output="${buildDir}/dcap.log" append="true">
      <arg value="-f" />
      <arg value="Makefile.gsi" />
      <arg value="clean" />
    </exec>

    <echo>cd security_plugins/gssapi
make -f Makefile.gsi GSI=${globus.libDir}/globus-24</echo>
    <exec executable="make" dir="security_plugins/gssapi" failonerror="true" output="${buildDir}/dcap.log" append="true" >
      <arg value="-f" />
      <arg value="Makefile.gsi" />
      <arg value="GSI=${globus.libDir}/globus-24" />
    </exec>

    <copy file="security_plugins/gssapi/libgsiTunnel.so" todir="${dcap.distDir}/lib" />

  </target>

</project>
