<!-- $Id: build.xml,v 1.60 2007-10-26 12:22:06 tigran Exp $ -->

<project name="dCacheBuild" default="help" basedir=".">

    <!-- overwriting libDir from common.xml -->

    <property name="dCacheBox-module" location="modules" />
    <property name="libDir" location="${dCacheBox-module}/external" />
    <property name="buildTop" location="${basedir}" />


	<property name="build.id.store" value="version.build" />


    <!-- import the common part -->
    <import file="common/common.xml" />

    <!-- RPM related constants -->
    <!-- modify values in property file ant not here -->
    <property file="common/rpms.properties" />

    <!-- build minor version taken from stored in SCM file, but updated on relese builds only -->
    <loadproperties srcFile="${build.id.store}" />

	<!-- defalut minor vesion is next officail RC -->
    <property name="build.minor.number" value="${build.number}rc" />


    <tstamp>
       <format property="file-timestamp" pattern="yyyyMMddhhmmss" />
    </tstamp>

    <loadproperties srcFile="release.properties" />
    <property name="release.version.id" value="${release.id}-${build.minor.number}-${file-timestamp}"/>
	<property name="release.name" value="${release.version.id}" />

    <!--
          The other Modules
    -->

    <property name="coreDir" location="${dCacheBox-module}/dCache/diskCacheV111" />
    <property name="cellsDir" location="${dCacheBox-module}/cells" />
    <property name="srmDir" location="${dCacheBox-module}/srm" />
    <property name="srmclientDir" location="${dCacheBox-module}/srmclient" />
    <property name="infoProviderDir" location="${dCacheBox-module}/infoProvider" />
    <property name="dcapDir" location="${dCacheBox-module}/dcap" />

    <!--
          Server RPM
    -->

    <property name="rpmTemplateDir" location="rpm" />
    <property name="server.skelDir" location="skel" />

    <property name="rpmRpmDir" location="${distDir}" />
    <property name="rpmSrpmDir" location="${distDir}" />

    <property name="server.rpmTopDir" location="${buildDir}/server-rpm" />
    <!-- These is the temporary dir for RPM -->
    <property name="server.rpmBuildrootDir" location="${server.rpmTopDir}/root" />

    <property name="server.rpmRcFile" location="${server.rpmTopDir}/rpmrc" />
    <property name="server.rpmMacrosFile" location="${server.rpmTopDir}/rpmmacros" />
    <property name="server.rpmSpecFile" location="${server.rpmTopDir}/dcache-server.spec" />

    <property name="rpmPrefix" value="opt/d-cache" />
    <property name="server.rpmDcacheDir" location="${server.rpmBuildrootDir}/${rpmPrefix}" />
    <property name="server.rpmClassesDir" location="${server.rpmDcacheDir}/classes" />
    <property name="server.rpmConfigDir" location="${server.rpmDcacheDir}/config" />

    <target name="server.rpmprepare">
        <property name="bookDir" location="${server.rpmDcacheDir}" />
    </target>

    <target name="server.rpminstall" depends="server.rpmprepare,cells-log4j.bin,srm.bin,dcache-srm.bin,infoProvider.bin,xrootd-tokenauthz.bin,javatunnel.bin,dcache-classpath">

        <!-- rpm directory structure with some defaults scripts -->
        <copy todir="${server.rpmDcacheDir}">
            <fileset dir="${server.skelDir}" />
        </copy>

        <!-- classes, jobs, config, docs -->
        <copy todir="${server.rpmDcacheDir}/classes">
            <fileset dir="${binDir}/classes" />
        </copy>

        <copy todir="${server.rpmDcacheDir}/jobs">
            <fileset dir="${binDir}/jobs" />
        </copy>

        <copy todir="${server.rpmDcacheDir}/config">
            <fileset dir="${binDir}/config" />
        </copy>

        <copy todir="${server.rpmDcacheDir}/docs">
            <fileset dir="${binDir}/docs" />
        </copy>

        <copy todir="${server.rpmDcacheDir}/etc">
            <fileset dir="${binDir}/etc" />
        </copy>

        <copy todir="${server.rpmDcacheDir}/install">
            <fileset dir="${binDir}/install" />
        </copy>

        <copy todir="${server.rpmDcacheDir}/external">
            <fileset dir="${binDir}/external" />
        </copy>

        <copy todir="${server.rpmDcacheDir}/libexec">
            <fileset dir="${binDir}/libexec" />
        </copy>

    </target>

    <!-- Call RPM. The rpm task is not sufficient since it doesnt have the rcfile option -->

    <target name="server.rpm" depends="server.rpminstall" description="Build the dcache-server-xxx.rpm">

        <!-- Create config files for RPM from Templates -->

        <copy todir="${server.rpmTopDir}" overwrite="true">
            <fileset dir="${rpmTemplateDir}">
                <or>
                    <filename name="rpm*.template" />
                    <filename name="dcache-server.spec.template" />
                </or>
            </fileset>
            <mapper type="glob" from="*.template" to="*" />
            <filterset>
                <filter token="rpmMacrosFile" value="${server.rpmMacrosFile}" />
                <!-- This is only used in the rpmrc file -->

                <filter token="rpmRpmDir" value="${rpmRpmDir}" />
                <!-- These are used in the rpmmacros file -->
                <filter token="rpmSrpmDir" value="${rpmSrpmDir}" />
                <filter token="rpmTopDir" value="${server.rpmTopDir}" />

                <filter token="Version" value="${server.version}" />
                <filter token="Release" value="${build.minor.number}" />
            </filterset>
        </copy>


        <exec dir="${server.rpmTopDir}" executable="rpmbuild" failonerror="true">
            <!-- output="${buildDir}/rpm.log" -->
            <arg value="--buildroot" />
            <arg file="${server.rpmBuildrootDir}" />
            <arg value="--rcfile" />
            <arg file="/usr/lib/rpm/rpmrc:${server.rpmRcFile}" />
            <!-- some documentation claims that /usr/lib/rpm/rpmrc
                                                            will always be parsed. But it currently isnt if not set here -->
            <arg value="-bb" />
            <arg file="${server.rpmSpecFile}" />
        </exec>

    </target>



    <target name="server.tgz" depends="server.rpminstall" description="Build the dcache-server-xxx.tar">

        <!-- Create config files for RPM from Templates -->


        <tar destfile="${distDir}/dcache-server-${server.version}-${build.minor.number}.tgz"
             basedir="${server.rpmBuildrootDir}"
             compression="gzip" />
    </target>
    <!--
        Client RPM dCap + SRM
    -->

    <property name="client.skelDir" location="skel" />

    <property name="rpmRpmDir" location="${distDir}" />
    <property name="rpmSrpmDir" location="${distDir}" />

    <property name="client.rpmTopDir" location="${buildDir}/client-rpm" />
    <!-- These is the temporary dir for RPM -->
    <property name="client.rpmBuildrootDir" location="${client.rpmTopDir}/root" />

    <property name="client.rpmRcFile" location="${client.rpmTopDir}/rpmrc" />
    <property name="client.rpmMacrosFile" location="${client.rpmTopDir}/rpmmacros" />
    <property name="client.rpmSpecFile" location="${client.rpmTopDir}/dcache-client.spec" />
    <property name="srmclient.rpmSpecFile" location="${client.rpmTopDir}/dcache-srmclient.spec" />

    <property name="rpmPrefix" value="opt/d-cache" />
    <property name="client.rpmDcacheDir" location="${client.rpmBuildrootDir}/${rpmPrefix}" />
    <property name="client.rpmClassesDir" location="${client.rpmDcacheDir}/classes" />
    <property name="clinet.rpmConfigDir" location="${client.rpmDcacheDir}/config" />



    <target name="dcapclient.rpminstall" depends="dcap.bin,srmclient.bin">

        <!-- DCAP -->
        <mkdir dir="${client.rpmDcacheDir}/dcap" />
        <copy todir="${client.rpmDcacheDir}/dcap">
            <fileset dir="${binDir}/dcap" />
        </copy>

    </target>

    <target name="srmclient.rpminstall" depends="srmclient.bin">

        <!-- SRM client -->
        <mkdir dir="${client.rpmDcacheDir}/srm" />
        <copy todir="${client.rpmDcacheDir}/srm">
            <fileset dir="${binDir}/srm" />
        </copy>

    </target>

    <!-- Dcap + SRM -->

    <target name="client.rpm" depends="dcapclient.rpminstall,srmclient.rpminstall" description="Build the dcache-client-xxx.rpm">


        <!-- Create config files for RPM from Templates -->

        <copy todir="${client.rpmTopDir}" overwrite="true">
            <fileset dir="${rpmTemplateDir}">
                <or>
                    <filename name="rpm*.template" />
                    <filename name="dcache-client.spec.template" />
                </or>
            </fileset>
            <mapper type="glob" from="*.template" to="*" />
            <filterset>
                <filter token="rpmMacrosFile" value="${client.rpmMacrosFile}" />
                <!-- This is only used in the rpmrc file -->

                <filter token="rpmRpmDir" value="${rpmRpmDir}" />
                <!-- These are used in the rpmmacros file -->
                <filter token="rpmSrpmDir" value="${rpmSrpmDir}" />
                <filter token="rpmTopDir" value="${client.rpmTopDir}" />

                <filter token="Version" value="${client.version}" />
                <filter token="Release" value="${build.minor.number}" />
            </filterset>
        </copy>

        <!-- Call RPM. The rpm task is not sufficient since it doesnt have the rcfile option -->

        <exec dir="${client.rpmTopDir}" executable="rpmbuild" failonerror="true">
            <!-- output="${buildDir}/rpm.log" -->
            <arg value="--buildroot" />
            <arg file="${client.rpmBuildrootDir}" />
            <arg value="--rcfile" />
            <arg file="/usr/lib/rpm/rpmrc:${client.rpmRcFile}" />
            <!-- some documentation claims that /usr/lib/rpm/rpmrc
                                                        will always be parsed. But it currently isnt if not set here -->
            <arg value="-bb" />
            <arg file="${client.rpmSpecFile}" />
        </exec>



    </target>

    <!-- SRM only -->

    <target name="srmclient.rpm" depends="srmclient.rpminstall" description="Build the dcache-srmclient-xxx.rpm">


        <!-- Create config files for RPM from Templates -->

        <copy todir="${client.rpmTopDir}" overwrite="true">
            <fileset dir="${rpmTemplateDir}">
                <or>
                    <filename name="rpm*.template" />
                    <filename name="dcache-srmclient.spec.template" />
                </or>
            </fileset>
            <mapper type="glob" from="*.template" to="*" />
            <filterset>
                <filter token="rpmMacrosFile" value="${client.rpmMacrosFile}" />
                <!-- This is only used in the rpmrc file -->

                <filter token="rpmRpmDir" value="${rpmRpmDir}" />
                <!-- These are used in the rpmmacros file -->
                <filter token="rpmSrpmDir" value="${rpmSrpmDir}" />
                <filter token="rpmTopDir" value="${client.rpmTopDir}" />

                <filter token="Version" value="${client.version}" />
                <filter token="Release" value="${build.minor.number}" />
            </filterset>
        </copy>

        <!-- Call RPM. The rpm task is not sufficient since it doesnt have the rcfile option -->

        <exec dir="${client.rpmTopDir}" executable="rpmbuild" failonerror="true">
            <!-- output="${buildDir}/rpm.log" -->
            <arg value="--buildroot" />
            <arg file="${client.rpmBuildrootDir}" />
            <arg value="--rcfile" />
            <arg file="/usr/lib/rpm/rpmrc:${client.rpmRcFile}" />
            <!-- some documentation claims that /usr/lib/rpm/rpmrc
                                                            will always be parsed. But it currently isnt if not set here -->
            <arg value="-bb" />
            <arg file="${srmclient.rpmSpecFile}" />
        </exec>

    </target>


    <!-- meta target -->
    <target name="all" depends="server.rpm,client.rpm" description="build server and client RPMs" />

    <!--
          Find Bugs
    -->

    <property name="findbugs.home" value="${libDir}/findbugs" />
    <target name="findbugs" depends="cells-log4j.bin,srm.bin,dcache-srm.bin,infoProvider.bin,xrootd-tokenauthz.bin,javatunnel.bin" description="bug hunting">
        <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${libDir}/findbugs/lib/findbugs-ant.jar"/>
        <findbugs home="${findbugs.home}"
                    output="html"
                    outputFile="${distDir}/findbugs.html"
                    jvmargs="-Xmx256M"
                    timeout="3600000"
                    omitVisitors="FindDeadLocalStores,UnreadFields,Naming,FindUncalledPrivateMethods" >

            <auxClasspath path="" />
            <class location="${classesDir}/cells.jar" />
            <class location="${classesDir}/cells-log4j.jar" />
            <class location="${classesDir}/dcache.jar" />
            <class location="${classesDir}/dcache-srm.jar" />
            <class location="${classesDir}/srm.jar" />
            <class location="${classesDir}/srm-tomcat.jar" />
            <class location="${classesDir}/gplazma.jar" />
            <class location="${classesDir}/javatunnel.jar" />
            <class location="${classesDir}/infoDynamicSE.jar" />
            <class location="${classesDir}/xrootd-tokenauthz.jar" />
        </findbugs>
    </target>

    <target name="findbugs.cells" depends="cells.bin,cells-log4j.bin" description="bug hunting">
        <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${libDir}/findbugs/lib/findbugs-ant.jar"/>
        <findbugs home="${findbugs.home}"
                    output="html"
                    outputFile="${distDir}/findbugs-cells.html"
                    jvmargs="-Xmx256M"
                    timeout="3600000"
                    omitVisitors="FindDeadLocalStores,UnreadFields,Naming,FindUncalledPrivateMethods" >

            <auxClasspath path="" />
            <class location="${classesDir}/cells.jar" />
            <class location="${classesDir}/cells-log4j.jar" />
        </findbugs>
    </target>

    <target name="findbugs.dcache" depends="dcache.bin" description="bug hunting">
        <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${libDir}/findbugs/lib/findbugs-ant.jar"/>
        <findbugs home="${findbugs.home}"
                    output="html"
                    outputFile="${distDir}/findbugs-dcache.html"
                    jvmargs="-Xmx256M"
                    timeout="3600000"
                    omitVisitors="FindDeadLocalStores,UnreadFields,Naming,FindUncalledPrivateMethods" >

            <auxClasspath path="" />
            <class location="${classesDir}/dcache.jar" />
        </findbugs>
    </target>

    <target name="findbugs.dcache-srm" depends="dcache-srm.bin" description="bug hunting">
        <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${libDir}/findbugs/lib/findbugs-ant.jar"/>
        <findbugs home="${findbugs.home}"
                    output="html"
                    outputFile="${distDir}/findbugs-dcache-srm.html"
                    jvmargs="-Xmx256M"
                    timeout="3600000"
                    omitVisitors="FindDeadLocalStores,UnreadFields,Naming,FindUncalledPrivateMethods" >

            <auxClasspath path="" />
            <class location="${classesDir}/dcache-srm.jar" />
            <class location="${classesDir}/gplazma.jar" />
            <class location="${classesDir}/javatunnel.jar" />
        </findbugs>
    </target>

    <target name="findbugs.srm" depends="dcache-srm.bin" description="bug hunting">
        <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${libDir}/findbugs/lib/findbugs-ant.jar"/>
        <findbugs home="${findbugs.home}"
                    output="html"
                    outputFile="${distDir}/findbugs-dcache-srm.html"
                    jvmargs="-Xmx256M"
                    timeout="3600000"
                    omitVisitors="FindDeadLocalStores,UnreadFields,Naming,FindUncalledPrivateMethods" >

            <auxClasspath path="" />
            <class location="${classesDir}/srm.jar" />
            <class location="${classesDir}/srm-tomcat.jar" />
        </findbugs>
    </target>

    <!--
          Clean Targets
    -->

    <target name="cleanall" description="Remove everything produced by me.">
        <delete dir="${distDir}" />
        <delete dir="${buildDir}" />
    </target>


    <!--
          Debian Targets
    -->

    <target name="server.deb" depends="server.rpm" description="Build dcache-server_xxx.deb">
        <!--echo message="${rpmRpmDir}/noarch/dcache-server-${server.version}-${build.minor.number}.noarch.rpm"/-->
        <exec dir="${rpmRpmDir}/noarch" executable="fakeroot" failonerror="true">
            <arg line="alien -k dcache-server-${server.version}-${build.minor.number}.noarch.rpm"/>
        </exec>
    </target>

    <!--
        MAKE NEW RELEASE.

        current procedure contains foolowing steps:

        1. set rpm/tar name to release id
        2. build rpm and tar
        3. tag all modules and build framework with release id
        4. commit build number
    -->
    <target name="release" description="Make new release">

        <echo message="building new release : ${release.id}-${build.number}" />

        <!-- STEP 1 snd 2 : set rpm/tar name to release id -->
        <antcall target="server.rpm">
             <param name="build.minor.number" value="${build.number}" />
             <param name="release.name" value="${release.id}-${build.number}" />
        </antcall>
        <antcall target="server.tgz">
             <param name="build.minor.number" value="${build.number}" />
             <param name="release.name" value="${release.id}-${build.number}" />
        </antcall>


        <!-- get repository current  revision -->
        <svn>
            <status path="." revisionProperty="current.revision" />
        </svn>

        <!-- STEP 3 : copy current revision to a tag -->
        <svn>
            <copy revision="${current.revision}"
                message="New Version ${release.id}-${build.number}"
                srcUrl="svn+ssh://svn.dcache.org/data/svn/dCache/trunk"
                destUrl="svn+ssh://svn.dcache.org/data/svn/dCache/tags/${release.id}-${build.number}" />
        </svn>

        <!-- STEP 4 : bump up version number and commit -->
        <!-- this will increase build number -->
        <buildnumber file="${build.id.store}" />
        <svn>
            <commit message="New Version ${release.id}-${build.number}" file="${build.id.store}"  />
        </svn>
    </target>

    <!-- pick up jar files located at antlib -->
    <selector id="antlib.classpath.selector">
    <or>
        <filename name="**/*.jar" />
    </or>
    </selector>

   <path id="antlib.classpath">
    <fileset dir="antlib">
        <selector refid="antlib.classpath.selector" />
    </fileset>
   </path>

   <taskdef  resource="svntask.properties" classpathref="antlib.classpath"/>

</project>
