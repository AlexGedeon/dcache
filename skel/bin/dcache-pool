#!/bin/sh
# $Id: dcache-pool,v 1.3 2007-02-23 11:07:24 tigran Exp $
#
# chkconfig: - 93 7
# description: dcache pool startup script
#
ourHome=/opt/d-cache

echo "This script is deprecated and will be removed in a future"
echo "release. Please use ${ourHome}/bin/dcache $1 pool instead."


if [ -r  /etc/rc.d/init.d/functions ]
then
. /etc/rc.d/init.d/functions
fi
#  -----------------------------------------------------------------
#      Checking node_config (and door_config)
#  -----------------------------------------------------------------

yaim_config_file_get_value()
{
# Returns 0 on success
# Returns 2 if key not found
local FILE
local Key
local cursor
local CursorLine
local MatchLine
local AllCursors
local foundPotentialCursors
local lineNumBefore
local PreviousLine
local MatchLine
local RawCursorLine
FILE=$1
Key=$2
if [ ! -f ${FILE} ] ; then
    echo yaim_config_file_get_value called with no file, file=$FILE
    exit 1
fi
AllCursors=`grep -n "^[	 ]*${Key}[	 ]*=" $FILE | cut -d: -f1 `
if [ "${AllCursors}X" == "X" ] ; then
  RET=""
  return 2
fi
# Now iterate through all our matches 
# check the line before is not terminated with \
foundPotentialCursors=""
for acursor in $AllCursors
do
  let lineNumBefore="${acursor}-1"
  if [ "${lineNumBefore}" == "0" ] ; then
    foundPotentialCursors="${acursor} ${foundPotentialCursors}"
  else
    # Following bash convention ignore all content after "#"
    # including lines terminating in "\"
    PreviousLine=`sed "${lineNumBefore}q;d" $FILE | sed 's/#.*$//'`
    MatchLine="${PreviousLine%%"\\"}"
    if [ "${PreviousLine}" == "${MatchLine}" ] ; then
      foundPotentialCursors="${acursor} ${foundPotentialCursors}"
    fi
  fi
done
if [ "${foundPotentialCursors}X" == "X" ] ; then
  RET=""
  return 2
fi
# Since we reversed the order of the cursors while validating them
# We can process only first valid cursor
cursor=`echo ${foundPotentialCursors} | sed 's/ .*//'`

RawCursorLine=`sed "${cursor}q;d" $FILE | cut -s -d= -f2- `
CursorLine=`echo "${RawCursorLine}" | sed 's/#.*//'`
if [ "${RawCursorLine}" == "${CursorLine}" ] ; then
  # No comments on this line so check for terminating '\'
  MatchLine="${CursorLine%%"\\"}\\"
  RET="${CursorLine%%"\\"}"
  while [ "${CursorLine}" == "${MatchLine}" ] 
  do
    # While last line character is "\"
    let cursor+=1
    RawCursorLine=`sed "${cursor}q;d" $FILE`
    CursorLine=`echo "${RawCursorLine}" | sed 's/#.*//'`
    if [ "${RawCursorLine}" != "${CursorLine}" ] ; then
      # No comments on this line
      RET="${RET} ${CursorLine}"
      break
    fi
    MatchLine="${CursorLine%%"\\"}\\"
    RET="$RET ${CursorLine%%"\\"}"
  done
else
  # Comments on this line so no need to process "\"
  RET=${CursorLine}
fi
# Now after all the processing remove starting and termianting white space
RET=`echo $RET | sed 's/^[ 	]*\"\([^"]*\)\"[ 	]*$/\1/'`
}


yaim_config_file_get_value ${ourHome}/etc/node_config NODE_TYPE
NodeTypeVal=$RET


if ! echo "${NodeTypeVal}" | grep '' 2>/dev/null >/dev/null || echo "${NodeTypeVal}" | grep -i 'dummy' 2>/dev/null >/dev/null ; then
    echo "[ERROR] ${ourHome}/etc/node_config missing or not useful. Exiting."
    exit 1
fi

# To make shure to use the right dCache dir
yaim_config_file_get_value ${ourHome}/etc/node_config DCACHE_HOME
ourHomeTmp=${RET}
if [ "x${ourHomeTmp}" = "x" ] ; then
  yaim_config_file_get_value ${ourHome}/etc/node_config DCACHE_BASE_DIR
  ourHomeTmp=$RET
  echo "WARNING: the variable DCACHE_HOME is not set."
  if [ "x${ourHomeTmp}" != "x" ] ; then
     echo "WARNING: Using deprecated value of DCACHE_BASE_DIR as DCACHE_HOME"
     ourHome=${ourHomeTmp}
  else
     echo "ERROR: Failed getting the value of DCACHE_HOME"
  fi
else
  ourHome=${ourHomeTmp}
fi

yaim_config_file_get_value ${ourHome}/etc/node_config NODE_TYPE
PNFS_ROOT=$RET

#  -----------------------------------------------------------------
#      Checking dCacheSetup
#  -----------------------------------------------------------------

if [ -r ${ourHome}/config/dCacheSetup ] ; then
    . ${ourHome}/config/dCacheSetup
else
    echo "[ERROR] ${ourHome}/config/dCacheSetup does not exist. Exiting."
    exit 1
fi

#  ----  Sanitycheck for ${serviceLocatorHost}

if [ -z "${serviceLocatorHost}" -o "${serviceLocatorHost}" = "SERVER" ] ; then
    echo "[ERROR] The variable 'serviceLocatorHost' in '${ourHome}/config/dCacheSetup' has to be set properly. Exiting."
    exit 1
fi

#  ----  Sanitycheck for ${java}

if test -z "${java}" || ! test -x ${java} || ! ${java} -version 2>&1 | egrep 'version "1\.[456]' >/dev/null ; then
    echo "[ERROR] The variable 'java' in '${ourHome}/config/dCacheSetup' has to be set to a java VM version 1.4. Exiting."
    exit 1
fi

#  ----  Setting ${logArea}

logParam=""
if [ -z "${logArea}" ] ; then
    logParam="-logArea=${ourHome}/log"
fi

#
# two ways to defines pool domains to be strared:
#   1)
#       <hostname>.domains + poollist files
#       each line in <hostname>.domains is a name of
#       pool domain. Coresponding .poollist file should exist
#       each domain stared in it's own JVM
#   2)
#       <hostname>.poollist used if it's not a case #1
#       all pools in one domain share the same JVM
#
hostname=`hostname | awk -F. '{print $1}'`
poolListFiles=""
if [ -f ${ourHome}/config/${hostname}.domains ]
then

	while read domainName
	do
		if [ ! -f ${ourHome}/config/${domainName}.poollist ]
		then
	                echo "Requested Pool List File not found (skipped) : ${domainName}.poollist" >&2
		else
			poolListFiles="${poolListFiles} ${domainName}"
		fi

	done < ${ourHome}/config/${hostname}.domains

else

	if [ -f ${ourHome}/config/${hostname}.poollist ]
	then
		poolListFiles="${hostname}"
	fi

fi

action=$1
case "${action}" in
   start|stop)
      if [ -z "${poolListFiles}" ]; then
         echo " No pool to  ${action} - exiting"
         exit 1
      fi


      for poolDomain in ${poolListFiles}
      do
           echo -n "${action} dcache pool: "
           ${ourHome}/jobs/pool -pool=${poolDomain} ${logParam} ${action}
      done
    ;;
  restart|reload)
   	$0 stop
   	$0 start
	;;
  *)
	echo "Usage: $0 {start|stop|restart}"
	exit 1
esac

exit 0
