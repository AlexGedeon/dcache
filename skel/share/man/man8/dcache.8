.TH DCACHE 8 "July 2007" "" ""

.SH NAME
dcache \- The dCache distributed storage resource manager

.SH SYNOPSIS

\fBdcache\fR [OPTION]... COMMAND

.SH DESCRIPTION

This is an init and management script for dCache hosts. For a full
description of dCache and its configuration, please visit the dCache
webpage at http://www.dcache.org.

This script only manages services running on the local host, i.e., all
commands only affect the local host. The script is not intended for
central management of a distributed dCache installation.

.SH OPTIONS

.TP
\fB-d\fR=PATH
where dCache is installed. If not provided, the value from the
environment variable DCACHE_HOME is used. If DCACHE_HOME is not
defined, then /opt/d-cache/ is used.

.SH STARTUP COMMANDS

.TP
.B start [DOMAIN]...
Starts configured dCache services. If one or more services or domains
are specified, only those services or domains are started. See the
description of the \fBstatus\fR and \fBservices\fR commands on how to
obtain a list of configured domains and services.

.TP
.B stop [DOMAIN]...
Stops running services. If one or more services or domains are
specified, only those services or domains are stopped. See the
description of the \fBstatus\fR and \fBservices\fR commands on how to
obtain a list of configured domains and services.

.TP
.B restart [DOMAIN]...
Restarts configured services. If one or more services or domains
are specified, only those services or domains are restarted. See the
description of the \fBstatus\fR and \fBservices\fR commands on how to
obtain a list of configured domains and services.

.TP
.B condrestart [DOMAIN]...
Restarts running services.  If one or more services or domains are
specified, only those services or domains are restarted. See the
description of the \fBstatus\fR and \fBservices\fR commands on how to
obtain a list of configured domains and services.

.SH MONITORING COMMANDS

.TP
.B status

Reports the status of all configured domains. This includes the
service type provided by the domain, whether the domain is running,
and the current PID of the domain.

.TP
.B services
Provides a list of configured services. This list includes the domain
hosting the service, the service type, the cell name and the path of
the log file.

.TP
.B version
Shows the dCache version number.

.SH POOL MANAGEMENTS COMMANDS

.TP
.B pool ls
Provides a list of all configured pools. This list includes the path
to the pool, the pool name, the domain hosting the pool, the size of the
pool and the amount of free space on the file system containing the pool.

.TP
.B pool create [--size=BYTES] [--meta=file|db] [--lfs=MODE] PATH NAME DOMAIN

Creates a new pool in the specified directory. PATH must not
exist. NAME must be a unique pool name. DOMAIN must be a unique dCache
domain name. The directory will be created and populated with the
necessary files to host a pool, and the configuration will be appended
to the layout file.

The \fBsize\fR is specified in bytes or with an optional suffix of K,
M, G or T for kibibytes, mebibytes, gibibytes and tebibytes,
respectively. The size is rounded down to the nearest integer of
gibibytes.

The \fBmeta\fR option configures the meta data backend to use for the
new pool. The default is to use the \fBfile\fR based backend. This
backend creates two meta data files in a control directory for each
data file stored on the pool. The control directory is created in the
pool directory. The \fBdb\fR uses Berkeley DB to store the meta
data. The database is stored in the meta directory underneath the pool
directory.

The \fBlfs\fR option determines the large file store mode of the
pool. The default is \fBnone\fR. Possible values are \fBnone\fR,
\fBprecious\fR, \fBvolatile\fR, and \fBtransient\fR. \fBprecious\fR is
a legacy option. New deployments are encouraged to use per file access
latency and retention policy settings to control whether files are to
be stored on tape or disk. The use of \fBprecious\fR as an LFS mode is
deprecated.

.TP
.B pool reconstruct PATH DESTINATION

Reconstructs the Berkeley DB database containing pool meta data. PATH
is the base path of a pool. DESTINATION is the directory in which the
reconstructed database will be stored. DESTINATION must not exist
prior to calling this command.

The operation is only relevant for pools using the Berkeley DB meta
data backend. Pools using the classic control directory cannot be
reconstructed.

Although the Berkeley DB backend deploys a log structured database, it
can break in case the files get corrupted. This could happen due to OS
failures or hardware failures. In such cases reconstructing the
database is often able to recover most if not all data.

Notice that the command creates the database in a new directory. One
has to manually replace the content of the meta directory of the pool
with the reconstructed database. It is recommended to keep a copy of
the old database.

.SH IMPORT COMMANDS

Java libraries traditionally rely on key managers and trust managers
to access key and certificate material. dCache components that rely on
SSL currently do not provide key managers and trust managers for
accessing certificates in /etc/grid-security/ directly. Therefore
those certificates need to be converted to a different format before
they can be used with components using SSL. The host certificate needs
to be converted to PKCS12 format and the CA certificates into a Java
keystore file.

Notice that this conversion is \fBonly\fR needed for SSL, such as
WebDAV over HTTPS. For GSI the certifcates in /etc/grid-security/ are
accessed directly.

.TP
.B import hostcert [--hostcert=FILE] [--hostkey=FILE] [--out=FILE] [--password=PASSWORD]

Combines the host private key and certificate, both stored in PKCS7
(".pem") format, as a single PKCS12 (".p12") file. The command
defaults to reading the host certificate and key from
/etc/grid-security/, storing the output in
/opt/d-cache/etc/hostcert.p12 or whatever is the value of
\fBkeyStore\fR in etc/dcache.conf. The password defaults to
\fBdcache\fR or whatever is the value of \fBkeyStorePassword\fR in
etc/dcache.conf.

.TP
.B import cacerts [--cacerts=DIR] [--out=FILE] [--password=PASSWORD]
Imports CA certificates from PKCS7 format to the Java Keystore format.
The command defaults to reading the CA certificates from
/etc/grid-security/certificates/ and storing the output in
/opt/d-cache/etc/certificates.jks or whatever is the value of
\fBtrustStore\fR in etc/dcache.conf. The password defaults to
\fBdcache\fR or whatever is the value of \fBtrustStorePassword\fR in
etc/dcache.conf.

.SH DATABASE MANAGEMENT COMMANDS

Several services in dCache rely on relational databases. The commands
below provide basic schema management functionality for those
databases. By default most services manage their schema
automatically. Use the \fBdatabase ls\fR command below to determine
which databases do.

Most commands below accept a glob pattern for \fBCELL@DOMAIN\fR.

Not all services support these commands yet.

.TP
.B database ls
Lists databases of configured services. Not all services support
listing of their database and those that do not all provide the
management commands below.  If they do, the database is listed with
the MANAGEABLE column showing "Yes".

.TP
.B database update [CELL@DOMAIN]...
Updates the schema to the latest revision.

.TP
.B database tag TAG [CELL@DOMAIN]...
Tags the current database schema. See \fBrollback\fR command for
details.

.TP
.B database rollback TAG [CELL@DOMAIN]...
Rolls back the database schema to a tagged revision. Notice that only
the schema is rolled back. Any changes to the content of the databases
cannot be rolled back. There is no guarante that all data can be
preserved when rolling back - this depends on the exact changes that
were made. Please consult the release notes for details.

.TP
.B database rollbacktoDate DATE/TIME [CELL@DOMAIN]...
Rolls back the database schema to the state it was in at the given
date/time. Notice that only the schema is rolled back. Any changes to
the content of the databases cannot be rolled back. There is no
guarante that all data can be preserved when rolling back - this
depends on the exact changes that were made. Please consult the
release notes for details.

.TP
.B database listLocks [CELL@DOMAIN]...
The database schema will be locked when updated. This command lists
the current schema change locks.

.TP
.B database releaseLocks [CELL@DOMAIN]...
The database schema will be locked when updated. This command releases
all schema change locks. Use this command to remove stale locks left
over from failed schema updates.

.TP
.B database doc CELL@DOMAIN DIR
Generates schema documentation for the database of a service. The
documentation is written as HTML to the output directory specified.

.SH DEBUGGING COMMANDS

.TP
.B dump heap [--force] DOMAIN FILE
Dumps the Java heap of DOMAIN to FILE. The file will contain
information about all objects and can be analysed with the Java
\fBjhat(1)\fR utility. Notice that the file might contain confidential
information, such as host keys.

If the domain hangs, then the dump may fail. In those cases the
\fBforce\fR option can force the dump, however the dump will not be
quite as useful, as it will also contain objects that are no longer in
use.

This feature requires that the Java 6 JDK is installed.

.TP
.B dump threads [SERVICE|DOMAIN] ...
Dumps the Java stack traces of all running threads in DOMAIN or
SERVICE. If no services or domains are specified, stack traces of all
running domains will be dumped. The information is written to the log
files of the respective domains.

.SH DEFINITIONS

.PP
The following definitions are used throughout this document:

.TP
.B cell
A component of dCache. dCache consists of many cells. A cell must have
a name which is unique within the domain hosting the cell.
.TP
.B domain
A container hosting one or more dCache cells. A domain runs within its
own process. A domain must have a name which is unique throughout the
dCache instance.
.TP
.B well known cell
A cell which name is published to other domains. Well known cells can
be addressed without knowing the domain hosting the cell. Well known
cells must have a name which is unique throughout the dCache instance.
.TP
.B service
An abstraction used in the dCache configuration to describe atomic
units to add to a domain. A service is typically implemented through
one or more cells.
.TP
.B layout
A set of named domains and a description of the services of each. The
layout may contain domain and service specific configuration values.
.TP
.B pool
A cell providing physical data storage services.

.SH WHAT IS DCACHE

The core part of the dCache has proven to combine heterogenous disk
storage systems in the order of several peta bytes and let its data
repository appear under a single filesystem tree. It takes care of
data hot spots, failing hardware and makes sure, if configured, that
at least a minimum number of copies of each dataset resides within the
system to ensure full data availability in case of disk server
maintainance or failure. Furthermore, dCache supports a large set of
standard access protocols to the data repository and its namespace.

If dCache is connected to a Tertiary Storage System, it optimizes
access to such a system by various techniques. Currently Enstore, the
Open Storage Manager (OSM), the High Performance Storage System (HPSS)
and the Tivoli Storage Manager (TSM) are supported by the dCache
middleware.

Moreover, dCache/SRM supports all interfaces of the LCG storage
element definition.

.SH PROJECT PARTNERS

dCache is a joint venture between the Deutsches Elektronen-Synchrotron
(DESY), the Fermi National Accelerator Laboratory (FNAL), and the
Nordic Data Grid Facility (NDGF).

.SH AUTHORS

This man page and the dcache script was written by
Gerd Behrmann <behrmann@ndgf.org>.
