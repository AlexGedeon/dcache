#  -----------------------------------------------------------------------
#     Default values for gPlazma configuration
#  -----------------------------------------------------------------------
@DEFAULTS_HEADER@


#  ---- Name of the gPlazma cell
#
#  The name gPlazma will use when running.
gplazma.cell.name=gPlazma


#  ---- Number of concurrent requests to process.
#
#  The number of login requests that gPlazma will process
#  concurrently.  Setting this number too high may result in large
#  spikes of CPU activity and the potential to run out of memory.
#  Setting the number too lower results in potentially slow login
#  activity.
#
(forbidden)gPlazmaNumberOfSimultaneousRequests = Use gplazma.cell.limits.threads
gplazma.cell.limits.threads=30


#  ---- Whether to export the gPlazma cell as a well known cell
#
#  This property controls whether the gPlazma cell is published as
#  a well known cell. Well known cells are addressable through their
#  cell name, while other cells are only addressable from other domains
#  using their fully qualified cell address.
#
#  Sometimes one may want to have a local gPlazma instance used by
#  doors in the same domain. This can be achieved by adding the gplazma
#  service to such a domain and setting the gplazma.cell.export property
#  to false. In past versions of dCache, this has been referred to
#  as using gPlazma as a module.
#
(one-of?true|false)gplazma.cell.export=true

#  ---- Location of the configuration file
#
#  The location of the gPlazma configuration file.  This controls
#  which plugins are used to authenticate end-users, in which order
#  and how the plugins are configured.
#
gplazma.configuration.file=${dcache.paths.etc}/gplazma.conf

#  Cell address of pnfsmanager service
gplazma.service.pnfsmanager=${dcache.service.pnfsmanager}

#  Whether to cache gPlazma plugin creation.
#
#  Instances of those plugins mentioned in the gPlazma configuration
#  file are created when the configuration file is read.  This
#  property controls whether subsequent plugins with the same name
#  will reuse the plugin instance.
#
#  Selecting 'true' will result in a single plugin instance for all
#  lines in the configuration file with the same plugin name.  When a
#  configuration file has multiple plugins with the same name, only
#  the plugin-specific configuration (if any) of the first plugin (in
#  document order) is honoured.  All subsequent plugin-specific
#  configuration for plugins with the same name is ignored.
#
#  Selecting 'false' will result in always creating a new plugin
#  instance.  All plugin-specific configuration is honoured.
#
#  The default value ('true') can lead to broken behaviour but
#  maintains backwards-compatibility with earlier dCache releases.
#  This property is scheduled to be removed in dCache release 2.11.0,
#  with creation caching feature being removed.  This is equivalent to
#  setting this property to 'false'.
#
(one-of?true|false)gplazma.enable.plugin-creation-caching = true


#  -----------------------------------------------------------------------
#         Properties for gPlazma plugins
#  -----------------------------------------------------------------------

#  ---- Path of the grid-mapfile file
gplazma.gridmap.file=${dcache.paths.grid-security}/grid-mapfile

#  ---- Path of the storage-authzdb file
gplazma.authzdb.file=${dcache.paths.grid-security}/storage-authzdb

#  ---- Mapping order for determining the UID
#
#  The storage-authzdb file maps names to UID, one or more GIDs, and a
#  number of attributes.
#
#  The authzdb plugin is typically used with other plugins and map
#  user credentials to user and group names. Typical examples are
#  gridmap (maps DN to user name) and vorolemap (maps FQAN to group
#  name). The authzdb plugin maps both user names and group names to
#  UID and GIDs.
#
#  The authzdb plugin can be configured how it selects the mapping
#  that determines the UID to use. The property is an ordered comma
#  separated list of shortcuts of principal that are consulted to
#  select among several possible mappings. The available principle
#  shortcuts are:
#
#   uid Some protocols (specifically DCAP) allow the client to specify
#       a UID explicitly. The UID can be used to disambiguate between
#       several available mappings. Note that a client provided UID is
#       not in itself enough to authorize use of a mapping.
#
#   login Some protocols (DCAP, FTP, among others) allow a login name
#         to be specified in addition to regular X.509 or Kerberos
#         authentication. The login name may be used to disambiguate
#         between several available mappings. Note that a client
#         provided login name is not in itself enough to authorize use
#         of a mapping.
#
#   user The authzdb plugin is always combined with other plugins,
#        such as the gridmap plugin. Such plugins map may map to user
#        names, which both authorize the use of a mapping in
#        storage-authzdb and may determine the mapping being used.
#
#   group The authzdb plugin is always combined with other plugins,
#        such as the vorolemap plugin. Such plugins map may map to
#        group names, which both authorize the use of a mapping in
#        storage-authzdb and may determine the mapping being used. In
#        this case the primary group name will determine the mapping
#        from which the UID is taken.
#
#  With the default setting tha set of candidate mappings (the
#  mappings the user is authorized to use) is determined by the user
#  and group names generated by other plugin (eg gridmap and
#  vorolemap). To select one of the mappings, a user provided UID is
#  consulted; if not avilable a user provided login name is consulted;
#  if not available the mapping of a user name generated by another
#  plugin is consulted (eg gridmap); if not available the mapping of a
#  primary group name generated by another plugin is consulted (eg
#  vorolemap).
#
#  A typical reason to change the default is if one wants to give
#  priority to the group name mapping rather than the user name
#  mapping; Eg when combined with gridmap and vorolemap, changing this
#  property to uid,login,group,user means that the primary group name
#  as generated by vorolemap determines the UID and only if that is
#  not available will the user name generated by gridmap be used.
#
gplazma.authzdb.uid=uid,login,user,group

#  ---- Mapping order for determining the primary GID
#
#  Similar to gplazma.authzdb.uid, but determines how the primary GID
#  is selected. The same principal shortcuts are available, with the
#  exception of uid; instead a user provided GID is consulted when the
#  gid shortcut is used.
#
#  A typical reason to change the default is if one wants to give
#  priority to the user name mapping rather than the group name
#  mapping; Eg when combined with gridmap and vorolemap, changing this
#  property to gid,login,user,group means that the user name as
#  generated by gridmap determines the primary GID and only if that is
#  not available will the primary group name generated by vorolemap be
#  used.
#
gplazma.authzdb.gid=gid,login,group,user

#  ---- Path to the vomsdir directory
gplazma.vomsdir.dir=${dcache.authn.vomsdir}

#  ---- Path to the directory containing trusted CA certificates
gplazma.vomsdir.ca=${dcache.authn.capath}

#  ---- Path to the grid-vorolemap file
gplazma.vorolemap.file=${dcache.paths.grid-security}/grid-vorolemap

#  ---- Password of the host key, if any
gplazma.argus.hostkey.password=

#  ---- Path to the PEM encoded host key
gplazma.argus.hostkey=${dcache.authn.hostcert.key}

#  ---- Path to the PEM encoded host certificate
gplazma.argus.hostcert=${dcache.authn.hostcert.cert}

#  ---- Path to the directory containing trusted CA certificates
gplazma.argus.ca=${dcache.authn.capath}

#  ---- Argus resource ID
gplazma.argus.resource=dcache

#  ---- Argus action ID
gplazma.argus.action=access

#  ---- Argus endpoint
gplazma.argus.endpoint=https://localhost:8154/authz

#  ---- Path to kpwd file
(forbidden)kpwdFile = Use gplazma.kpwd.file
gplazma.kpwd.file = ${dcache.paths.etc}/dcache.kpwd

#  ---- NIS server host
gplazma.nis.server=nisserv.example.org

#  ---- NIS domain name
gplazma.nis.domain=example.org

#  ---- JAAS application name
#
# Identifies the section in the JAAS configuration to use.
#
gplazma.jaas.name=gplazma

#  ---- Path to the PEM encoded host key
gplazma.xacml.hostkey=${dcache.authn.hostcert.key}

#  ---- Path to the PEM encoded host certificate
gplazma.xacml.hostcert=${dcache.authn.hostcert.cert}

#  ---- Path to the directory containing trusted CA certificates
gplazma.xacml.ca=${dcache.authn.capath}


# ---- LDAP plugin
#

# LDAP server host
(forbidden)gplazma.ldap.server = Use gplazma.ldap.url

# LDAP server port number
(forbidden)gplazma.ldap.port = Use gplazma.ldap.url

# LDAP server url
gplazma.ldap.url = ldap://ldap.example.org:389

gplazma.ldap.organization = o=YOUR-SITE,c=YOUR-COUNTRY
gplazma.ldap.tree.people = People
gplazma.ldap.tree.groups = Groups
#
# The search filter to use to locate a user's entry in the LDAP directory.
# It must contain the special token "%s" which will be replaced with the
# supplied username value before the name is used
#
# Some examples:
#    "(uid=%s)"
#    "(&(uid=%s)(objectClass=inetOrgPerson))"
#
gplazma.ldap.userfilter = (uid=%s)

# Use RFC2307 or RFC2307bis LDAP schema types. The difference between RFC2307
# and RFC2307bis is the way which group membership is stored in the LDAP server.
# In an RFC 2307 server, group members are stored as the multi-valued memberuid
# attribute, which contains the name of the users that are members. In an RFC2307bis
# server, group members are stored as the multi-valued member or uniqueMember
# attribute which contains the DN of the user or group that is a member of this group.
# The default is more common RFC 2307, which uses memberUid.
(one-of?memberUid|uniqueMember)gplazma.ldap.group-member = memberUid

#
# The LDAP session plugin assigns two directories to the user's session:
# The root directory, which is the root of the directory hierarchy visible
# to the user and the home directory, which is the directory the user starts
# his session in. In "normal" mode (this is the default), the root directory
# is set to "/" and the home directory is set to "%homeDirectory%", thus the
# user starts his session in the home directory, as it is stored on the LDAP
# server, and is able to go up in the directory hierarchy to "/".
# For a different use-case, for example if dCache is used as a cloud storage
# it may not be wanted that the users can see more than their own storage space.
# For this use case home-dir can be set to "/" and root-dir be set to
# "%homeDirectory".
#
# In both variables %homeDirectory% will be replaced by the user's home
# directory as it is stored on the LDAP server.
#
gplazma.ldap.home-dir = "%homeDirectory%"
gplazma.ldap.root-dir = "/"


# ---- BanFile plugin
#

# BanFile config file
gplazma.banfile.path = ${dcache.paths.etc}/ban.conf

# ---- htpasswd plugin
gplazma.htpasswd.file = ${dcache.paths.etc}/htpasswd
gplazma.htpasswd.file.cache-period = 1
gplazma.htpasswd.file.cache-period.unit = SECONDS

#  -----------------------------------------------------------------------
#         Old properties.
#  -----------------------------------------------------------------------
#
#  The following properties are no longer supported.
#

(forbidden)useGPlazmaAuthorizationModule = In this version of dCache gPlazma always \
    runs as a cell and doors always contact a gplazma service.  To simulate \
    useGPlazmaAuthorizationModule=true, run a non-exported gplazma service in the \
    same domain as the door.  To simulate useGPlazmaAuthorizationModule=false and \
    useGPlazmaAuthorizationCell=true, run an exported gplazma service somewhere in \
    the dCache cluster.  To simulate useGPlazmaAuthorizationModule=false and \
    useGPlazmaAuthorizationCell=false, run a non-exported gplazma service in the \
    same domain as the door configured to use the local kpwd file.  For further \
    details see the description of the gplazma.cell.name, <door>.service.gplazma \
    (e.g., ftp.service.gplazma), and gplazma.cell.export properties.

(forbidden)useGPlazmaAuthorizationCell = In this version of dCache gPlazma always \
    runs as a cell and doors always contact a gplazma service.  If \
    useGPlazmaAuthorizationModule=true then useGPlazmaAuthorizationCell property was \
    ignored.  To simulate useGPlazmaAuthorizationModule=false and \
    useGPlazmaAuthorizationCell=true, run an exported gplazma service somewhere in \
    the dCache cluster.  To simulate useGPlazmaAuthorizationModule=false and \
    useGPlazmaAuthorizationCell=false, run a non-exported gplazma service in the \
    same domain as the door configured to use the local kpwd file.  For further \
    details see the description of the gplazma.cell.name, <door>.service.gplazma \
    (e.g., ftp.service.gplazma), and gplazma.cell.export properties.
