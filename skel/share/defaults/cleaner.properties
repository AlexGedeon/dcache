#  -----------------------------------------------------------------------
#     Default values for Cleaner
#  -----------------------------------------------------------------------
#
#  This Java properties file contains default values for the cleaner
#  service.  All values can be redefined in etc/dcache.conf. Do not
#  modify any values here as your changes will be lost when you next
#  upgrade.
#
#  The cleaner is the component that watches for files being deleted
#  in the namespace.  There must be at most one cleaner per dCache
#  instance.  When files are deleted, the cleaner will notify the
#  pools that hold a copy of the deleted files' data and tell the
#  pools to remove that data.  Optionally, the cleaner can instruct
#  HSM-attached pools to remove copies of the file's data stored on
#  tape.
#
#  The cleaner runs periodically, so there may be a delay between a
#  file being deleted in the namespace and the corresponding deletion
#  of that file's data in pools and on tape.
#
#  The cleaner maintains a list of pools that it was unable to
#  contact: pools are either offline or sufficiently overloaded that
#  they couldn't respond in time.  The cleaner will peroidically try
#  to delete data on pools in this list but, between such retries,
#  these pools are excluded from cleaner activity.
#
#  There are actually two cleaners: one for PNFS and one for Chimera.
#  The correct cleaner is selected automatically.  Unless otherwise
#  stated the properties here apply to both cleaners.
#
#  The PNFS cleaner must run on the same machine as PNFS.  The Chimera
#  cleaner doesn't suffer from this limitation.



#  ---- Cleaner thread count (Chimera only)
#
#  The number of threads in the cleaner's thread-pool.  This
#  thread-pool is used for all cleaner activity.
#
cleaner.thread-pool.size = 5

#  ---- Period of successive run
#
#  The time, in seconds, between successive cleaner runs.
#
#  [The default value for PNFS Cleaner is 90]
#
cleaner.period = 120

#  ---- Pool communication time-out
#
#  The time, in seconds, that the cleaner will wait after sending a
#  message to a pool for that pool's reply.  If no reply is received
#  in time then the cleaner places this pool in the offline pools
#  list.
#
cleaner.pool-reply-timeout = 100

#  ---- Unavailable pool retry time
#
#  The time between successive attempts to clean files from a pool
#  should the pool fail to respond to cleaner requests.
#
#  For the PNFS cleaner the value is in minutes; for Chimera cleaner
#  the value is in seconds.
#
#  [For PNFS, the default value is 3600]
#
cleaner.pool-retry = 1800

#  ---- Report to cell
#
#  The cleaner will send a message indicating that files' data have
#  been removed from pools.  If the chimera.cleaner.report-cell
#  property is 'none' then no messages are sent otherwise this
#  property contains the name of the cell these messages should be
#  sent to.
#
cleaner.report-cell=broadcast

#  ---- Maximum files in one message
#
#  For each pool, the cleaner produces a list of all deleted files
#  that have data stored on that pool.  When instructing a pool to
#  remove data, the cleaner includes as many files as possible in the
#  message.
#
#  The chimera.cleaner.max-files-in-message property places an upper
#  limit on the number of files' data to be deleted in a message.  If
#  more than this number of files are to be deleted then the pool will
#  receive multiple messages.
#
cleaner.max-files-in-message = 500

#  ---- Trash Location Directory (PNFS only)
#
#  Location of the PNFS trash directory.  This is the PNFS directory
#  in which information about deleted files is stored.  If this
#  property is empty, the cleaner will read the value from the
#  /usr/etc/pnfsSetup file.
#
cleaner.trash.dir=

#  ---- Book keeping directory (PNFS only)
#
#  The directory used by the cleaner for book-keeping purposes.  The
#  directory must exist; the cleaner will not create it.  The cleaner
#  will create two directories beneath this directory: 'current' (for
#  storing current activity) and 'archive' (for storing logs).
#
cleaner.book-keeping.dir = /opt/pnfsdb/pnfs/trash/2

#  ---- Archive (PNFS only)
#
#  Controls how the cleaner logs activity.  Valid values for this
#  property are 'log', 'zip' and 'none'.  The log files are stored in
#  the ${cleaner.book-keeping.dir}/archive directory.
#
#  'log'  save uncompressed information in files with names like
#         'YYYY.MM.DD' (year, month and day).
#
#  'zip'  save gzip-compressed information in files with names like
#         '$removes.nnnnn.gz' where 'nnnnn' is the current Unix-time
#         in milliseconds.
#
#  'none' don't save information.
#
cleaner.archive = none

#  ---- HSM cleaner enabled
#
#  If 'enabled' then the cleaner will instruct an HSM-attached pool to
#  remove a deleted files' data stored in the HSM.
#
#  To enable this feature, the property must be enabled at all the
#  pools that are supposed to delete files from an HSM.
#
cleaner.hsm = disabled

#  ---- Interval between flushing failures to the repository (PNFS only)
#
#  Specifies the time, in seconds, between the cleaner flushing failed
#  files to the repository.  Between successive flushes, information
#  about failed flushes is kept in memory.
#
#  Each flush will create a new file.  A lower value will cause the
#  repository to be split into more files.  A higher value will cause
#  a higher memory usage and a larger number of files in the trash
#  directory.
#
cleaner.hsm.flush.period = 60

#  ---- HSM cleaner maximum requests
#
#  As with messages send to pools to remove deleted files' data stored
#  on the pool, the cleaner will group together multiple deleted files
#  that had data stored on the HSM and that may be deleted by the same
#  pool.  The chimera.cleaner.hsm.max-files-in-message property places
#  an upper limit on the number of files a message may contain.
#
cleaner.hsm.max-files-in-message = 100

#  ---- HSM cleaner maximum concurrent requests (PNFS only)
#
#  When the trash directory is scanned, information about deleted
#  files is queued in memory.  This variable specifies the maximum
#  length of this queue.  When the queue length is reached, scanning
#  is suspended until files have been cleaned or flushed to the
#  repository.
#
cleaner.hsm.max-concurrent-requests = 10000

#  ---- HSM-deleting message communication timeout
#
#  Files are cleaned from an HSM by the cleaner sending a message to
#  an HSM-attached pool.  The pool replies with a confirmation
#  message.  This property specifies the timeout the cleaner adopts
#  while waiting for the reply, in seconds, after which the operation
#  is considered to have failed.
#
#  [In PNFS, the default is 100]
#
cleaner.hsm.pool-reply-timeout = 120

#  ---- Location of trash directory for files on tape (PNFS only)
#
#  The HSM cleaner periodically scans this directory to detect deleted
#  files.
#
cleaner.hsm.trash.dir = /opt/pnfsdb/pnfs/1

#  ---- Failed HSM removal storage (PNFS only)
#
#  The HSM cleaner uses this directory to store information about
#  files in could not clean right away. The cleaner will reattempt to
#  clean the files later.  If the directory doesn't exist then the
#  cleaner will attempt to create it.
#
cleaner.hsm.repository.dir = /opt/pnfsdb/pnfs/1/repository



##
##  The following are included for backwards compatibility.  Please
##  use the equivalent property, described above, instead.
##
(deprecated)cleanerArchive=${cleaner.archive}
(deprecated)cleanerDB=${cleaner.book-keeping.dir}
(deprecated)cleanerPoolTimeout=${cleaner.pool-reply-timeout}
(deprecated)cleanerProcessFilesPerRun=${cleaner.max-files-in-message}
(deprecated)cleanerRecover=${cleaner.pool-retry}
(deprecated)cleanerRefresh=${cleaner.period}
(deprecated)hsmCleaner=${cleaner.hsm}
(deprecated)hsmCleanerFlush = ${cleaner.hsm.flush.period}
(deprecated)hsmCleanerRecover=${cleaner.pool-retry}
(deprecated)hsmCleanerRepository=${cleaner.hsm.repository.dir}
(deprecated)hsmCleanerRequest=${cleaner.hsm.max-files-in-message}
(deprecated)hsmCleanerScan=${cleaner.period}
(deprecated)hsmCleanerTimeout=${cleaner.hsm.pool-reply-timeout}
(deprecated)hsmCleanerTrash=${cleaner.hsm.trash.dir}
(deprecated)hsmCleanerQueue=${cleaner.hsm.max-concurrent-requests}
(deprecated)trash=${cleaner.trash.dir}
