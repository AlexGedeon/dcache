# -----------------------------------------------------------------------
#    Default values for srm
# -----------------------------------------------------------------------
#
# This Java properties file contains default values for srm
# configuration parameters. All values can be redefined in
# etc/dcache.conf. Do not modify any values here as your changes will
# be lost when you next upgrade.

# ---- Cell name of srm service
#
srm/cell.name=SRM-${host.name}

#  ---- TCP Port
#
srmPort=8443
srm/port=${srmPort}

# ---- Host name of srm service
#
# For certain operations srm needs to know its domain name.  The
# property "srmHost" can be used to override the default value.  If
# this value is not set, the value is detected automatically and it is
# equivalent to the output of the unix hostname program.
#
srmHost=${host.fqdn}

# ---- Host names of srm services in this deployment
#
# A host part of the source url (surl) is used to determine if the
# surl references file in this storage system.  In case of the copy
# operation, srm needs to be able to dinstinguish between the local
# surl and the remote one.  Also srm needs to refuse to perform
# operations on non local srm urls. localSrmHosts is a comma separated
# list of hosts that will be considered local by this srm service.
# This parameter might need to be defined as a list because in case of
# the multihomed or distributed server it may have more than one
# network name.  If localSrmHosts is not specified, srmHost will be
# used
#
localSrmHosts=${srmHost}

# ---- Transport layer encryption
#
# The security transport to use.  The possible values are SSL or GSI.
# GSI (Grid Security Infrastructure) is the commonly deployed
# protocol, but SSL is the industrial standard.
#
srmGssMode=GSI

# ---- Client side transport layer encryption
#
# The transport used when contacting remote SRM instances.  This is
# only used for third-party copies (srmCopy).
#
srmClientTransport=GSI

# ---- Connector that should be used in the srm service
#
# srmJettyConnectorType can be either sync or async. async means that
# a non-blocking socket is used, while sync means that a blocking
# socket is used.
#
# Use the async setting if you expect a very large number of
# simultaneous SRM connections.
#
srmJettyConnectorType=sync

# ---- Database host name
#
# The srmDbHost variable is deprecated.  For compatibility reasons, it
# is still used if set and srmDatabaseHost is not.
#
(deprecated)srmDbHost=localhost
srmDatabaseHost=${srmDbHost}

# ---- Database name
srmDbName=dcache

# ---- Database user name
srmDbUser=srmdcache

# ---- Database password
srmDbPassword=srmdcache

# ---- Database password file
srmPasswordFile=

# ---- Log to database
#
#   If set to true, the transfer services log transfers to the srm
#   database.
#
srmDbLogEnabled=false

# ---- Authorization cache lifetime
#
#   Time in seconds to cache gPlazma authorization information.
#
srmAuthzCacheLifetime=180

# ---- TCP streams to use for GridFTP transfer
#
#   The number of concurrent TCP streams used by srmCopy controlled
#   GridFTP tranfers.
#
parallelStreams=10

# ---- Timeout of the external srmCopy script
#
#   Timeout in seconds, how long to wait for the completion of the
#   transfer via external client, should the external client be used
#   for the MSS to MSS transfers.
#
srmTimeout=3600

# ---- Buffer size used for srmCopy transfer
#
#   Specified in bytes.
#
srmBufferSize=1048576

# ---- TCP buffer size used for srmCopy transfer
#
#   Specified in bytes.
#
srmTcpBufferSize=1048576

# ---- Controls debug functionality of the external srmCopy script
#
srmDebug=true

# ---- Threads that accept TCP connections
srmJettyConnectorAcceptors=1

# ---- Milliseconds before an idle TCP connection is closed
srmJettyConnectorMaxIdleTime=60000

# ---- Milliseconds before an idle TCP connection is closed during high load
srmJettyConnectorLowResourceMaxIdleTime=20000

# ---- TCP backlog for SRM connections
srmJettyConnectorBackLog=1024

# ---- Maximum number of threads used for SRM request processing
#
# Whenever a client submits an SRM request a thread is allocated. This
# setting controls the maximum number of such threads.
#
# Notice that this does not control the number of SRM transfers that
# can be active at any given time: An SRM transfer involves several
# requests by the client (eg srmPrepareToGet, srmStatusOfGetRequest,
# srmReleaseFiles).
#
# There is also a choice whether to process requests synchronously or
# asynchronously. If processed synchronously, the request is not
# answered until processed. This means that a thread is bound to the
# request for the duration of the request processing. If prcessed
# asynchronous, the thread is released right away and the client
# submits new requests to poll for the completion of the previously
# submitted request. This adds latency and increases authentication
# overhead, but frees thread and TCP connections.
#
srmJettyThreadsMax=500

# ---- Minimum number of threads used for SRM request processing
srmJettyThreadsMin=10

# ---- Milliseconds before an idle requst processing thread is terminated
srmJettyThreadsMaxIdleTime=30000

# ---- Maximum number of queued SRM requests
#
# Once the limit is reached no new connections will be accepted;
# instead, the operating system will queue them in the TCP backlog.
# Once the TCP backlog is filled, the operating system will reject
# further TCP connections.
#
srmJettyThreadsMaxQueued=500

srmGetReqThreadQueueSize=10000
srmGetReqThreadPoolSize=250
srmGetReqMaxWaitingRequests=1000
srmGetReqReadyQueueSize=10000
srmGetReqMaxReadyRequests=2000
srmGetReqMaxNumberOfRetries=10
srmGetReqRetryTimeout=60000
srmGetReqMaxNumOfRunningBySameOwner=100
srmGetDatabaseEnabled=${srmDatabaseEnabled}
srmGetCleanPendingRequestsOnRestart=${srmCleanPendingRequestsOnRestart}
srmGetKeepRequestHistoryPeriod=${srmKeepRequestHistoryPeriod}
srmGetExpiredRequestRemovalPeriod=${srmExpiredRequestRemovalPeriod}
srmGetRequestHistoryDatabaseEnabled=${srmRequestHistoryDatabaseEnabled}
srmGetStoreCompletedRequestsOnly=${srmStoreCompletedRequestsOnly}


# ---- Milliseconds until get requests are processed asynchronously
#
# Some SRM operations may be processed synchronously or
# asynchronously, at the server's discretion.  dCache can start to
# process such requests synchronously and, if this is taking too long,
# reply asynchronously and continue to work on the operation
# background.
#
# This setting specifies the time in milliseconds after which get
# requests are handled asynchronously. Set to 'infinity' to disable
# asynchronous processing.
#
# Asynchronous processing avoids holding TCP connections to the server
# while the request is processed.
#
srmGetReqSwitchToAsynchronousModeDelay=1000

srmBringOnlineReqThreadQueueSize=${srmGetReqThreadQueueSize}
srmBringOnlineReqThreadPoolSize=${srmGetReqThreadPoolSize}
srmBringOnlineReqMaxWaitingRequests=${srmGetReqMaxWaitingRequests}
srmBringOnlineReqReadyQueueSize=${srmGetReqReadyQueueSize}
srmBringOnlineReqMaxReadyRequests=${srmGetReqMaxReadyRequests}
srmBringOnlineReqMaxNumberOfRetries=${srmGetReqMaxNumberOfRetries}
srmBringOnlineReqRetryTimeout=${srmGetReqRetryTimeout}
srmBringOnlineReqMaxNumOfRunningBySameOwner=${srmGetReqMaxNumOfRunningBySameOwner}
srmBringOnlineDatabaseEnabled=${srmDatabaseEnabled}
srmBringOnlineCleanPendingRequestsOnRestart=${srmCleanPendingRequestsOnRestart}
srmBringOnlineKeepRequestHistoryPeriod=${srmKeepRequestHistoryPeriod}
srmBringOnlineExpiredRequestRemovalPeriod=${srmExpiredRequestRemovalPeriod}
srmBringOnlineRequestHistoryDatabaseEnabled=${srmRequestHistoryDatabaseEnabled}
srmBringOnlineStoreCompletedRequestsOnly=${srmStoreCompletedRequestsOnly}

# ---- Milliseconds until bring online requests are processed asynchronously
#
# Some SRM operations may be processed synchronously or
# asynchronously, at the server's discretion.  dCache can start to
# process such requests synchronously and, if this is taking too long,
# reply asynchronously and continue to work on the operation
# background.
#
# This setting specifies the time in milliseconds after which bring
# online requests are handled asynchronously. Set to 'infinity' to
# disable asynchronous processing.
#
# Asynchronous processing avoids holding TCP connections to the server
# while the request is processed.
#
srmBringOnlineReqSwitchToAsynchronousModeDelay=${srmGetReqSwitchToAsynchronousModeDelay}


srmPutReqThreadQueueSize=10000
srmPutReqThreadPoolSize=250
srmPutReqMaxWaitingRequests=1000
srmPutReqReadyQueueSize=10000
srmPutReqMaxReadyRequests=1000
srmPutReqMaxNumberOfRetries=10
srmPutReqRetryTimeout=60000
srmPutReqMaxNumOfRunningBySameOwner=100
srmPutDatabaseEnabled=${srmDatabaseEnabled}
srmPutCleanPendingRequestsOnRestart=${srmCleanPendingRequestsOnRestart}
srmPutKeepRequestHistoryPeriod=${srmKeepRequestHistoryPeriod}
srmPutExpiredRequestRemovalPeriod=${srmExpiredRequestRemovalPeriod}
srmPutRequestHistoryDatabaseEnabled=${srmRequestHistoryDatabaseEnabled}
srmPutStoreCompletedRequestsOnly=${srmStoreCompletedRequestsOnly}

# ---- Milliseconds until put requests are processed asynchronously
#
# Some SRM operations may be processed synchronously or
# asynchronously, at the server's discretion.  dCache can start to
# process such requests synchronously and, if this is taking too long,
# reply asynchronously and continue to work on the operation
# background.
#
# This setting specifies the time in milliseconds after which put
# requests are handled asynchronously. Set to 'infinity' to disable
# asynchronous processing.
#
# Asynchronous processing avoids holding TCP connections to the server
# while the request is processed.
#
srmPutReqSwitchToAsynchronousModeDelay=1000

srmCopyReqThreadQueueSize=10000
srmCopyReqThreadPoolSize=250
srmCopyReqMaxWaitingRequests=1000
srmCopyReqMaxNumberOfRetries=10
srmCopyReqRetryTimeout=60000
srmCopyReqMaxNumOfRunningBySameOwner=100
srmCopyDatabaseEnabled=${srmDatabaseEnabled}
srmCopyCleanPendingRequestsOnRestart=${srmCleanPendingRequestsOnRestart}
srmCopyKeepRequestHistoryPeriod=${srmKeepRequestHistoryPeriod}
srmCopyExpiredRequestRemovalPeriod=${srmExpiredRequestRemovalPeriod}
srmCopyRequestHistoryDatabaseEnabled=${srmRequestHistoryDatabaseEnabled}
srmCopyStoreCompletedRequestsOnly=${srmStoreCompletedRequestsOnly}

# ---- Directory entries to include in list reply
#
# Number of entries allowed to be returnes in a single srmls
# request. Directory listings larger than this most be broken into
# multiple requests.
#
srmLsMaxNumberOfEntries=1000

# ---- List recursion depth
#
# Maximum recursion depth.
#
srmLsMaxNumberOfLevels=100

srmLsRequestThreadQueueSize=1000
srmLsRequestThreadPoolSize=30
srmLsRequestMaxWaitingRequests=1000
srmLsRequestMaxNumberOfRetries=10
srmLsRequestRetryTimeout=60000
srmLsRequestMaxNumberOfRunningBySameOwner=100
srmLsRequestLifetime=3600000

srmLsDatabaseEnabled=${srmDatabaseEnabled}
srmLsCleanPendingRequestsOnRestart=${srmCleanPendingRequestsOnRestart}
srmLsKeepRequestHistoryPeriod=${srmKeepRequestHistoryPeriod}
srmLsExpiredRequestRemovalPeriod=${srmExpiredRequestRemovalPeriod}
srmLsRequestHistoryDatabaseEnabled=${srmRequestHistoryDatabaseEnabled}
srmLsStoreCompletedRequestsOnly=${srmStoreCompletedRequestsOnly}

# ---- Milliseconds until list requests are processed asynchronously
#
# Some SRM operations may be processed synchronously or
# asynchronously, at the server's discretion.  dCache can start to
# process such requests synchronously and, if this is taking too long,
# reply asynchronously and continue to work on the operation
# background.
#
# This seting specifies the time in milliseconds after which put
# requests are handled asynchronously. Set to 'infinity' to disable
# asynchronous processing.
#
# Asynchronous processing avoids holding TCP connections to the server
# while the request is processed.
#
# Notice that not all clients support asynchronous listing. Set the
# property to 'infinity' if compatibility with these clients is
# required.
#
srmLsRequestSwitchToAsynchronousModeDelay=1000
(obsolete)srmAsynchronousLs=See srmLsRequestSwitchToAsynchronousModeDelay


srmReserveDatabaseEnabled=${srmDatabaseEnabled}
srmReserveCleanPendingRequestsOnRestart=${srmCleanPendingRequestsOnRestart}
srmReserveKeepRequestHistoryPeriod=${srmKeepRequestHistoryPeriod}
srmReserveExpiredRequestRemovalPeriod=${srmExpiredRequestRemovalPeriod}
srmReserveRequestHistoryDatabaseEnabled=${srmRequestHistoryDatabaseEnabled}
srmReserveStoreCompletedRequestsOnly=${srmStoreCompletedRequestsOnly}


srmGetLifeTime=14400000
srmBringOnlineLifeTime=${srmGetLifeTime}
srmPutLifeTime=14400000
srmCopyLifeTime=14400000

# ---- File system root exported by the srm service
pnfsSrmPath=/

# ---- Seconds before pool requests time out
srmPoolTimeout=300

# ---- Seconds before namespace operations time out
srmPnfsTimeout=300

# ---- Seconds ...
srmMoverTimeout=7200

# ---- Seconds before pool manager requests time out
srmPoolManagerTimeout=300

remoteCopyMaxTransfers=150
remoteHttpMaxTransfers=30
remoteGsiftpMaxTransfers=${srmCopyReqThreadPoolSize}
remoteGsiftpIoQueue=

# ---- Enable automatic creation of directories
#
# Allow automatic creation of directories via SRM.
#
#  allow=true, disallow=false
#
RecursiveDirectoryCreation=true

# ---- Allow delete via SRM
#
# Allow deletion of files via the SRM interface.
#
#  allow=true, disallow=false
#
AdvisoryDelete=true

# ---- Enable overwrite for SRM v1.1.
#
# Set the following property to true if you want overwrite to be
# enabled for the SRM v1.1 interface as well as for SRM v2.2 interface
# when client does not specify desired overwrite mode.  This option
# will be considered only if the overwriteEnabled variable is set to
# true.
#
srmOverwriteByDefault=false

# ---- Number of concurrent file deletions
#
# To avoid starving other name space operations, the srm throttles
# bulk file deletion. This setting controls the number of concurrent
# file deletion requests submitted to PnfsManager.
#
srmSizeOfSingleRemoveBatch=100

# ---- Directory for delegated proxy certificates
#
# This is the directory in which the delegated user credentials will
# be stored as files. We recommend set permissions to 700 on this
# directory.
#
srmUserCredentialsDirectory=@srmUserCredentialsDirectory@

# ---- PnfsManager cell name used by srm service
(deprecated)srmPnfsManager=${pnfsmanager}

# ---- PoolManager cell name used by srm service
(deprecated)srmPoolManager=${poolmanager}

# ---- Login broker timeout in millis
srmLoginBrokerUpdatePeriod=3000

# ---- Number of doors in random door selection
#
# SRM will order doors according to their load and select sertain
# number of the least loaded and then randomly choose which one to
# use.
#
srmNumberOfDoorsInRandomSelection=5

# ---- Days before old transfers are removed from the database
#
# The srm will hold SRM requests and their history in database for
# srmKeepRequestHistoryPeriod days after that they will be removed.
#
(deprecated)srmNumberOfDaysInDatabaseHistory=10
srmKeepRequestHistoryPeriod=${srmNumberOfDaysInDatabaseHistory}

# ---- Seconds between removing old transfers from the database
#
# How frequently to remove old requests from the database.
#
(deprecated)srmOldRequestRemovalPeriodSeconds=60
srmExpiredRequestRemovalPeriod=${srmOldRequestRemovalPeriodSeconds}

# ---- Enables SRM request transition history logging
#
# Enables logging of transition history of SRM request in the
# database. The request transitions can be examined through the
# command line interface or through the the srmWatch monitoring tool.
#
# Enabling this feature increases the size and load of the database.
#
(deprecated)srmJdbcMonitoringLogEnabled=false
srmRequestHistoryDatabaseEnabled=${srmJdbcMonitoringLogEnabled}

# ---- Database threads
#
# Database updates are queued and their execution is decoupled from
# the execution of SRM requests. The setting controls the number of
# the threads that will be dedicated to execution of these updates.
#
srmJdbcExecutionThreadNum=5

# ---- Database request queue depth
#
# Database updates are queued and their execution is decoupled from
# the execution of SRM requests. The setting controls the maximum
# length of the queue.
#
srmMaxNumberOfJdbcTasksInQueue=1000

#
(deprecated)srmJdbcSaveCompletedRequestsOnly=false
srmStoreCompletedRequestsOnly=${srmJdbcSaveCompletedRequestsOnly}

#
(deprecated)srmJdbcEnabled=true
srmDatabaseEnabled=${srmJdbcEnabled}

# ---- Enable cleaning of pending requests during restart
#
# If enabled and the srm is restarted and there are pending requests
# their state will change to Failed or Done.
#
srmCleanPendingRequestsOnRestart=false

# ---- srmClientDNSLookup
#
# Perform the lookup of the client hostname based on the client's IP
# address. The result is used in pool selection. If srmClientDNSLookup
# is set to false the client's IP address is used.
#
srmClientDNSLookup=false

srmGracefulShutdown=2000


# ---- Enable custom address resolution.
#
#   The srmCustomGetHostByAddr option enables a custom IP resolution
#   if the standard InetAddress method fails. Contributed by BNL.
#
srmCustomGetHostByAddr=false

# ---- Disable request protocol order
#
# Transfer protocols are negotiated between the SRM client and the srm
# service. The client provides an ordered list of protocols it
# supports. The server picks the first protocol it supports.
#
# When set to true, the server ignores the order. This is needed
# for some old srmcp clients.
#
srmIgnoreClientProtocolOrder=false

# ----- Whether to pin disk files
#
# The SRM protocol allows files to be pinned. The pin suppresses
# automatic garbage collection for the lifetime of the pin.
#
# Since dCache pools may be configured to only serve particular types
# of requests and not every pool may be configured to serve a
# particular read request, strict protocol compliance requires pinning
# even for disk only files.
#
# Often strict protocol compliance is however unnecessary, or disk
# files may be known to always be on read pools. In those cases one
# can skip the pinning step and thus reduce the latency of
# srmPrepareToGet request.
#
# When this property is set to false, files with access latency of
# ONLINE will not be pinned. If all files in the system have access
# latency of ONLINE, then the SRM will not use the pin manager at
# all. Note that when this property is set to false, orphaned file
# location entries in the name space will not validated during the
# srmPrepareToGet processing. The consequence is that the
# srmPrepareToGet may succeed for a lost and the subsequence file
# transfer will fail.
#
srmPinOnlineFiles=true

# ---- Quality of Service plugins
#
# to enable terapath plugin define:
# qosPluginClass=org.dcache.srm.qos.terapaths.TerapathsPlugin
# qosConfigFile=${dcache.paths.config}/terapaths.properties
#
# to enable lambda station plugin define:
# qosPluginClass=org.dcache.srm.qos.terapaths.LambdaStation
# qosConfigFile=${dcache.paths.config}/lambdastation.properties
#
qosPluginClass=
qosConfigFile=

srmImplicitSpaceManagerEnabled=true
srmSpaceReservationStrict=true


#
#   Document which TCP ports are opened
#
(immutable)srm/net.ports.tcp=${port}
