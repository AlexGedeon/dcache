#  -----------------------------------------------------------------------
#     Default values for WebDAV doors
#  -----------------------------------------------------------------------
#
#   This Java properties file contains default values for WebDAV
#   configuration parameters. All values can be redefined in
#   etc/dcache.conf. Do not modify any values here as your changes
#   will be lost when you next upgrade.

#  ---- Name of WebDAV door
#
webdav/cell.name=WebDAV-${host.name}

#  ---- PnfsManager timeout
#
#   Specifies the timeout in milliseconds for communication with the
#   PnfsManager cell.
#
webdavPnfsTimeout=120000

#  ---- PoolManager timeout
#
#   Specifies the timeout in milliseconds for communication with the
#   PoolManager cell.
#
webdavPoolManagerTimeout=300000

#  ---- Pool timeout
#
#   Specifies the timeout in milliseconds for communication with the
#   pool cells.
#
webdavPoolTimeout=10000

#  ---- gPlazma timeout
#
#   Specifies the timeout in milliseconds for communication with the
#   gPlazma cell.
#
webdavGplazmaTimeout=180000


#  ---- Mover kill timeout
#
#   Specifies the timeout in milliseconds after which the WebDAV door
#   gives up on waiting for a mover to respond to a kill request.
#
webdavKillTimeout=1500

#  ---- Mover queue timeout
#
#   Specifies the timeout in milliseconds after which the WebDAV door
#   gives up on waiting for a mover to start. This places a bound on
#   the maximum mover queue time.
#
webdavMoverTimeout=180000

#  ---- Mover finished timeout
#
#   Specifies the timeout in milliseconds for how long the WebDAV door
#   waits for a confirmation from the mover after a transfer has
#   completed.
#
webdavTransferConfirmationTimeout=60000

#  ---- TCP port for WebDAV door
#
#   Specifies the TCP port on which the WebDAV door accepts connections.
#
(deprecated)webdavPort=2880
webdav/port=${webdavPort}

#  ---- What IP address to listen on for WebDAV door
#
#   Specifies the IP address to which the WebDAV door listens for
#   connections from clients. Defaults to the wildcard address.
#
webdavAddress=0.0.0.0

#  ---- What IP address to use for connections from pools to the WebDAV door
#
#   For uploads pools create a TCP connection to the WebDAV door.
#   If empty, the WebDAV door will choose a local address. Notice
#   that this address must not be a wildcard address.
#
webdavInternalAddress=

#  ---- Whether to redirect GET requests to a pool
#
#   If true, WebDAV doors will respond with a 302 redirect pointing to
#   a pool holding the file. This requires that a pool can accept
#   incoming TCP connections and that the client follows the
#   redirect. If false, data is relayed through the door. The door
#   will establish a TCP connection to the pool.
#
webdav.redirect.on-read=true

#  ---- Root path of WebDAV door
#
#   Specifies the root directory exposed through the WebDAV door.
#
webdavRootPath=/

#  ---- Paths which are accessible through WebDAV
#
#   This parameter is set to the absolute paths to directories
#   accessible through WebDAV. Multiple directories are separated by a
#   colon.
#
webdavAllowedPaths=/

#  ---- Whether the WebDAV door is read only
#
#   When set to true, only read operations are allowed through WebDAV.
#
webdavReadOnly=false

#  ---- Level of access granted to anonymous users through WebDAV
#
#   Valid values are: NONE, READONLY, FULL
#   The default is: NONE
#
#   Specifies which HTTP methods are granted to anonymous
#   clients. NONE specifies that all anonymous requests will be
#   rejected; READONLY specifies that only read requests are allowed
#   (that is, GET, HEAD, OPTIONS and PROPFIND); FULL specifies that
#   all HTTP methods are allowed.
#
#   Anonymous clients are still subject to authorisation: Only
#   operations with world access are granted.
#
webdavAnonymousAccess=NONE

#  ---- Mover queue
#
#   The mover queue on the pool to which WebDAV transfers will be
#   scheduled. If blank, the default queue will be used.
#
webdavIoQueue=

#  ---- Whether to use HTTP or HTTPS for WebDAV
#
#   Valid values: http, https
#
#   Specifies whether the HTTP or the HTTPS protocol is used. For
#   HTTPS, a server certificate and a trust store need to be created.
#
webdavProtocol=http

#  ---- Server certificate
#
#   This parameter specifies the path to the file containing the
#   PKCS12 encoded server certificate. The host certificate in
#   /etc/grid-security/ needs to be converted to PKCS12 format before
#   it can be used with the WebDAV door. Use the 'bin/dcache import
#   hostcert' command to perform this task.
#
webdavKeyStore=${keyStore}

#  ---- Password for server certificate
#
#   This parameter specifies the password with which the PKCS12 encoded
#   server certificate is encrypted.
#
webdavKeyStorePassword=${keyStorePassword}

#  ---- Trusted CA certificates
#
#   This parameter specifies the path to a Java Keystore containing
#   the the trusted CA certicates used by the WebDAV door. The CA
#   certificates in /etc/grid-security/certificates/ need to be
#   converted into a Java Keystore file before they can be used with
#   the WebDAV door. Use the 'bin/dcache import cacerts' command to
#   perform this task.
#
webdavTrustStore=${trustStore}

#  ---- Password for trusted CA certificates
#
#   This parameter specifies the password with which the Java Keystore
#   containing the trusted CA certificates is encrypted.
#
webdavTrustStorePassword=${trustStorePassword}

#  ---- Whether client certificates are accepted for HTTPS
#
#   This parameter specifies whether the WebDAV door will accept a client
#   certificate for authentication.
#
webdavWantClientAuth=true

#  ---- Whether client certificates are required for HTTPS
#
#   This parameter specifies whether the WebDAV door will require a
#   client certificate for authentication.
#
webdavNeedClientAuth=false

#  ---- Location for static content
#
#   The WebDAV door provides HTML renderings of directories and error
#   messages. The artwork and other static content used in the HTML
#   rendering is exposed through the WebDAV door itself in a virtual
#   directory.
#
#   This parameter specifies the location to use for the virtual
#   directory. The virtual directory masks any real directory with the
#   same path in dCache's name space.
#
(deprecated)webdavContextPath=/.webdav
webdav.static-content.location=${webdavContextPath}

#  ---- Directory with default static content
#
#   The directory in the local file system containing the default
#   artwork and other static content used in the WebDAV door's HTML
#   renderings.
#
webdav.static-content.dir.default=${dcache.home}/docs

#  ---- Directory with custom static content
#
#   The directory in the local file system containing custom artwork
#   and other static content used in the WebDAV door's HTML
#   renderings. Any file placed in this directory masks files by the
#   same name in the default static contet directory.
#
webdav.static-content.dir.local=${dcache.home}/local

#  ---- Base URI for static content
#
#   The base URI indicating the location of artwork and other static
#   content used in the WebDAV door's HTML renderings.
#
webdav.static-content.uri=${webdav.static-content.location}

#  ---- Artwork elements
#
#   The following four variables specify the image and styles to use
#   in HTML renderings of the WebDAV door. These images and stylesheet
#   affect the appearance of the WebDAV door in the browser.
#
webdav.images.logo=${webdav.static-content.uri}/${webdavLogoPath}
webdav.images.directory=${webdav.static-content.uri}/${webdavDirIconPath}
webdav.images.file=${webdav.static-content.uri}/${webdavFileIconPath}
webdav.style.css=${webdav.static-content.uri}/${webdavCssPath}

(deprecated)webdavLogoPath=${logoPath}
(deprecated)webdavDirIconPath=${dirIconPath}
(deprecated)webdavFileIconPath=${fileIconPath}
(deprecated)webdavCssPath=${cssPath}
(deprecated)logoPath=images/logo.png
(deprecated)dirIconPath=images/directoryIcon.png
(deprecated)fileIconPath=images/fileIcon.png
(deprecated)cssPath=styles/webdav.css
