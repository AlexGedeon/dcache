#  -----------------------------------------------------------------------
#     Default values for pools
#  -----------------------------------------------------------------------
#
#   This Java properties file contains default values for pool
#   configuration parameters. All values can be redefined in
#   etc/dcache.conf. Do not modify any values here as your changes
#   will be lost when you next upgrade.

#  ---- Name of pool cell
#
#   Currently this has to be the same as the pool name.
#
pool/cell.name=${name}

#  ---- Port used for passive DCAP movers
#
#   When zero then a random port from the LAN port range is used.
#
pool.dcap.port=0

#  ---- Mover queues to create on a pool
#
#   Mover queues schedule and execute transfers on a pool. Each mover
#   queue can have individual limits and timeouts. These are
#   configured at runtime through the admin interface.
#
#   Doors can be configured to submit transfers to named queues.
#
#   This property takes a comma separated list of named mover queues.
#   The default mover queue is called 'regular' and is always created.
#   The 'regular' mover queue must not be defined in this property.
#
#   Named queues with names that begin with a hyphen are processed in
#   LIFO order; all other queues are process in FIFO order.
#
poolIoQueue=

#  ---- Whether to monitor pool health
#
#   If true, then the pool periodically performs a number of health
#   checks and disables itself if an error is detected.
#
checkRepository=true

#  ---- Do not start the pool until specified paths exists.
#
#   If specified then pool startup procedure will block as long as
#   specified paths does not exists. This is useful to delay pool startup
#   until repository's directory is available.
#
#   Format: [path1][:path2]...[:pathN]
#   For example:
#      waitForFiles=${path}/data
#
waitForFiles=

#  ----- Whether to request file replication for new files
#
#   If enabled, the pool requests that PoolManager replicates new
#   files
#
replicateOnArrival=off

#  ----- Whether to use memory mapping in FTP mover
#
#   If true, the FTP mover utilizes memory mapping for checksum
#   verification. This potentially improves performance, but may cause
#   compatibility issues on some platforms.
#
gsiftpAllowMmap=false

#  ----- Distance between transfer and checksum computation in FTP mover
#
#   When the checksum is computed on the fly, the FTP mover performs
#   the checksum calculation in a separate thread. This property
#   indicates the maximum distance in bytes between the transfer and
#   the checksum calculation. If too small then the transfer may be
#   throttled by a slow checksum calculation. If too large then data
#   may have to be read back from disk rather than read from the
#   cache.
#
gsiftpReadAhead=16777216

# ---- Allow pool to remove precious files on request from cleaner.
#
#   This option is respected only when lfs=none. If lfs=precious then
#   removal of precious files is always allowed.
#
allowCleaningPreciousFiles=true

#  ---- Which meta data repository implementation to use.
#
#   Valid values are:
#         org.dcache.pool.repository.meta.file.FileMetaDataRepository
#         org.dcache.pool.repository.meta.db.BerkeleyDBMetaDataRepository
#
#   This selects which meta data repository implementation to use.
#   This is essentially a choice between storing meta data in a large
#   number of small files in the control/ directory, or to use the
#   embedded Berkeley database stored in the meta/ directory.  Both
#   directories are within the pool directory.
#
metaDataRepository=org.dcache.pool.repository.meta.file.FileMetaDataRepository

#  ---- Which meta data repository to import from.
#
#   Valid values are:
#         org.dcache.pool.repository.meta.file.FileMetaDataRepository
#         org.dcache.pool.repository.meta.db.BerkeleyDBMetaDataRepository
#         org.dcache.pool.repository.meta.EmptyMetaDataStore
#
#   This variable selects which meta data repository to import data
#   from if the information is missing from the main repository. This
#   is useful for converting from one repository implementation to
#   another, without having to fetch all the information from the
#   central PnfsManager.
#
metaDataRepositoryImport=org.dcache.pool.repository.meta.EmptyMetaDataStore

#  ---- The cell to notify after a file was flushed to tape
flushMessageTarget=broadcast

#  ---- Garbage collector used when the pool runs out of space
sweeper=org.dcache.pool.classic.SpaceSweeper2

#  ---- The cell to notify with poolup messages
poolupDestination=broadcast

#  ---- Thread pool size for xrootd disk IO threads
xrootdMoverDiskThreads=20

#  ---- Thread pool size for xrootd socket IO threads.
#
#   If unset the number of CPU cores in the host is used as a default.
#
xrootdMoverSocketThreads=

#  ---- Amount of memory to use for buffering per xrootd connection
#
#   Specified in bytes.
#
xrootdMoverMaxMemoryPerConnection=16777216

#  ---- Total amount of memory to use for buffering for xrootd connections
#
#   Specified in bytes.
#
xrootdMoverMaxMemory=67108864

#  ---- Maximum size of an xrootd frame
#
#   Specified in bytes.
#
xrootdMoverMaxFrameSize=2097152

#  ---- Thread pool size for http disk IO threads
httpMoverDiskThreads=20

#  ---- Thread pool size for http socket IO threads
#
#   If unset the number of CPU cores in the host is used as a default.
#
httpMoverSocketThreads=

#  ---- Amount of memory to use for buffering per http connection
#
#   Specified in bytes
#
httpMoverConnectionMaxMemory=16777216

#  ---- Total amount of memory to use for buffering for http connections
#
#   Specified in bytes.
#
httpMoverMaxMemory=67108864

#  ---- Max chunk size in bytes for received chunked HTTP packets
#
#   This setting affects the maximum frame size of chunked HTTP packets
#   received by the HTTP mover from a remote peer.
#   Setting this value too high can have memory impacts, setting it too low
#   can mean that longer messages won't be accepted by the mover.
#
httpMoverMaxChunkSize=1048576

#  ----- Chunk size in bytes for chunked HTTP packages sent by the server
httpMoverChunkSize=8192

#  ---- HTTP client timeout
#
#   Period in seconds after which a client will be disconnected if the
#   connection is idle (not reading or writing)
#
httpMoverClientIdleTimeout=300

#  ---- HTTP connect timeout
#
#   Timeout in seconds that the mover will wait for a client connect before
#   shutting down
#
httpMoverConnectTimeout=300

#  ---- Large File Store
#
#   Legacy option for disk only pools. There is usually no need to
#   change this setting as the choice whether to write a file to tape
#   is now controlled by the retention policy of each file.
#
lfs=none

#  ---- Maximum amount of space to be used by a pool
#
#   In bytes or 'Infinity'. May also be configured at runtime through
#   the admin interface. If 'Infinity', then the pool size is
#   determined from the size of the file system.
#
maxDiskSpace=Infinity

#  ---- Pool tags
#
#   White space separated list of key value pairs to associate with a
#   pool.
#
tags=hostname=${host.name}



(forbidden)waitForRepositoryReady=Use waitForFiles