# Kerberos DCAP cell

onerror shutdown
check -strong port
check -string kerberos.service-principle-name
check -strong poolmanager
check -strong pnfsmanager
check -strong spacemanager

# Defaults
onerror continue
set context -c kerberosdcapIoQueue              ""
set context -c kerberosdcapIoQueueOverwrite     denied
set context -c kerberosdcapMaxLogin             1500

#
#  ----  Usage of Srm Space Manager
#
#   If srmSpaceManagerEnabled is on we need to use SrmSpaceManager
#   as both poolManager and poolProxy
#
set context -c srmSpaceManagerEnabled no
define env srmSpaceManagerOn.exe endExe
  set env -c doorPoolManager "${spacemanager}"
endExe
eval ${srmSpaceManagerEnabled} yes ==
exec env srmSpaceManagerOn.exe -ifok
set context -c doorPoolManager "${poolmanager}"
onerror shutdown


# External definitions
exec file:${dcache.paths.share}/cells/stage.fragment doors
exec file:${dcache.paths.share}/cells/embedded-gPlazma.fragment

create dmg.cells.services.login.LoginManager ${cell.name} \
             "${port} \
              diskCacheV111.doors.DCapDoor \
              -export \
              -keepAlive=300 \
              -acceptErrorWait=60000 \
              -prot=telnet -localOk \
              -maxLogin=${kerberosdcapMaxLogin} \
              -pnfsManager=${pnfsmanager} \
              -poolManager=${doorPoolManager}  \
              -poolProxy=${doorPoolManager} \
              -pinManager=PinManager \
              -loginBroker=LoginBroker \
              -brokerUpdateTime=120 \
              -protocolFamily=dcap \
              -protocolVersion=1.3.0 \
              -keepPrincipal \
              -authorization=strong \
              -stageConfigurationFilePath=${stageConfigurationFilePath} \
              -io-queue=${kerberosdcapIoQueue} \
              -io-queue-overwrite=${kerberosdcapIoQueueOverwrite} \
              -socketfactory=javatunnel.TunnelServerSocketCreator,javatunnel.GssTunnel,${kerberos.service-principle-name} \
"

