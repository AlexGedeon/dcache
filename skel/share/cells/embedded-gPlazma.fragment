#fragment creates gPlazma if gPlazma is wanted as a Module

define env gPlazma.exe enddefine
# Starts the gPlazma cell

# Defaults

onerror continue
set context -c srmDatabaseHost    localhost
set context -c srmDbName          dcache
set context -c srmDbUser          srmdcache
set context -c srmDbPassword      srmdcache
set context -c gPlazmaNumberOfSimutaneousRequests  30
set context -c gPlazmaRequestTimeout               180
set context -c gplazmaPolicy     ${dcache.home}/etc/dcachesrm-gplazma.policy
set env useGplazma true
onerror shutdown

create org.dcache.auth.gplazma.GPLAZMA gPlazma \
          "default  \
           -gplazma-authorization-module-policy=${gplazmaPolicy} \
	   -jdbcUrl=jdbc:postgresql://${srmDatabaseHost}/${srmDbName} \
           -jdbcDriver=org.postgresql.Driver \
           -dbUser=${srmDbUser} \
           -dbPass=${srmDbPassword} \
           -num-simultaneous-requests=${gPlazmaNumberOfSimutaneousRequests} \
           -request-timeout=${gPlazmaRequestTimeout} \
"
enddefine

define env gPlazmaCheck.exe enddefine

# Only start gPlazma if it does not already exist
onerror continue
getcellinfo gPlazma
exec env gPlazma.exe -ifnotok
onerror shutdown

enddefine

onerror continue
# since gPlazma is no longer available as a module
# ${useGPlazmaAuthorizationCell} has to be true now if eighter
# ${useGPlazmaAuthorizationCell} or ${useGPlazmaAuthorizationModule} is true
set env useGplazma ${useGPlazmaAuthorizationCell}
eval "${useGPlazmaAuthorizationModule}" "true" ==
exec env gPlazmaCheck.exe -ifok
onerror shutdown