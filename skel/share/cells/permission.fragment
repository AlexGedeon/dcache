# Defines permission handling related defaults and the logic to enable
# ACLs.

onerror continue

# Default values
set context -c permissionPolicyEnforcementPoint doors
set context -c aclEnabled    false
set context -c aclTable      t_acl
set context -c aclConnDriver org.postgresql.Driver
set context -c aclConnUrl    jdbc:postgresql://localhost/chimera?prepareThreshold=3
set context -c aclConnUser   postgres
set context -c aclConnPswd   ""

# Defines the permission handler for ACL checking in doors
define env permission-check-acl-in-doors.exe end
  set context -c permissionHandler diskCacheV111.services.acl.ACLPermissionHandler,diskCacheV111.services.acl.UnixPermissionHandler
end

# Defines the permission handler for permission checking in PnfsManager
define env permission-check-pnfsmanager.exe end
  set context -c permissionHandler ""
end

# If PEP is set to PnfsManager, then clear permissionHandler. If
# permissionHandler is already defined, then the existing value will
# take precedence.
eval ${permissionPolicyEnforcementPoint} PnfsManager ==
exec env permission-check-pnfsmanager.exe -ifok

# If ACLs is enabled, then set permissionHandler to both ACL and UNIX
# PermissionHandlers. If permissionHandler is already defined, then
# the existing value will take precedence.
eval ${aclEnabled} true ==
exec env permission-check-acl-in-doors.exe -ifok

# If permissionHandler was not set by any of the previous actions,
# then we set it to the UnixPermissionHandler here.
set context -c permissionHandler diskCacheV111.services.acl.UnixPermissionHandler

onerror shutdown

