--- jglobus-1.6.orig/src/org/globus/gsi/SigningPolicy.java	2008-02-27 06:34:31.000000000 +0100
+++ jglobus/src/org/globus/gsi/SigningPolicy.java	2009-06-22 18:28:49.709166527 +0200
@@ -175,6 +175,8 @@
             return true;
         }
 
+        subjectDN = SigningPolicyParser.normalizeDN(subjectDN);
+
         int size = this.patterns.size();
         for (int i=0; i<size; i++) {
             Pattern pattern = (Pattern)patterns.get(i);
--- jglobus-1.6.orig/src/org/globus/gsi/SigningPolicyParser.java	2008-04-10 02:20:32.000000000 +0200
+++ jglobus/src/org/globus/gsi/SigningPolicyParser.java	2009-06-22 20:35:43.853135723 +0200
@@ -110,6 +110,11 @@
     public static String SINGLE_PATTERN = "[\\p{Print}\\p{Blank}]";
     public static String WILDCARD_PATTERN = SINGLE_PATTERN + "*";
 
+    private static final char[] EMAIL_KEYWORD_1 = { 'E', '=' };
+    private static final char[] EMAIL_KEYWORD_2 = { 'E', 'm', 'a', 'i', 'l',
+                                                    '=' };
+    private static final String EMAIL_KEYWORD = "emailAddress=";
+
     /**
      * Parses the file to extract signing policy defined for CA with
      * the specified DN. If the policy file does not exist, a
@@ -207,7 +212,7 @@
                     }
                     
                     boolean usefulEntry = false;
-                    if ((caDN != null) && (caDN.equals(requiredCaDN))) {
+                    if ((caDN != null) && equalsDN(caDN, requiredCaDN)) {
                         usefulEntry = true;
                         logger.trace("CA DN match " + caDN);
                     }
@@ -557,4 +562,62 @@
         }
         return index;
     }
+
+    public static boolean equalsDN(String dn1, String dn2)
+    {
+        if (dn1 == null && dn2 == null) {
+            return true;
+        }
+        if (dn1 == null || dn2 == null) {
+            return false;
+        }
+        return normalizeDN(dn1).equals(normalizeDN(dn2));
+    }
+
+    private static boolean keyWordPresent(char[] args, int startIndex,
+                                          char[] keyword) {
+
+        if (startIndex + keyword.length > args.length) {
+            return false;
+        }
+
+        for (int i=0, j=startIndex; i<keyword.length; i++, j++) {
+            if (args[j] != keyword[i]) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    public static String normalizeDN(String globusID) {
+
+        if (globusID == null) {
+            return null;
+        }
+
+        char[] globusIdChars = globusID.toCharArray();
+
+        StringBuffer normalizedDN = new StringBuffer(globusIdChars.length);
+
+        for (int i=0; i<globusIdChars.length; i++) {
+
+            if (globusIdChars[i] == '/') {
+
+                normalizedDN.append("/");
+
+                if (keyWordPresent(globusIdChars, i+1, EMAIL_KEYWORD_1)) {
+                    normalizedDN.append(EMAIL_KEYWORD);
+                    i = i + EMAIL_KEYWORD_1.length;
+                } else if (keyWordPresent(globusIdChars, i+1, EMAIL_KEYWORD_2)) {
+                    normalizedDN.append(EMAIL_KEYWORD);
+                    i = i + EMAIL_KEYWORD_2.length;
+                }
+            } else {
+                normalizedDN.append(globusIdChars[i]);
+            }
+        }
+
+        return normalizedDN.toString();
+    }
+
 }
